"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[4293],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),u=p(n),m=i,f=u["".concat(l,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(f,o(o({ref:t},c),{},{components:n})):a.createElement(f,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},28623:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var a=n(87462),i=(n(67294),n(3905));n(44996);const r={id:"02-modifying-main-wasp-file",title:"Modifying main.wasp file"},o=void 0,s={unversionedId:"tutorials/dev-excuses-app/02-modifying-main-wasp-file",id:"tutorials/dev-excuses-app/02-modifying-main-wasp-file",title:"Modifying main.wasp file",description:"First and foremost, we need to add some dependencies and introduce operations to our project. We\u2019ll add Tailwind to make our UI prettier and Axios for making API requests.",source:"@site/docs/tutorials/dev-excuses-app/02-modifying-main-wasp-file.md",sourceDirName:"tutorials/dev-excuses-app",slug:"/tutorials/dev-excuses-app/02-modifying-main-wasp-file",permalink:"/docs/tutorials/dev-excuses-app/02-modifying-main-wasp-file",draft:!1,editUrl:"https://github.com/wasp-lang/wasp/edit/main/web/docs/tutorials/dev-excuses-app/02-modifying-main-wasp-file.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"02-modifying-main-wasp-file",title:"Modifying main.wasp file"},sidebar:"docs",previous:{title:"Creating the project",permalink:"/docs/tutorials/dev-excuses-app/01-creating-the-project"},next:{title:"Adding operations",permalink:"/docs/tutorials/dev-excuses-app/03-adding-operations"}},l={},p=[],c={toc:p};function d(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"First and foremost, we need to add some dependencies and introduce operations to our project. We\u2019ll add Tailwind to make our UI prettier and Axios for making API requests. "),(0,i.kt)("p",null,"Also, we\u2019ll declare a database entity called ",(0,i.kt)("inlineCode",{parentName:"p"},"Excuse"),", queries, and action. The ",(0,i.kt)("inlineCode",{parentName:"p"},"Excuse")," entity consists of the entity\u2019s ID and the text. "),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"Queries")," are here when we need to fetch/read something, while ",(0,i.kt)("inlineCode",{parentName:"p"},"actions")," are here when we need to change/update data. Both query and action declaration consists of two lines \u2013 a reference to the file that contains implementation and a data model to operate on. You can find more info ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#queries-and-actions-aka-operations"},"in the docs section below"),". Let's move on!"),(0,i.kt)("p",null,"Let's add the following code to the ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file's ",(0,i.kt)("inlineCode",{parentName:"p"},"app")," section:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="main.wasp | Adding dependencies"',title:'"main.wasp',"|":!0,Adding:!0,'dependencies"':!0},'  head: [\n    "<script src=\'https://cdn.tailwindcss.com\'><\/script>"\n  ],\n\n  dependencies: [                                          \n    ("axios", "^0.21.1")\n  ]\n')),(0,i.kt)("p",null,"Next, we'll add an Excuse entity to the bottom of the file. You'll also need to define queries and an action that operates on nit."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="main.wasp | Defining Excuse entity, queries and action"',title:'"main.wasp',"|":!0,Defining:!0,Excuse:!0,"entity,":!0,queries:!0,and:!0,'action"':!0},'entity Excuse {=psl                                          \n    id          Int     @id @default(autoincrement())\n    text        String\npsl=}\n\nquery getExcuse {                                           \n  fn: import { getExcuse } from "@ext/queries.js",\n  entities: [Excuse]\n}\n\nquery getAllSavedExcuses {                                  \n  fn: import { getAllSavedExcuses } from "@ext/queries.js",\n  entities: [Excuse]\n}\n\naction saveExcuse {                                         \n  fn: import { saveExcuse } from "@ext/actions.js",\n  entities: [Excuse]\n}\n')),(0,i.kt)("p",null,"The resulting ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file should look like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'title="main.wasp | Final result"',title:'"main.wasp',"|":!0,Final:!0,'result"':!0},'\n// Main declaration, defines a new web app.\napp ItWaspsOnMyMachine {\n\n  // Used as a browser tab title.                                  \n  title: "It Wasps On My Machine",\n\n  head: [\n    // Adding Tailwind to make our UI prettier\n    "<script src=\'https://cdn.tailwindcss.com\'><\/script>"\n  ],\n\n  dependencies: [ \n    // Adding Axios for making HTTP requests                                          \n    ("axios", "^0.21.1")\n  ]\n}\n\n// Render page MainPage on url `/` (default url).\nroute RootRoute { path: "/", to: MainPage }                 \n\n// ReactJS implementation of our page located in `ext/MainPage.js` as a default export\npage MainPage {                                             \n  component: import Main from "@ext/MainPage.js"\n}\n\n// Prisma database entity\nentity Excuse {=psl                                          \n    id          Int     @id @default(autoincrement())\n    text        String\npsl=}\n\n// Query declaration to get a new excuse\nquery getExcuse {                                           \n  fn: import { getExcuse } from "@ext/queries.js",\n  entities: [Excuse]\n}\n\n// Query declaration to get all excuses\nquery getAllSavedExcuses {                                  \n  fn: import { getAllSavedExcuses } from "@ext/queries.js",\n  entities: [Excuse]\n}\n\n// Action to save current excuse\naction saveExcuse {                                         \n  fn: import { saveExcuse } from "@ext/actions.js",\n  entities: [Excuse]\n}\n')),(0,i.kt)("p",null,"Perfect! We've set up all the architecture of our app. Now let's add some logic."))}d.isMDXComponent=!0}}]);