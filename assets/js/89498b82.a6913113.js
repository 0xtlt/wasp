(self.webpackChunkweb=self.webpackChunkweb||[]).push([[9360],{3905:function(e,n,t){"use strict";t.d(n,{Zo:function(){return c},kt:function(){return f}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function p(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},m=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),m=l(t),f=a,d=m["".concat(s,".").concat(f)]||m[f]||u[f]||i;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,o=new Array(i);o[0]=m;var p={};for(var s in n)hasOwnProperty.call(n,s)&&(p[s]=n[s]);p.originalType=e,p.mdxType="string"==typeof e?e:a,o[1]=p;for(var l=2;l<i;l++)o[l]=t[l];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9224:function(e,n,t){"use strict";t.r(n),t.d(n,{frontMatter:function(){return p},contentTitle:function(){return s},metadata:function(){return l},toc:function(){return c},default:function(){return m}});var r=t(2122),a=t(9756),i=(t(7294),t(3905)),o=["components"],p={title:"Overview"},s=void 0,l={unversionedId:"language/overview",id:"language/overview",isDocsHomePage:!1,title:"Overview",description:"Wasp is a declarative language that recognizes web application-specific terms (e.g. page or route) as",source:"@site/docs/language/overview.md",sourceDirName:"language",slug:"/language/overview",permalink:"/wasp/docs/language/overview",editUrl:"https://github.com/wasp-lang/wasp/edit/master/web/docs/language/overview.md",version:"current",frontMatter:{title:"Overview"},sidebar:"docs",previous:{title:"The End",permalink:"/wasp/docs/tutorials/todo-app/the-end"},next:{title:"Basic Elements",permalink:"/wasp/docs/language/basic-elements"}},c=[],u={toc:c};function m(e){var n=e.components,t=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Wasp is a declarative language that recognizes web application-specific terms (e.g. ",(0,i.kt)("em",{parentName:"p"},"page")," or ",(0,i.kt)("em",{parentName:"p"},"route"),") as\nwords of the language."),(0,i.kt)("p",null,"The basic idea is that the higher-level overview of an app (e.g. pages, routes, database model, ...) is defined in ",(0,i.kt)("inlineCode",{parentName:"p"},"*.wasp")," files (for now just one), while the specific parts (web components, back-end queries, ...) are implemented in specific non-wasp technologies (React, NodeJS, Prisma) and then referenced in the ",(0,i.kt)("inlineCode",{parentName:"p"},"*.wasp")," files."),(0,i.kt)("p",null,"Basic structure of a Wasp project is:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"*.wasp")," file"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ext/")," directory -> Contains non-wasp code (JS, CSS, ...) structured in any way you want.")),(0,i.kt)("p",null,"When referencing code from ",(0,i.kt)("inlineCode",{parentName:"p"},"ext/")," in your ",(0,i.kt)("inlineCode",{parentName:"p"},"*.wasp")," file, you do it as ",(0,i.kt)("inlineCode",{parentName:"p"},"@ext/relative/path/of/file/in/ext/dir"),"."),(0,i.kt)("h1",{id:"simple-example"},"Simple example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"TodoApp/\n  - main.wasp\n  - ext/\n    - operations.js\n    - pages/\n      - Main.js\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-css",metastring:'title="main.wasp"',title:'"main.wasp"'},'app todoApp {\n  title: "ToDo App"\n}\n\nroute "/" -> page Main\npage Main {\n  component: import Main from "@ext/pages/Main"\n}\n\nquery getTasks {\n  fn: import { getTasks } from "@ext/operations.js",\n  entities: [Task]\n}\n\naction createTask {\n  fn: import { createTask } from "@ext/operations.js",\n  entities: [Task]\n}\n\nentity Task {=psl\n  id          Int     @id @default(autoincrement())\n  description String\n  isDone      Boolean @default(false)\npsl=}\n')),(0,i.kt)("p",null,"You can check out a full working example ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/wasp-lang/wasp/tree/master/waspc/examples/todoApp"},"here"),"."),(0,i.kt)("p",null,"In the following sections each of these basic language elements is explained."))}m.isMDXComponent=!0}}]);