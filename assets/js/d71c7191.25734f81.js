"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[4409],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>g});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,l=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),c=p(n),g=i,m=c["".concat(l,".").concat(g)]||c[g]||d[g]||o;return n?a.createElement(m,s(s({ref:t},u),{},{components:n})):a.createElement(m,s({ref:t},u))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,s=new Array(o);s[0]=c;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:i,s[1]=r;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},24795:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>r,default:()=>c,frontMatter:()=>s,metadata:()=>l,toc:()=>u});var a=n(87462),i=(n(67294),n(3905)),o=n(44996);const s={id:"06-auth",title:"Authentication"},r=void 0,l={unversionedId:"tutorials/todo-app/06-auth",id:"tutorials/todo-app/06-auth",title:"Authentication",description:"Most of the apps today are multi-user, and Wasp has first-class support for it, so let's see how to add it to our Todo app!",source:"@site/docs/tutorials/todo-app/06-auth.md",sourceDirName:"tutorials/todo-app",slug:"/tutorials/todo-app/06-auth",permalink:"/docs/tutorials/todo-app/06-auth",draft:!1,editUrl:"https://github.com/wasp-lang/wasp/edit/main/web/docs/tutorials/todo-app/06-auth.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{id:"06-auth",title:"Authentication"},sidebar:"docs",previous:{title:"Updating tasks",permalink:"/docs/tutorials/todo-app/05-updating-tasks"},next:{title:"Dependencies",permalink:"/docs/tutorials/todo-app/07-dependencies"}},p={},u=[{value:"Adding entity User",id:"adding-entity-user",level:2},{value:"Defining <code>app.auth</code>",id:"defining-appauth",level:2},{value:"Adding Login and Signup pages",id:"adding-login-and-signup-pages",level:2},{value:"Updating <code>MainPage</code> page to check if user is authenticated",id:"updating-mainpage-page-to-check-if-user-is-authenticated",level:2},{value:"Defining User-Task relation in entities",id:"defining-user-task-relation-in-entities",level:2},{value:"Updating operations to forbid access to non-authenticated users",id:"updating-operations-to-forbid-access-to-non-authenticated-users",level:2},{value:"Logout button",id:"logout-button",level:2}],d={toc:u};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Most of the apps today are multi-user, and Wasp has first-class support for it, so let's see how to add it to our Todo app!"),(0,i.kt)("p",null,"Let's define a Todo list (luckily we have an app for that now ;)) to get this done:"),(0,i.kt)("ul",{className:"contains-task-list"},(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add Wasp entity ",(0,i.kt)("inlineCode",{parentName:"li"},"User"),"."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add ",(0,i.kt)("inlineCode",{parentName:"li"},"auth")," Wasp declaration."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add ",(0,i.kt)("inlineCode",{parentName:"li"},"Login")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Signup")," pages"),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Modify ",(0,i.kt)("inlineCode",{parentName:"li"},"src/client/MainPage.jsx")," so that it requires authentication."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add Prisma relation between ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"Task")," entities."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Modify our queries and actions so that they work only with the tasks belonging to the authenticated user."),(0,i.kt)("li",{parentName:"ul",className:"task-list-item"},(0,i.kt)("input",{parentName:"li",type:"checkbox",checked:!1,disabled:!0})," ","Add logout button.")),(0,i.kt)("h2",{id:"adding-entity-user"},"Adding entity User"),(0,i.kt)("p",null,"First, let's define entity ",(0,i.kt)("inlineCode",{parentName:"p"},"User"),":"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="main.wasp"',title:'"main.wasp"'},"// ...\n\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    username    String  @unique\n    password    String\npsl=}\n")),(0,i.kt)("p",null,"Run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"wasp db migrate-dev\n")),(0,i.kt)("p",null,"to propagate the schema change (we added User)."),(0,i.kt)("h2",{id:"defining-appauth"},"Defining ",(0,i.kt)("inlineCode",{parentName:"h2"},"app.auth")),(0,i.kt)("p",null,"Next, we want to tell Wasp that we want full-stack ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#authentication--authorization"},"authentication")," in our app, and that it should use entity ",(0,i.kt)("inlineCode",{parentName:"p"},"User")," for it:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c",metastring:'{7-16} title="main.wasp"',"{7-16}":!0,title:'"main.wasp"'},'app TodoApp {\n  wasp: {\n    version: "^0.7.0"\n  },\n  title: "Todo app",\n\n  auth: {\n    // Expects entity User to have (username:String) and (password:String) fields.\n    userEntity: User,\n    methods: {\n      // We also support Google and GitHub, with more on the way!\n      usernameAndPassword: {}\n    },\n    // We\'ll see how this is used a bit later\n    onAuthFailedRedirectTo: "/login"\n  }\n}\n')),(0,i.kt)("p",null,"What this means for us is that Wasp now offers us:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Login and Signup forms located at ",(0,i.kt)("inlineCode",{parentName:"li"},"@wasp/auth/forms/Login")," and ",(0,i.kt)("inlineCode",{parentName:"li"},"@wasp/auth/forms/Signup")," paths, ready to be used."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"logout()")," action."),(0,i.kt)("li",{parentName:"ul"},"React hook ",(0,i.kt)("inlineCode",{parentName:"li"},"useAuth()"),"."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"context.user")," as an argument within query/action.")),(0,i.kt)("p",null,"This is a very high-level API for auth which makes it very easy to get started quickly, but is\nnot very flexible. If you require more control (e.g. want to execute some custom code on the server\nduring signup, check out the ",(0,i.kt)("a",{parentName:"p",href:"/docs/language/features#lower-level-api"},"lower-level auth API"),"."),(0,i.kt)("p",null,"Ok, that was easy!"),(0,i.kt)("p",null,"To recap, so far we have defined:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"User")," entity."),(0,i.kt)("li",{parentName:"ul"},"The ",(0,i.kt)("inlineCode",{parentName:"li"},"app.auth")," field, thanks to which Wasp gives us plenty of auth-related functionality.")),(0,i.kt)("h2",{id:"adding-login-and-signup-pages"},"Adding Login and Signup pages"),(0,i.kt)("p",null,"When we defined ",(0,i.kt)("inlineCode",{parentName:"p"},"app.auth")," we got login and signup forms generated for us, but now we have to create Login and Signup pages that use them. In our ",(0,i.kt)("inlineCode",{parentName:"p"},"main.wasp")," file we'll add the following:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="main.wasp"',title:'"main.wasp"'},'// ...\n\nroute SignupRoute { path: "/signup", to: SignupPage }\npage SignupPage {\n  component: import Signup from "@client/SignupPage"\n}\n\nroute LoginRoute { path: "/login", to: LoginPage }\npage LoginPage {\n  component: import Login from "@client/LoginPage"\n}\n')),(0,i.kt)("p",null,"Great, Wasp now knows how to route these and where to find the pages. Now to the React code of the pages:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/client/LoginPage.jsx"',title:'"src/client/LoginPage.jsx"'},"import { Link } from 'react-router-dom'\n\nimport LoginForm from '@wasp/auth/forms/Login'\n\nconst LoginPage = () => {\n  return (\n    <>\n      <LoginForm/>\n      <br/>\n      <span>\n        I don't have an account yet (<Link to=\"/signup\">go to signup</Link>).\n      </span>\n    </>\n  )\n}\n\nexport default LoginPage\n")),(0,i.kt)("p",null,"The Signup page is very similar to the login one:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/client/SignupPage.jsx"',title:'"src/client/SignupPage.jsx"'},"import { Link } from 'react-router-dom'\n\nimport SignupForm from '@wasp/auth/forms/Signup'\n\nconst SignupPage = () => {\n  return (\n    <>\n      <SignupForm/>\n      <br/>\n      <span>\n        I already have an account (<Link to=\"/login\">go to login</Link>).\n      </span>\n    </>\n  )\n}\n\nexport default SignupPage\n")),(0,i.kt)("h2",{id:"updating-mainpage-page-to-check-if-user-is-authenticated"},"Updating ",(0,i.kt)("inlineCode",{parentName:"h2"},"MainPage")," page to check if user is authenticated"),(0,i.kt)("p",null,"Now, let's see how we're going to handle the situation when user is not logged in.\n",(0,i.kt)("inlineCode",{parentName:"p"},"MainPage")," page is a private page and we want users to be able to see it only if they are authenticated.\nThere is a specific Wasp feature that allows us to achieve this in a simple way:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c",metastring:'{3} title="main.wasp"',"{3}":!0,title:'"main.wasp"'},'// ...\npage MainPage {\n  authRequired: true,\n  component: import Main from "@client/MainPage"\n}\n')),(0,i.kt)("p",null,"With ",(0,i.kt)("inlineCode",{parentName:"p"},"authRequired: true")," we declared that page ",(0,i.kt)("inlineCode",{parentName:"p"},"MainPage")," is accessible only to authenticated users.\nIf an unauthenticated user tries to access route ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," where our page ",(0,i.kt)("inlineCode",{parentName:"p"},"MainPage")," is, they will be redirected to ",(0,i.kt)("inlineCode",{parentName:"p"},"/login")," as specified with the ",(0,i.kt)("inlineCode",{parentName:"p"},"onAuthFailedRedirectTo")," property in ",(0,i.kt)("inlineCode",{parentName:"p"},"app.auth"),"."),(0,i.kt)("p",null,"Also, when ",(0,i.kt)("inlineCode",{parentName:"p"},"authRequired")," is set to ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", the React component of a page (specified by ",(0,i.kt)("inlineCode",{parentName:"p"},"component")," property within ",(0,i.kt)("inlineCode",{parentName:"p"},"page"),") will be provided ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," object as a prop. It can be accessed like this:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'{1} title="src/client/MainPage.jsx"',"{1}":!0,title:'"src/client/MainPage.jsx"'},"const MainPage = ({ user }) => {\n    // Do something with the user\n}\n")),(0,i.kt)("p",null,"Ok, time to try out how this works!"),(0,i.kt)("p",null,"Now, we can start the app again (if it's not still running):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"wasp start\n")),(0,i.kt)("p",null,"Try going to the main page (",(0,i.kt)("inlineCode",{parentName:"p"},"/"),") of our web app. It will now redirect you to ",(0,i.kt)("inlineCode",{parentName:"p"},"/login"),", where you'll be asked to authenticate. Once you log in or sign up, you will be sent back to ",(0,i.kt)("inlineCode",{parentName:"p"},"/")," and you will see the todo list."),(0,i.kt)("p",null,"Let's now see how things look in the database! Run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"wasp db studio\n")),(0,i.kt)("img",{alt:"Database demonstration - password hashing",src:(0,o.Z)("img/wasp_db_hash_demonstration.gif"),style:{border:"1px solid black"}}),(0,i.kt)("p",null,"We see there is a user and that its password is already hashed! Wasp took care of this for us."),(0,i.kt)("p",null,"However, you will notice that if you try logging in with different users and creating tasks, all users are still sharing tasks.\nThat is because we did not yet update queries and actions to work only on the current user's tasks, so let's do that next!"),(0,i.kt)("h2",{id:"defining-user-task-relation-in-entities"},"Defining User-Task relation in entities"),(0,i.kt)("p",null,"First, let's define a one-to-many relation between User and Task (check the ",(0,i.kt)("a",{parentName:"p",href:"https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-schema/relations"},"prisma docs on relations"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-c",metastring:'{6,13-14} title="main.wasp"',"{6,13-14}":!0,title:'"main.wasp"'},"// ...\nentity User {=psl\n    id          Int     @id @default(autoincrement())\n    username    String  @unique\n    password    String\n    tasks       Task[]\npsl=}\n// ...\nentity Task {=psl\n    id          Int     @id @default(autoincrement())\n    description String\n    isDone      Boolean @default(false)\n    user        User?    @relation(fields: [userId], references: [id])\n    userId      Int?\npsl=}\n// ...\n")),(0,i.kt)("p",null,"We modified entities by adding the User-Task relation, so let's run"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"wasp db migrate-dev\n")),(0,i.kt)("p",null,"to create a database schema migration and apply it to the database."),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"We made ",(0,i.kt)("inlineCode",{parentName:"p"},"user")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"userId")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"Task")," optional (via ",(0,i.kt)("inlineCode",{parentName:"p"},"?"),") because that allows us to keep the existing tasks, which don't have a user assigned, in the database.\nThis is not recommended because it allows an unwanted state in the database (what is the purpose of the task not belonging to anybody?) and normally we would not make these fields optional.\nInstead, we would do a data migration to take care of those tasks, even if it means just deleting them all.\nHowever, for this tutorial, for the sake of simplicity, we will stick with this.")),(0,i.kt)("h2",{id:"updating-operations-to-forbid-access-to-non-authenticated-users"},"Updating operations to forbid access to non-authenticated users"),(0,i.kt)("p",null,"Next, let's update the queries and actions to forbid access to non-authenticated users and to operate only on the currently logged in user's tasks:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'{1,4,6} title="src/server/queries.js"',"{1,4,6}":!0,title:'"src/server/queries.js"'},"import HttpError from '@wasp/core/HttpError.js'\n\nexport const getTasks = async (args, context) => {\n  if (!context.user) { throw new HttpError(401) }\n  return context.entities.Task.findMany(\n    { where: { user: { id: context.user.id } } }\n  )\n}\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js",metastring:'{1,4,8,14,15,16} title="src/server/actions.js"',"{1,4,8,14,15,16}":!0,title:'"src/server/actions.js"'},"import HttpError from '@wasp/core/HttpError.js'\n\nexport const createTask = async (args, context) => {\n  if (!context.user) { throw new HttpError(401) }\n  return context.entities.Task.create({\n    data: {\n      description: args.description,\n      user: { connect: { id: context.user.id } }\n    }\n  })\n}\n\nexport const updateTask = async (args, context) => {\n  if (!context.user) { throw new HttpError(401) }\n  return context.entities.Task.updateMany({\n    where: { id: args.taskId, user: { id: context.user.id } },\n    data: { isDone: args.data.isDone }\n  })\n}\n")),(0,i.kt)("admonition",{type:"note"},(0,i.kt)("p",{parentName:"admonition"},"Due to how Prisma works, we had to convert ",(0,i.kt)("inlineCode",{parentName:"p"},"update")," to ",(0,i.kt)("inlineCode",{parentName:"p"},"updateMany")," in ",(0,i.kt)("inlineCode",{parentName:"p"},"updateTask")," action to be able to specify user id in ",(0,i.kt)("inlineCode",{parentName:"p"},"where"),".")),(0,i.kt)("p",null,"Right, that should be it!"),(0,i.kt)("p",null,"Run (or just continue running):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"wasp start\n")),(0,i.kt)("p",null,"and everything should work as expected now! Each user has their own tasks only they can see and edit."),(0,i.kt)("p",null,"Try playing around with our app, adding a few users and some tasks. Then run:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-shell-session"},"wasp db studio\n")),(0,i.kt)("img",{alt:"Database demonstration",src:(0,o.Z)("img/wasp_db_demonstration.gif"),style:{border:"1px solid black"}}),(0,i.kt)("p",null,"You will see that each user has its own tasks, just as we specified in our code!"),(0,i.kt)("h2",{id:"logout-button"},"Logout button"),(0,i.kt)("p",null,"Last, but not the least, let's add logout functionality:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'{2,10} title="src/client/MainPage.jsx"',"{2,10}":!0,title:'"src/client/MainPage.jsx"'},"// ...\nimport logout from '@wasp/auth/logout.js'\n//...\n\nconst MainPage = () => {\n  // ...\n  return (\n    <div>\n      // ...\n      <button onClick={logout}> Logout </button>\n    </div>\n  )\n}\n")),(0,i.kt)("p",null,"This is it, we have a working authentication system, and our Todo app is multi-user!"))}c.isMDXComponent=!0}}]);