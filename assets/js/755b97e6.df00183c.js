"use strict";(self.webpackChunkweb=self.webpackChunkweb||[]).push([[3317],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,s=e.parentName,c=p(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,g=u["".concat(s,".").concat(m)]||u[m]||d[m]||r;return n?a.createElement(g,i(i({ref:t},c),{},{components:n})):a.createElement(g,i({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var p={};for(var s in t)hasOwnProperty.call(t,s)&&(p[s]=t[s]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var l=2;l<r;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},89763:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>p,default:()=>u,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905)),r=n(44996);const i={id:"01-creating-new-project",title:"Creating a new project"},p=void 0,s={unversionedId:"tutorials/todo-app/01-creating-new-project",id:"tutorials/todo-app/01-creating-new-project",title:"Creating a new project",description:"Run the following command in your terminal to create a new Wasp project:",source:"@site/docs/tutorials/todo-app/01-creating-new-project.md",sourceDirName:"tutorials/todo-app",slug:"/tutorials/todo-app/01-creating-new-project",permalink:"/docs/tutorials/todo-app/01-creating-new-project",draft:!1,editUrl:"https://github.com/wasp-lang/wasp/edit/main/web/docs/tutorials/todo-app/01-creating-new-project.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{id:"01-creating-new-project",title:"Creating a new project"},sidebar:"docs",previous:{title:"Introduction",permalink:"/docs/tutorials/todo-app"},next:{title:"Task entity",permalink:"/docs/tutorials/todo-app/02-task-entity"}},l={},c=[{value:"Taking a closer look at the code",id:"taking-a-closer-look-at-the-code",level:2},{value:"Cleaning up",id:"cleaning-up",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Run the following command in your terminal to create a new Wasp project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"wasp new TodoApp\n")),(0,o.kt)("p",null,"Enter the created directory and run:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},"cd TodoApp\nwasp start\n")),(0,o.kt)("p",null,"You have just run your app in the development mode!"),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"wasp start")," might take a little bit longer due to the initial setup.")),(0,o.kt)("p",null,"You will be seeing a lot of different output from the client, server and database setting themselves up.\nOnce ready, a new tab should open in your browser at ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:3000"),", with a simple placeholder page:"),(0,o.kt)("img",{alt:"Screenshot of new Wasp app",src:(0,r.Z)("img/wasp-new-screenshot.png"),style:{border:"1px solid black"},height:"400px"}),(0,o.kt)("p",null,"We just set the foundations of our app! We don't have yet the features to show it, but Wasp has already generated for us the full front-end and back-end code of the app. Take a peek at ",(0,o.kt)("inlineCode",{parentName:"p"},"TodoApp/.wasp/out")," if you are curious and want to see what it looks like!"),(0,o.kt)("h2",{id:"taking-a-closer-look-at-the-code"},"Taking a closer look at the code"),(0,o.kt)("p",null,"Let's inspect the Wasp project we just created:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},".\n\u251c\u2500\u2500 .gitignore\n\u251c\u2500\u2500 main.wasp             # Your wasp code goes here.\n\u251c\u2500\u2500 src\n\u2502\xa0\xa0 \u251c\u2500\u2500 client            # Your client code (JS/CSS/HTML) goes here.\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 Main.css\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 MainPage.jsx\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 vite-env.d.ts\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u251c\u2500\u2500 tsconfig.json\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 waspLogo.png\n\u2502\xa0\xa0 \u251c\u2500\u2500 server            # Your server code (Node JS) goes here.\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 tsconfig.json\n\u2502\xa0\xa0 \u251c\u2500\u2500 shared            # Your shared (runtime independent) code goes here .\n\u2502\xa0\xa0 \u2502\xa0\xa0 \u2514\u2500\u2500 tsconfig.json\n\u2502\xa0\xa0 \u2514\u2500\u2500 .waspignore\n\u2514\u2500\u2500 .wasproot\n")),(0,o.kt)("p",null,"By ",(0,o.kt)("em",{parentName:"p"},"your code"),", we mean ",(0,o.kt)("em",{parentName:"p"},'"the code you write"')," (as opposed to the code generated by Wasp). Wasp expects you to separate all external code into three folders to make it clear which runtime executes what:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"src/server")," - Contains the code executed on the server (i.e., in Node)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"src/client")," - Contains the code executed on the client (i.e., JS in the browser)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"src/shared")," - Contains the code you want to use on both the client and the server (e.g., runtime-independent utility functions)")),(0,o.kt)("p",null,"You may be wondering what about the rest of the generated files (",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"vite-env.d.ts"),"? Your IDE needs them to improve your development\nexperience (i.e., autocompletion, intellisense, etc.), so it's best to leave\nthem alone (for now)."),(0,o.kt)("admonition",{title:"Typescript Support",type:"note"},(0,o.kt)("p",{parentName:"admonition"},"We've introduced Typescript support in Beta version 0.7.0, but you are free to\nuse JavaScript (js/jsx) or TypeScript (ts/tsx) as you see fit, on a file-by-file basis."),(0,o.kt)("p",{parentName:"admonition"},"For this tutorial, we will simply use vanilla Javascript and JSX syntax \ud83c\udf66"),(0,o.kt)("p",{parentName:"admonition"},"If you'd prefer to follow along using TypeScript:"),(0,o.kt)("ol",{parentName:"admonition"},(0,o.kt)("li",{parentName:"ol"},"Start by changing ",(0,o.kt)("inlineCode",{parentName:"li"},"MainPage.jsx")," to ",(0,o.kt)("inlineCode",{parentName:"li"},"MainPage.tsx")),(0,o.kt)("li",{parentName:"ol"},"For the rest of the tutorial, whenever you want to use TypeScript in a file,\njust make sure to use the appropriate extensions.")),(0,o.kt)("p",{parentName:"admonition"},"No extra configuration is needed!"),(0,o.kt)("p",{parentName:"admonition"},"To see how to get the most out of Wasp and TypeScript, take a look at ",(0,o.kt)("a",{parentName:"p",href:"/docs/typescript"},"our\nTypeScript doc"),". It contains a list of all TypeScript features\nWasp currently supports.")),(0,o.kt)("p",null,"Let's start with the ",(0,o.kt)("inlineCode",{parentName:"p"},"main.wasp")," file, which introduces 3 new concepts:\n",(0,o.kt)("a",{parentName:"p",href:"/docs/language/features#app"},"app"),",\n",(0,o.kt)("a",{parentName:"p",href:"/docs/language/features#page"},"page")," and\n",(0,o.kt)("a",{parentName:"p",href:"/docs/language/features#route"},"route"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-c",metastring:'title="main.wasp"',title:'"main.wasp"'},'app TodoApp { // Main declaration, defines a new web app.\n  wasp: {\n    version: "^0.7.0"\n  },\n  title: "Todo app" // Used as a browser tab title.\n}\n\nroute RootRoute { path: "/", to: MainPage } // Render page MainPage on url `/` (default url).\n\npage MainPage {\n  // We specify that ReactJS implementation of our page can be found in\n  // `src/client/MainPage.jsx` (the extension is not important) as a default\n  // export (uses standard js import syntax). Use \'@client\' to reference files\n  // inside the src/client folder.\n  component: import Main from "@client/MainPage"\n}\n')),(0,o.kt)("p",null,"Let's now take a look at that React component we referenced in the ",(0,o.kt)("inlineCode",{parentName:"p"},"page MainPage { ... }")," declaration in ",(0,o.kt)("inlineCode",{parentName:"p"},"main.wasp"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/client/MainPage.jsx"',title:'"src/client/MainPage.jsx"'},"import waspLogo from './waspLogo.png'\nimport './Main.css'\n\nconst MainPage = () => {\n  ...\n}\nexport default MainPage\n")),(0,o.kt)("p",null,"As we can see, this is simply a functional React component that uses the CSS and Wasp logo files sitting next to it in the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/client")," dir."),(0,o.kt)("p",null,"This is all the code we need!\nWasp quietly takes care of everything else necessary to define, build, and run a web app."),(0,o.kt)("admonition",{type:"tip"},(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("inlineCode",{parentName:"p"},"wasp start")," automatically picks up the changes you make and restarts the app, so keep it running.")),(0,o.kt)("h2",{id:"cleaning-up"},"Cleaning up"),(0,o.kt)("p",null,"Let's make our first changes!"),(0,o.kt)("p",null,"To prepare the clean slate for building the TodoApp, delete the files ",(0,o.kt)("inlineCode",{parentName:"p"},"Main.css"),"\nand ",(0,o.kt)("inlineCode",{parentName:"p"},"waspLogo.png")," from the ",(0,o.kt)("inlineCode",{parentName:"p"},"src/client/")," folder (",(0,o.kt)("inlineCode",{parentName:"p"},"src/shared")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"src/server"),"\nare already clean). Wasp needs the ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"vite-env.d.ts")," for\nIDE support, so it's important to keep them."),(0,o.kt)("p",null,"Now that ",(0,o.kt)("inlineCode",{parentName:"p"},"src/client")," contains only ",(0,o.kt)("inlineCode",{parentName:"p"},"tsconfig.json"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"vite-env.d.ts"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"MainPage.jsx")," let's start by making the ",(0,o.kt)("inlineCode",{parentName:"p"},"MainPage")," component much simpler:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx",metastring:'title="src/client/MainPage.jsx"',title:'"src/client/MainPage.jsx"'},"const MainPage = () => {\n  return <div> Hello world! </div>\n}\n\nexport default MainPage\n")),(0,o.kt)("p",null,"At this point, you should see something like this:"),(0,o.kt)("img",{alt:"Todo App - Hello World",src:(0,r.Z)("img/todo-app-hello-world.png"),style:{border:"1px solid black"}}),(0,o.kt)("p",null,"Ok, time to take the next step - implementing some real Todo app features!"))}u.isMDXComponent=!0}}]);