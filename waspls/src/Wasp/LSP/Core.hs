{-# LANGUAGE TemplateHaskell #-}

module Wasp.LSP.Core
  ( ServerM,
    ServerError (..),
    Severity (..),
    ServerState (..),
    ServerConfig,
    diagnostics,
    lift,
    catchE,
    throwE,
    gets,
    put,
    modify,
    Wasp.LSP.Core.logM,
  )
where

import Control.Lens (makeClassy)
import Control.Monad.Trans (MonadIO (liftIO), lift)
import Control.Monad.Trans.Except (ExceptT, catchE, throwE)
import Control.Monad.Trans.State.Strict (StateT)
import qualified Control.Monad.Trans.State.Strict as StateT
import Data.Aeson (FromJSON (parseJSON), Value (Object))
import Data.Aeson.Types (prependFailure, typeMismatch)
import Data.Default (Default (def))
import Data.Map (Map)
import qualified Data.Map as Map
import Data.Text (Text)
import qualified Data.Text as Text
import Language.LSP.Server (LspT)
import qualified Language.LSP.Types as LSP
import System.Log.Logger (Priority (DEBUG), logM)
import qualified Wasp.Analyzer.Type

type ServerM =
  ExceptT ServerError (StateT ServerState (LspT ServerConfig IO))

-- | The type for a language server error. These are separate from diagnostics
-- and should be reported when the server fails to process a request/notification
-- for some reason.
data ServerError = ServerError Severity Text

-- | Get the state, usually using a lens.
--
-- __Examples:__
--
-- > import Control.Lens ((^.))
-- > gets (^. diagnostics) :: ServerM [LSP.Diagnostic] -- Gets the list of diagnostics
gets :: (ServerState -> a) -> ServerM a
gets = lift . StateT.gets

-- | Replace the state with a new value. Recommended to use @modify@ with a lens
-- instead of this.
put :: ServerState -> ServerM ()
put = lift . StateT.put

-- | Modify the state, usually using a lens.
--
-- __Examples:__
--
-- > import Control.Lens ((.~))
-- > modify (diagnostics .~ []) -- Clears diagnostics in the state
modify :: (ServerState -> ServerState) -> ServerM ()
modify = lift . StateT.modify

-- | Log a string.
--
-- Behavior depends on the "--log" command line flag. If set to "[OUTPUT]",
-- logged messages will be displayed in the LSP client (e.g. for VSCode, in the
-- "Wasp Language Extension" output panel). Otherwise, it may be sent to a file
-- or not recorded at all.
logM :: String -> ServerM ()
logM = liftIO . System.Log.Logger.logM "haskell-lsp" DEBUG

-- | Error severity levels
data Severity
  = -- | Displayed to user as an error
    Error
  | -- | Displayed to user as a warning
    Warning
  | -- | Displayed to user
    Info
  | -- | Not displayed to the user
    Log

data ServerConfig = ServerConfig {}

instance Default ServerConfig where
  def = ServerConfig {}

instance FromJSON ServerConfig where
  parseJSON (Object _) = pure ServerConfig
  parseJSON invalid =
    prependFailure
      "parsing ServerConfig failed, "
      (typeMismatch "Object" invalid)

-- | LSP State preserved between handlers
--
-- Recommended to use the lenses for accessing/modifying the fields.
data ServerState = ServerState
  { -- | List of diagnostics generated by waspc after the last file change
    _diagnostics :: [LSP.Diagnostic]
  }

makeClassy 'ServerState

instance Default ServerState where
  def = ServerState {_diagnostics = []}
