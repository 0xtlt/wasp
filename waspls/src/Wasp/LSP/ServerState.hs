{-# LANGUAGE TemplateHaskell #-}

module Wasp.LSP.ServerState
  ( ServerState (..),
    sourceString,
    latestDiagnostics,
    cst,
  )
where

import Control.Lens (makeClassy)
import Data.Default (Default (def))
import qualified Language.LSP.Types as LSP
import Wasp.Backend.ConcreteSyntax (SyntaxNode)

-- | LSP State preserved between handlers.
--
-- The server assumes the project has only wasp file. This state will not
-- work correctly if there are multiple wasp files.
--
-- Recommended to use the lenses for accessing the fields.
data ServerState = ServerState
  { -- | Source text for wasp file.
    _sourceString :: String,
    -- | List of diagnostics generated by waspc after the last file change.
    _latestDiagnostics :: [LSP.Diagnostic],
    -- | Concrete syntax tree representing '_sourceString'.
    _cst :: Maybe [SyntaxNode]
  }

makeClassy 'ServerState

instance Default ServerState where
  def =
    ServerState
      { _sourceString = "",
        _latestDiagnostics = [],
        _cst = Nothing
      }
