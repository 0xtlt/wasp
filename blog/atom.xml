<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://wasp-lang.dev/blog</id>
    <title>Wasp Blog</title>
    <updated>2023-03-02T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://wasp-lang.dev/blog"/>
    <subtitle>Wasp Blog</subtitle>
    <icon>https://wasp-lang.dev/img/favicon.ico</icon>
    <entry>
        <title type="html"><![CDATA[Wasp Beta - February 2023]]></title>
        <id>/2023/03/02/wasp-beta-update-feb</id>
        <link href="https://wasp-lang.dev/blog/2023/03/02/wasp-beta-update-feb"/>
        <updated>2023-03-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<ImgWithCaption]]></summary>
        <content type="html"><![CDATA[<div><p align="center"></p><figure><img alt="Wasp Update Feb 23" src="/img/update-feb-23/banner.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p><em>Want to stay in the loop? → <a href="/#signup">Join our newsletter!</a></em></p><p>Hey Wasp acolytes (Waspolytes?) 🐝,</p><p>What's kickin'? We at Wasp spent the whole month thinking of the coolest features to add to our next release and we can't wait to share it with you!</p><div><p align="center"></p><figure><img alt="Tell me now" src="/img/update-feb-23/tell-me-now.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Ok ok, we're getting there, chill!</figcaption></figure><p></p></div><p>Let me cut to the chase and show you what's been cooking in Wasp pot for the past month:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="deploy-to-flyio-with-a-single-command-for-free-️">Deploy to Fly.io with a single command for free 🚀☁️<a class="hash-link" href="#deploy-to-flyio-with-a-single-command-for-free-️" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Deploy to fly.io with single command" src="/img/update-feb-23/deploy-fly.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>This is the only command you need to run to deploy your full app (client, server, and database) to Fly.io! They also offer a generous free tier so you can deploy your v1 without any second thoughts.</p><p>Check out our docs for more details: <a href="/docs/deploying#wasp-cli">Deploying your Wasp app to Fly.io</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-full-stack-typescript-support">✅ Full stack TypeScript support<a class="hash-link" href="#-full-stack-typescript-support" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Types everywhere" src="/img/update-feb-23/types-buzz.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>This is one of the features we are most excited about! Now, when you define an entity in your Wasp file, it immediately becomes accessible as a type both on a client and a server.</p><div><p align="center"></p><figure><img alt="Full stack TypeScript support" src="/img/update-feb-23/fullstack-ts.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>This feature beautifully showcases the power of the Wasp language approach and how much it can cut down on the boilerplate. And we're just getting started!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-we-set-a-date-for-the-next-launch---april-11th-">🗓 We set a date for the next launch - April 11th! 🚀<a class="hash-link" href="#-we-set-a-date-for-the-next-launch---april-11th-" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Launch party" src="/img/update-feb-23/ballmer-launch.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Mark your calendars, it's official! <strong>We will release the next version of Wasp on April 11th - in exactly 40 days</strong>! As the last time, we will follow a launch week format with a lot of memes, swag and fun prizes (Including Da Boi, of course).</p><p>That's why we introduced <a href="https://github.com/wasp-lang/wasp/discussions" target="_blank" rel="noopener noreferrer">Wasp GitHub Discussions</a>! It's a relatively new service by GitHub that allows distinguishing between specific, well-defined issues (bug reports, TODOs, ...) and discussion items (ideating about new features, figuring out best practices, etc) and allows for upvotes from the community.</p><p>Here's a quick list of the planned features:</p><ul><li>Using Vite instead of CRA under the hood - you'll be able to create new Wasp apps in a blink of an eye! 🚀</li><li>Custom API routes</li><li>Code scaffolding for the quicker start</li><li>Support for sending emails</li><li>Password reset via email</li><li>Improved Auth UI</li><li>Testing support</li></ul><p>And more! This is quite an ambitious plan but we are fully committed to getting it done. Any comments or ideas, <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">ping us on our Discord</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="️-we-had-our-community-call-2---meet-da-boi">☎️ We had our Community Call #2 - meet Da Boi<a class="hash-link" href="#️-we-had-our-community-call-2---meet-da-boi" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="We had a community call" src="/img/update-feb-23/da-boi-call.jpeg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We had so much fun on our last community call that we decided we have to do it again! As you can notice, our community-approved mascot Da Boi stole the show. The rest was pretty much just a filler and an excuse to have more fun with Da Boi :D.</p><p>On a serious note, it was great to catch up with the community prior to the next release - we discussed features and the roadmap and everybody shared what they're building and what they'd like to see next in Wasp.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-wasp-is-now-on-youtube">🎥 Wasp is now on YouTube!<a class="hash-link" href="#-wasp-is-now-on-youtube" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Wasp is on YouTube" src="/img/update-feb-23/yt-junior-devs.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We are still going strong with our YouTube! <strong>The <a href="https://youtu.be/eermNn9VhOA" target="_blank" rel="noopener noreferrer">latest video</a> started as a question on Reddit and it escalated quite quickly, with 200+ comments</strong> - we cover the responses we received + our expert commentary :D.</p><p>If you want to stay in the loop (and I guess you do since you're reading this :D), please <a href="https://www.youtube.com/@wasplang" target="_blank" rel="noopener noreferrer">subscribe to our channel</a> and help us reach the first 100 subscribers on YouTube!</p><div><p align="center"></p><figure><img alt="Subscribe to Wasp on YouTube" src="/img/update-dec-23/yt-cta.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">You know you want it!</figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="️-from-the-blog">⌨️ From the blog<a class="hash-link" href="#️-from-the-blog" title="Direct link to heading">​</a></h2><ul><li><p><a href="/blog/2023/02/02/no-best-framework">The Best Web App Framework Doesn't Exist</a> - or this one we invented our own "Hierarchy of Developer Needs". Scientifically proven 🤞.</p></li><li><p><a href="/blog/2023/02/21/junior-developer-misconceptions">The Most Common Misconceptions Amongst Junior Developers</a> - we asked and Reddit answered!</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-community-highlights">🕹 Community highlights<a class="hash-link" href="#-community-highlights" title="Direct link to heading">​</a></h2><ul><li><a href="https://phrasetutor.com/" target="_blank" rel="noopener noreferrer">PhraseTutor: Learn Italian in a week</a>! There is a new app built from scratch with Wasp, by Mihovil - one of our early community members who recently joined the team as an engineer! It's smooth both on the front end and back end and will teach you Italian before you can say (or eat) "quattro formaggi"!<div><p align="center"></p><figure><img alt="Phrase Tutor" src="/img/update-feb-23/phrase-tutor.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="developer-life-️">Developer life 💻⌨️💽<a class="hash-link" href="#developer-life-️" title="Direct link to heading">​</a></h2><p>Here is the cool stuff we came across this month</p><ul><li><p><a href="https://motioncanvas.io/" target="_blank" rel="noopener noreferrer">Motion Canvas - Visualize complex ideas programmatically</a> - a very cool 2d animation library and editor! I want to play around with this one so much and create a cool animation for Wasp (Da Boi anyone?) 😄</p><div><p align="center"></p><figure><img alt="Motion Canvas" src="/img/update-feb-23/motion-canvas.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div></li><li><p><a href="https://jdan.github.io/98.css/" target="_blank" rel="noopener noreferrer">98.css - A design system for building faithful recreations of old UIs</a> - I think we can all agree that web design is becoming increasingly minimalistic and getting rid of the flashy gradients and shadows. Be ahead of the curve - make your app look like Windows 98! You'll instantly feel 10 (20?) years younger and get an irresistible urge to play Minesweeper 🚩.</p><div><p align="center"></p><figure><img alt="98 css" src="/img/update-feb-23/98-css.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div></li><li><p><a href="https://www.cole-k.com/2023/02/21/tiny-games-hs/" target="_blank" rel="noopener noreferrer">Squeezing a Sokoban game into 10 lines of code</a> - this is why Haskell gets a bad rep and why we can't have nice things 😅 I'll urge you to look away, but I know you won't. Jokes aside, this was cool! The blog post is also really well written and it was super fun to read.</p><div><p align="center"></p><figure><img alt="Sokoban in 10 lines of code" src="/img/update-feb-23/sokoban-10loc.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wasp-github-star-growth---2317-️-woohoo">Wasp Github Star Growth - 2,317 ⭐️, woohoo!<a class="hash-link" href="#wasp-github-star-growth---2317-️-woohoo" title="Direct link to heading">​</a></h2><p>Huge thanks to all our <a href="https://github.com/wasp-lang/wasp/graphs/contributors" target="_blank" rel="noopener noreferrer">contributors</a> and <a href="https://github.com/wasp-lang/wasp/stargazers" target="_blank" rel="noopener noreferrer">stargazers</a> - you are amazing!</p><div><p align="center"></p><figure><img alt="Wasp has over 2,000 GitHub stars" src="/img/update-feb-23/gh-stars.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>And if you haven't yet, please <a href="https://wasp-lang.dev/docs" target="_blank" rel="noopener noreferrer">star us on Github</a>! Yes, we are shameless star beggars, but if you believe in the project and want to support it that's one of the best ways to do it (next to actually building something with Wasp - <a href="https://wasp-lang.dev/docs" target="_blank" rel="noopener noreferrer">go do that too</a>! :D)</p><p>That's a wrap! Thanks for reading and we can't wait for our next launch to get out and see how you like it. As always, <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">we're on Discord</a> and appreciate any comments, feedback, and ideas - that's how Wasp came to be!</p><p>As a parting gift, here are a few curated Da Boi memes created by our valued community members:</p><div><p align="center"></p><figure><img alt="Wasp's new mascot" src="/img/update-feb-23/wasp-discord-meme.jpeg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Buzzy buzz, you got that snazz 🐝 🐝,<br>
<!-- -->Matija, Martin and the Wasp team</p><p><em>Want to stay in the loop? → <a href="/#signup">Join our newsletter!</a></em></p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="startups" term="startups"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Most Common Misconceptions Amongst Junior Developers]]></title>
        <id>/2023/02/21/junior-developer-misconceptions</id>
        <link href="https://wasp-lang.dev/blog/2023/02/21/junior-developer-misconceptions"/>
        <updated>2023-02-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[High code quality only indirectly affects users. The main purpose is to keep development velocity high which benefits all stakeholders]]></summary>
        <content type="html"><![CDATA[<br><blockquote><p><em>High code quality only indirectly affects users. The main purpose is to keep development velocity high which benefits all stakeholders</em>
<!-- -->&nbsp;<!-- --> — <strong>zoechi</strong></p></blockquote><br><p>We recently asked the web dev community on <a href="https://www.reddit.com/r/webdev/comments/112im2m/senior_devs_what_are_the_most_damaging/" target="_blank" rel="noopener noreferrer">Reddit.com</a> what the most common misconceptions are amongst junior developers, and we got a ton of great responses -- more than 270 to be exact.</p><p>Because there was so much to discuss, Matija and I decided to summarize the replies and give our own opinions in a longer-form YouTube video, which you can watch below. </p><p><em>You can also continue reading further for a summary of the main concepts.</em></p><iframe width="100%" height="400" src="https://www.youtube.com/embed/eermNn9VhOA" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"></iframe><p></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-most-common-themes">The Most Common Themes<a class="hash-link" href="#the-most-common-themes" title="Direct link to heading">​</a></h2><p>Among the responses were lots of great, specific examples, but we noticed a lot of common themes within them:</p><ul><li><strong>Code Quality</strong></li><li><strong>Managing Time &amp; Expectations</strong></li><li><strong>Effective Communication &amp; Teamwork</strong></li></ul><p>These seemed to be the topics senior devs had the most to say about. And it makes sense -- these are the things that, when you get to the core of the issues, can make or break almost <em>any</em> career. </p><p>It was also interesting to see that the top replies were issues that encompassed all of these themes. For example, take the top-voted reply:</p><div><p align="center"></p><figure><img alt="Clean it up later" src="/img/junior-misconceptions/come-back-later.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">The most common misconception is that you're going to come back and clean that up later.</figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="first-quality--then-velocity">First Quality &amp; Then Velocity<a class="hash-link" href="#first-quality--then-velocity" title="Direct link to heading">​</a></h2><p>The top reply above touches on all three of the common themes we outlined, because within it is a message about quality -- about doing things correctly. And whenever you speak about quality, there is an inherent assumption that it takes longer, so we're also talking about time management. And, if you're a part of a team, you can't work effectively without good communication and teamwork.</p><p>Nevertheless, in the "quality" debate there were effectively two camps, with those who thought quality code was about: </p><ol><li>writing clean, readable code, that's easy to maintain </li><li>writing code that gets shipped on time and works.</li></ol><p>The balance between meeting deadlines, shipping features, and writing the best possible code is obviously a tricky one to get right. Some people had the opinion that business realities trump clean code patterns in the dash to meet deadlines and keep clients happy, while others thought that clean, quality code should be the priority, and that by making it a priority you can actually increase long-term velocity, even if short-term deadlines aren't met.</p><div><p align="center"></p><figure><img alt="You don't have to touch all the code you see" src="/img/junior-misconceptions/touch-all-code.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>This discussion can distract from Junior developers priorities though, which are to grow and improve as a developer, not lead the team to success. Therefore, it's probably best for Junior devs to focus on quality first, and then improve their speed of delivery second.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="stay-humble--manage-expectations">Stay Humble &amp; Manage Expectations<a class="hash-link" href="#stay-humble--manage-expectations" title="Direct link to heading">​</a></h2><p>As a Junior developer, it's not expected that you're going to get everything right the first time. There is an assumption that you will learn the best practices over time, and along the way you might produce inconsistent work, make mistakes, or even possibly break some things along the way.</p><p>But that's okay. </p><p>It's part of the process. It's expected. And it's important to remember that this is not a reflection of your value or worth as an engineer or individual. </p><p>In the replies, there were also many developers who recognized another developer's desire "to fix things later" as a way to brush off criticism towards their work. They generally viewed this as a bad habit to get into, as it is often one that plagues developers even as they gain more experience. "Code reviews are not personal", and being able to take criticism graciously is an important skill to develop. After all, seniors are there to guide you towards making better decisions based on their own experiences. And juniors are there to learn.</p><div><p align="center"></p><figure><img alt="The senior dev doesn't know everything" src="/img/junior-misconceptions/senior-knows-all.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>But how often should you seek a Senior's advice? Should you do what they said, or what some dude told you <em>is the only way to do x</em> on YouTube or in some blogpost ;) ? </p><p>Should you ask for help every time you get stuck, or should you compromise your sanity and struggle alone for days?</p><p>Well, it depends on who you ask. But most of the replies made it clear that:</p><ol><li>You should try it out yourself first.</li><li>Use the resources available to you (Google, Stack Overflow, GPT) to try and figure it out.</li><li>Ask for help once you considerably slow down on making any progress.</li><li>If you have a possible solution and it differs from the senior dev's suggestion, that doesn't mean it's wrong -- there can sometimes be many possible ways to achieve the same goal!</li></ol><div><p align="center"></p><figure><img alt="Bothering seniors with questions" src="/img/junior-misconceptions/bothering-questions.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="be-flexibile--open-to-change">Be Flexibile &amp; Open to Change<a class="hash-link" href="#be-flexibile--open-to-change" title="Direct link to heading">​</a></h2><p>Nothing changes faster than the world of technology. As a developer, you need to constantly be learning and adapting to new technologies and trends. If you don't like change, well then being a software developer probably isn't the right career for you.</p><div><p align="center"></p><figure><img alt="Everything takes longer than you think" src="/img/junior-misconceptions/everything-takes-longer.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>On top of things changing constantly, it's the kind of job that challenges your assumptions. What you think might be the best solution turns out to be incompatible with your team's desired goals or end product, and you're forced to use a "sub-optimal" solution instead. Why? Because it's the best way to
get the job done given your team's constraints. <em>"Sorry, pal, but we can't use your favorite framework on this one."</em></p><p>The developers who stay flexible and open-minded are often at an advantage here. They're the ones that are less dogmatic about a particular technology or approach, and are more willing to adapt to the situation at hand. They're typically the ones that progress faster than their peers, and they're the ones that get the job done well.</p><hr><p><em>Want to stay in the loop? → <a href="/#signup">Join our newsletter!</a></em></p>]]></content>
        <author>
            <name>Vinny</name>
            <uri>https://vincanger.github.io</uri>
        </author>
        <category label="Junior Developers" term="Junior Developers"/>
        <category label="Tech Career" term="Tech Career"/>
        <category label="Reddit" term="Reddit"/>
        <category label="WebDev" term="WebDev"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[From Idea to Paying Customers in 1 Week: An Interview with Amicus.work]]></title>
        <id>/2023/02/14/amicus-indiehacker-interview</id>
        <link href="https://wasp-lang.dev/blog/2023/02/14/amicus-indiehacker-interview"/>
        <updated>2023-02-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I guess it was less me having an idea and validating it, and more a valid idea coming to me and biting me in the ass, and me thinking ‘oh hey…’]]></summary>
        <content type="html"><![CDATA[<br><blockquote><p><em>I guess it was less me having an idea and validating it, and more a valid idea coming to me and biting me in the ass, and me thinking ‘oh hey…’</em>
<!-- -->&nbsp;<!-- --> — <strong>Erlis Kllogjri</strong></p></blockquote><br><p>Erlis Kllogjri, a computer engineer and the creator of <a href="https://amicus.work" target="_blank" rel="noopener noreferrer">Amicus.work</a>, went from idea to paying customers in just one week 🤯! In this interview, he tells how sometimes the best ideas come looking for you, and how moving quickly can help you stay inspired, motivated, and pull in your first satisfied customers.</p><br><div><p align="center"></p><figure><img style="width:500px" alt="Amicus Homepage" src="/img/amicus-usecase/amicus-homepage.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><hr><h3 class="anchor anchorWithStickyNavbar_LWe7" id="before-we-begin-with-the-unlikely-origin-story-of-amicuswork-can-you-tell-us-a-bit-about-what-it-is">Before we begin with the unlikely origin story of Amicus.work, can you tell us a bit about what it is?<a class="hash-link" href="#before-we-begin-with-the-unlikely-origin-story-of-amicuswork-can-you-tell-us-a-bit-about-what-it-is" title="Direct link to heading">​</a></h3><p><a href="https://amicus.work" target="_blank" rel="noopener noreferrer">Amicus</a> is a SaaS tool for legal teams that helps keep you organized and on top of your legal needs. Think of it like "Asana for lawyers", but with features and workflows tailored to the domain of law. </p><p>It allows attorneys and their clients to easily track the progress of the legal case they are dealing with, and collaborate with others involved in the case, all in one central location. For example, deadline reminders help with not missing key dates and workflow visualization allows lawyer and client to see where the process is stuck, and get it unstuck.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="your-time-from-initial-idea-to-working-mvp-seemed-fast-how-long-was-it-and-how-did-you-achieve-it-so-quickly">Your time from initial idea to working MVP seemed fast. How long was it and how did you achieve it so quickly?<a class="hash-link" href="#your-time-from-initial-idea-to-working-mvp-seemed-fast-how-long-was-it-and-how-did-you-achieve-it-so-quickly" title="Direct link to heading">​</a></h3><p>From the initial discussions to the launch of the initial prototype was probably a week or so. This is even quicker than it sounds because I was working a full time job at the time. The speed <!-- -->[of execution]<!-- --> was fully enabled by <a href="https://wasp-lang.dev" target="_blank" rel="noopener noreferrer">Wasp</a>, a full-stack web app framework.</p><p>I was looking at other solutions, but none of them were full-stack and sounded like a lot of work just to stitch everything together and get started. I just wanted to get the job done and didn’t care about picking the stack specifics myself. <a href="https://wasp-lang.dev" target="_blank" rel="noopener noreferrer">Wasp</a> was really helpful as it set me up with the best practices and I had everything running in just a few minutes!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="how-were-you-able-to-get-these-first-customers-so-quickly">How were you able to get these first customers so quickly?<a class="hash-link" href="#how-were-you-able-to-get-these-first-customers-so-quickly" title="Direct link to heading">​</a></h3><p>The first user is a little bit of a cheat because I know them — my brother, who is a lawyer. But having read about other entrepreneurs, this is not that uncommon. Sometimes the first users we know are ourselves, sometimes they’re family or friends, and sometimes it’s someone you sought out. But I think it was important to have the client before the idea, because that way you have the problem before the solution.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-advice-would-you-give-to-other-solopreneurs-regarding-the-validation-process">What advice would you give to other Solopreneurs regarding the validation process?<a class="hash-link" href="#what-advice-would-you-give-to-other-solopreneurs-regarding-the-validation-process" title="Direct link to heading">​</a></h3><p>With regard to process, I spent a lot of time having discussions with my first user - my brother. The better you know the first user, the more careful you need to be I think. They’re going to give you slack and support your ideas. You don’t really want that, so you have to dive deeper into each problem/solution - like asking 5 why’s, so you can be more objective. </p><p>Once more users came on, I began sending out surveys about the key things I wanted to know. I also started setting up SQL queries and adding logs to answer questions about what kind of user was using what features the most etc. Being a solopreneur means you have to be even more careful about what you spend your time building.</p><p>MRR is low at the moment, around ~$90, and the first goal is to get to an MRR around ~$2,000. At that point I would be able to throw more time and resources at the application, increase the utility, and kick off a virtuous cycle of more revenue and utility.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="thats-great-so-rather-than-trying-to-find-a-clever-idea-the-idea-found-you">That’s great. So rather than trying to find a clever idea, the idea found you.<a class="hash-link" href="#thats-great-so-rather-than-trying-to-find-a-clever-idea-the-idea-found-you" title="Direct link to heading">​</a></h3><p>It’s funny because I have all of these harebrained ideas that I’m always kicking around, thinking about how to validate them: MVPs, setting up a landing page that gets emails or deposits, etc. </p><p>Meanwhile my brother was telling me about this pain of managing matters that no tool really helped with. Clients want to know where the process is, how many steps are left, how they need to be reminded of important dates like contract deadlines, etc. So I agreed to build something to see if it would help. <a href="https://wasp-lang.dev" target="_blank" rel="noopener noreferrer">Wasp</a> was instrumental here because if these steps had taken too long I would have probably lost interest and gotten distracted by something else. It allowed me to abstract all the details of a full stack app and focus on the product itself.</p><p>I built the prototype and it was TERRIBLE, it hurts to think back on that first version. But it was being used, and terrible though it was, it was still providing utility. And that was the point where it clicked the idea would work - if my first crude attempt was useful, and it would only get better with each iteration, there is a space here to provide so much value that some of it can be captured.</p><p>I guess it was less me having an idea and validating it, and more a valid idea coming to me and biting me in the ass, and me thinking ‘oh hey…’.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="whats-been-the-biggest-lessons-learned-as-a-result-from-building-amicus-if-you-could-do-it-over-what-would-you-do-the-same-and-what-would-you-do-differently">What’s been the biggest lessons learned as a result from building Amicus? If you could do it over, what would you do the same and what would you do differently?<a class="hash-link" href="#whats-been-the-biggest-lessons-learned-as-a-result-from-building-amicus-if-you-could-do-it-over-what-would-you-do-the-same-and-what-would-you-do-differently" title="Direct link to heading">​</a></h3><p>I think one of the things I would do differently is spend a little more time at the beginning getting a full grasp on the use cases. I tried doing this with interviews with the first client. However once what was intended was built, I come across all of these questions that weren’t initially obvious. I have seen PMs in the past create paper mockups (or using <a href="https://www.figma.com" target="_blank" rel="noopener noreferrer">Figma</a> if there is time) and walking a person through what they would do - then all of a sudden these assumptions you both had bubble up. <!-- -->[I]<!-- --> would probably do something like that if possible.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-were-your-biggest-concerns-before-getting-started-building-amicus-what-problems-did-you-know-you-wanted-to-avoid-and-how-did-you-successfully-achieve-those-goals">What were your biggest concerns before getting started building Amicus? What problems did you know you wanted to avoid and how did you successfully achieve those goals?<a class="hash-link" href="#what-were-your-biggest-concerns-before-getting-started-building-amicus-what-problems-did-you-know-you-wanted-to-avoid-and-how-did-you-successfully-achieve-those-goals" title="Direct link to heading">​</a></h3><p>[My]<!-- --> biggest concern when getting started building <a href="https://amicus.work" target="_blank" rel="noopener noreferrer">Amicus</a> was honestly that it would go to the unfinished project graveyard. Once again, <a href="https://wasp-lang.dev" target="_blank" rel="noopener noreferrer">Wasp</a> was key to resolving this. Being able to remove most of the redundancy involved in making a full stack app really helped me. It allowed me to focus on the interesting problems.</p><p>One of the things I have been trying to be careful to avoid is building things that aren’t needed or solving problems that don’t exist. It is very easy to get into the trap of thinking ‘oh this would be cool’ or ‘oh this extra thing might need to be build incase…’. I have been trying to be rigorous about validating features before building them (by talking to users or through the surveys), and unless theres a good reason to believe something is a problem I don’t spend my time fixing it. This is very hard, but it has allowed me to focus.</p><br><div><p align="center"></p><figure><img style="width:500px" alt="Wasp Logo" src="/img/wasp-logo-wide.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="have-you-done-any-form-of-advertising-press-releases-how-are-you-spreading-the-word-about-amicus-at-the-moment">Have you done any form of advertising? press releases? How are you spreading the word about Amicus at the moment?<a class="hash-link" href="#have-you-done-any-form-of-advertising-press-releases-how-are-you-spreading-the-word-about-amicus-at-the-moment" title="Direct link to heading">​</a></h3><p>No advertising yet and no press releases either. Right now spreading of the word is mostly through word of mouth. Advertising can be a money pit, especially when you don’t know what you’re doing (and I probably don’t know what I am doing) so I want to first make sure I am at the point where users feel passionate enough about Amicus to where they tell others about it. Once I get there, advertising can have a bigger return even with my fumbling. </p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-made-you-decide-to-go-it-alone-as-a-solopreneur-were-you-confident-that-youd-be-able-to-tackle-the-challenge-alone-and-if-so-why">What made you decide to go it alone as a “Solopreneur”? Were you confident that you’d be able to tackle the challenge alone, and if so why?<a class="hash-link" href="#what-made-you-decide-to-go-it-alone-as-a-solopreneur-were-you-confident-that-youd-be-able-to-tackle-the-challenge-alone-and-if-so-why" title="Direct link to heading">​</a></h3><p>This wasn’t so much a decision as something that came about one decision at a time. What initially started as just a handy app for my brother to use, naturally grew in scope and utility, and all of a sudden there was a business and I effectively became a solopreneur. Although I’ve always wanted to be an entrepreneur, I didn’t realize I had become a solopreneur until after the fact.</p><hr><p><em>Want to stay in the loop? → <a href="/#signup">Join our newsletter!</a></em></p>]]></content>
        <author>
            <name>Vinny</name>
            <uri>https://vincanger.github.io</uri>
        </author>
        <category label="SaaS" term="SaaS"/>
        <category label="IndieHacker" term="IndieHacker"/>
        <category label="Solopreneur" term="Solopreneur"/>
        <category label="Interview" term="Interview"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[The Best Web App Framework Doesn't Exist]]></title>
        <id>/2023/02/02/no-best-framework</id>
        <link href="https://wasp-lang.dev/blog/2023/02/02/no-best-framework"/>
        <updated>2023-02-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[The web app framework you choose doesn’t really matter. Well, it matters, just not as much as others would like you to believe.]]></summary>
        <content type="html"><![CDATA[<br><p>The web app framework you choose doesn’t <em>really</em> matter. Well, it matters, just not as much as others would like you to believe. </p><p>The fact that so many libraries and frameworks exist in 2023, and that <strong>the best one</strong> is <a href="https://joshcollinsworth.com/blog/self-fulfilling-prophecy-of-react" target="_blank" rel="noopener noreferrer">still hotly debated</a>, proves my point. It’s the web developers biggest “first-world problem” — a problem that’s not really a problem. On Maslow’s <em>Hierarchy of Developer Needs,</em> it’s definitely near the top (ok, I made that up 😅)</p><br><div><p align="center"></p><figure><img alt="hierarchy of developer needs" src="/img/best-framework/hierarchy-of-dev-needs.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><br><p>For example, according the the <a href="https://2022.stateofjs.com/en-US/libraries/front-end-frameworks/" target="_blank" rel="noopener noreferrer">StateOfJS</a> survey, there were 5 Front-end Frameworks with good retention in 2018, now there are 11 in 2022. That’s a 120% increase in a matter of 4 years, and that’s not even taking into account the hot meta-frameworks like NextJS, SvelteKit, or Astro!</p><br><div><p align="center"></p><figure><img alt="State of JS 2022" src="/img/best-framework/state-of-js.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">A growing family of frameworks...</figcaption></figure><p></p></div><br><p>These are great developments for the space, overall. They improve things like developer speed, bundle size, performance, and developer experience. But they also make it damn hard for developers and teams to make a decision when trying to decide which to use for their next project. It’s even worse for beginners, which is probably why they just go for React — which, of course, is perfectly fine. </p><p>And I think all of this is OK, because in the end it doesn’t really matter which one you choose. When it really comes down to it, all that matters is that the framework you chose:</p><ul><li>Is stable</li><li>Allows you to move quickly</li><li>Allows you to reach your end goal</li></ul><p>Why? Because most of them are built around the same concepts, have proven themselves capable of performing at scale, and have communities you can engage with and learn from. </p><p>React might be the most prominent in job descriptions, but if you’re looking for a new role and only have experience in Vue or Angular, I can’t imagine it would take you more than a week to build a side-project with React to display your ability to prospective employers.</p><p>On the flip side, if you’re a beginner or Junior dev, once you have the basics of HTML, CSS, and JS under your belt, it doesn’t really matter what framework you learn. I personally started learning backend development with Node/ExpressJS, but landed my first role as a Frontend developer with Angular. In my second role I used NextJS, and now I work with <a href="https://wasp-lang.dev" target="_blank" rel="noopener noreferrer">Wasp</a> (a full-stack framework built on top of React and ExpressJS). <a href="https://www.youtube.com/watch?v=gl5HvBpUbt8" target="_blank" rel="noopener noreferrer">Developers never stop learning</a>, so it’s kind of a non-argument to deride any specific framework — unless it really sucks, but then no one will continue to use it anyway.</p><br><div><p align="center"></p><figure><img alt="Use what works" src="/img/best-framework/midwitwasp.jpeg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><br><p>So, in the end, use what works. Because in 99.99% of cases, your choice of web framework will not decide the fate of your project.</p><p>If you’ve done a bit of research and found a framework that suits your needs and you enjoy using it — use it. There’s really no good reason not to.</p><br><hr><p><em>Want to stay in the loop? → <a href="/#signup">Join our newsletter!</a></em></p>]]></content>
        <author>
            <name>Vinny</name>
            <uri>https://vincanger.github.io</uri>
        </author>
        <category label="framework" term="framework"/>
        <category label="StateOfJS" term="StateOfJS"/>
        <category label="react" term="react"/>
        <category label="webdev" term="webdev"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Convincing developers to try a new web framework - the effects of launching beta]]></title>
        <id>/2023/01/31/wasp-beta-launch-review</id>
        <link href="https://wasp-lang.dev/blog/2023/01/31/wasp-beta-launch-review"/>
        <updated>2023-01-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<ImgWithCaption]]></summary>
        <content type="html"><![CDATA[<div><p align="center"></p><figure><img alt="Alpha feedback" src="/img/beta-launch-review/how-it-started.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We are developing an OSS web framework in a form of a config language (DSL) that works with React &amp; Node.js. Getting developers to use a new tool (especially a web framework) is <a href="/blog/2022/09/29/journey-to-1000-gh-stars">a pretty hard thing to do</a>. We wished there were more stories of how today's mainstream tools got adopted that we could learn from, so that motivated us to document our own.</p><p><em>Want to stay in the loop? → <a href="/#signup">Join our newsletter!</a></em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tldr">TL;DR<a class="hash-link" href="#tldr" title="Direct link to heading">​</a></h2><ul><li><a href="https://news.ycombinator.com/item?id=33910997" target="_blank" rel="noopener noreferrer">HackerNews launch</a> post brought the most traffic, by far</li><li>Product Hunt launch went worse than expected, bots took over</li><li>Our goal was to reach GitHub Trending but we failed</li><li>Less overall traffic than for the Alpha launch, but much higher quality of feedback + a shift in public perception</li><li>Having a public launch date made us 3x more productive</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-the-results-stats">📊 The results: stats<a class="hash-link" href="#-the-results-stats" title="Direct link to heading">​</a></h2><p>We <a href="/blog/2022/11/29/wasp-beta">launched Beta</a> on Nov 27, 2022 in a launch week format, recently popularized by <a href="https://supabase.com/blog/supabase-how-we-launch" target="_blank" rel="noopener noreferrer">Supabase</a>. During the first week we launched on Product Hunt, and after the weekend we posted on HackerNews. Here's what the numbers were on the last day of the launch:</p><ul><li>190 GitHub stars added to the repo</li><li>108 new projects started</li><li>83 new users (installed Wasp locally and ran it)</li></ul><div><p align="center"></p><figure><img alt="Web visitors during beta launch week" src="/img/beta-launch-review/launch-week-visitors.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>HN launch caused almost 2x spike in traffic and usage. Also, although our launch week already ended by the start of December, we actually had the most users ever throughout December:</p><div><p align="center"></p><figure><img alt="WAU displayed monthly" src="/img/beta-launch-review/wau-monthly.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Looking back, this wasn't at all our biggest event in terms of traffic, but it was in terms of usage:</p><div><p align="center"></p><figure><img alt="All time stats" src="/img/beta-launch-review/all-time-stats.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>One of the main effects of the launch (together with a <a href="https://news.ycombinator.com/item?id=32098144" target="_blank" rel="noopener noreferrer">few</a> <a href="https://news.ycombinator.com/item?id=32566123" target="_blank" rel="noopener noreferrer">recent</a> successful HN posts, and the <a href="/blog/2022/11/16/alpha-testing-program-post-mortem">Alpha Testing Program</a> we ran in Jul '22) is that we managed to move the baseline WAU from ~10 to ~20. Another effect, felt more subjectively, is the change in the community perception.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="community-perception-shift">Community perception shift<a class="hash-link" href="#community-perception-shift" title="Direct link to heading">​</a></h2><p>As mentioned above, although our Alpha launch had higher absolute numbers (website traffic, HN upvotes etc), <strong>it felt that Beta launch caused the biggest perception shift in the community so far</strong>.</p><p>Before were mostly getting superficial comments like <em>“this looks cool, I’ll give it a try once”</em>, or <em>“why DSL approach and not the other one”</em>, and this time we could notice that portion of people already knew Wasp from before (some even used it), and had more specific questions, even proposing next features that we planned but haven’t published yet.</p><div><p align="center"></p><figure><img alt="Beta feedback" src="/img/beta-launch-review/beta-feedback.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Although the core message (DSL for developing full-stack web apps with React &amp; Node.js) hasn’t changed, there was significantly less pushback to the concept than before. I guess it comes down to the time elapsed and the product being more polished and validated from the outside - Beta, <a href="/#showcases">published use-cases</a>, <a href="/#testimonials">testimonials</a>, …</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="before-the-launch">Before the launch<a class="hash-link" href="#before-the-launch" title="Direct link to heading">​</a></h2><p>This was our initial plan:</p><div><p align="center"></p><figure><img alt="Launch timeline" src="/img/beta-launch-review/launch-timeline.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>For 20 days before the launch we were posting daily countdown banners on Twitter + a few polls (e.g. what's your favourite CSS framework) to engage the audience.</p><div><p align="center"></p><figure><img alt="Examples of pre-launch tweets" src="/img/beta-launch-review/prelaunch-tweets.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p><a href="https://twitter.com/WaspLang" target="_blank" rel="noopener noreferrer">Our Twitter game</a> is still super young (~500 followers) so it didn't have a big effect but it helped to get the team excited and a few people also noticed it and commented/voted.</p><p>Due to the lack of time we ended up doing user testing in-house. That's still something I'd like to improve and make a habit of in the future.</p><p>A few other things we did prior to the launch:</p><ul><li><strong>Redesigned our project page</strong> - gave it a new, sleeker look</li><li><strong>Published <a href="/#showcases">use cases with our most successful users</a></strong> and featured them on the project page</li><li><strong>Activated our Discord and <a href="https://us4.campaign-archive.com/?u=8139c7de74df98aa17054b235&amp;id=1195fce664" target="_blank" rel="noopener noreferrer">email list</a></strong></li><li><strong>Organized a launch event</strong> (call on Discord) to celebrate the launch - it went better than expected, a decent amount of people showed up and we had some good discussions!</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-launch">The launch<a class="hash-link" href="#the-launch" title="Direct link to heading">​</a></h2><p>As mentioned, we went with a launch week format - we liked the idea of having a whole week filled with content rather than cramming everything in a single day. We highlighted a new feature every day + launched a hackathon on the last day of the week, to keep the momentum. You can see the full schedule <a href="/blog/2022/11/26/wasp-beta-launch-week">here</a>.</p><div><p align="center"></p><figure><img alt="Launch week schedule" src="/img/beta-launch-review/launch-schedule.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We also shared our launch news at different places, most successful being <a href="https://www.producthunt.com/products/wasp-lang-alpha#wasp-lang-beta" target="_blank" rel="noopener noreferrer">Product Hunt</a>, <a href="https://news.ycombinator.com/item?id=33910997" target="_blank" rel="noopener noreferrer">HackerNews</a> and <a href="https://www.reddit.com/r/javascript/comments/z7xo9t/wasp_dsl_framework_for_building_fullstack_js/" target="_blank" rel="noopener noreferrer">Reddit</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="product-hunt---failed-but-ok">Product Hunt - failed, but ok<a class="hash-link" href="#product-hunt---failed-but-ok" title="Direct link to heading">​</a></h2><p>The mistake we did was launching on the Thanksgiving weekend - there was little (real) traffic + the mods were away so the bots took over!</p><p>We ended up as <a href="https://www.producthunt.com/products/wasp-lang-alpha#wasp-lang-beta" target="_blank" rel="noopener noreferrer">#5 product of the day</a> with ~250 upvotes, which wasn’t so bad because in the end we got featured in their daily newsletter with 1M+ subscribers.</p><p>The bad part was that mods were away and <strong>pretty much all other products in front of us were fake or obviously bot powered!</strong> It felt like there was no real interaction on any of these products, just endless “congrats on the launch” comments from the newly created accounts with obviously fake names. Two products were also clearly violating PH rules (one was the same product that launched a week or two ago, but just changed the name).</p><p>The most disappointing part for us (and especially for the team) was that it felt like there aren’t any real people on PH, just bots.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-post-launch-wasp-hackathon-1---betathon">🕹 Post-launch: Wasp Hackathon #1 - Betathon!<a class="hash-link" href="#-post-launch-wasp-hackathon-1---betathon" title="Direct link to heading">​</a></h2><p>Since we introduced all the new features during the launch week, we thought a good way to keep the community engaged and give them a reason to try Wasp Beta out would be to throw a hackathon! It was the first time we did so we weren't sure how it'd go, but it went better than expected!</p><div><p align="center"></p><figure><img alt="Tweet about Betathon - our #1 hackathon!" src="/img/beta-launch-review/hackathon-tweet.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>In the end, it was definitely worth it (<a href="https://wasp-lang.dev/blog/2023/01/11/betathon-review" target="_blank" rel="noopener noreferrer">see review and submissions here</a>). It was quite lightweight to organize (we even made a <a href="https://betathon.wasp-lang.dev/" target="_blank" rel="noopener noreferrer">custom web app with Wasp for the hackathon</a> which you can also <a href="https://github.com/vincanger/wasp-betathon" target="_blank" rel="noopener noreferrer">use for your hackathon</a>) and we got some really nice submissions and community shout-outs.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="announcing-a-launch-date-publicly-is-great-for-productivity">Announcing a launch date publicly is great for productivity<a class="hash-link" href="#announcing-a-launch-date-publicly-is-great-for-productivity" title="Direct link to heading">​</a></h2><p>Another big benefit we noticed from this type of launching is how much more productive it made the whole team. Although the launch date was totally self-imposed (and we did move it a couple of times internally), it was still an amazing forcing function once we announced it publicly. It focused the efforts of the whole team and it also felt great.</p><p><strong>We decided to keep going with the quarterly release schedule in this format - 3 months is just enough time to make a dent on the product side, but not long enough to get stuck or caught up with endless refactoring</strong>. It also forces us to plan for the features that will have most impact on the developers using Wasp and make their lives easier, because we all want to have something cool and useful to present during the launch week.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>I hope you found this post helpful or at least interesting! Creating a new web framework might be one of the most notorious things to do as a developer, but that shouldn't be a reason not to do it - where are the new frameworks going to come from otherwise?</p><p><em>Want to stay in the loop? → <a href="/#signup">Join our newsletter!</a></em></p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="startups" term="startups"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wasp Beta December 2022]]></title>
        <id>/2023/01/18/wasp-beta-update-dec</id>
        <link href="https://wasp-lang.dev/blog/2023/01/18/wasp-beta-update-dec"/>
        <updated>2023-01-18T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<ImgWithCaption]]></summary>
        <content type="html"><![CDATA[<div><p align="center"></p><figure><img alt="Wasp Update Dec 22" src="/img/update-dec-23/banner.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p><em>Want to stay in the loop? → <a href="/#signup">Join our newsletter!</a></em></p><p>Hey Wasp tribe 🐝 ,</p><p>Happy New Year! I know you're probably already sick of hearing it, but hopefully we're the last ones to congratulate you 🔫 👈 (that's pistol fingers emoji in case you were wondering).</p><div><p align="center"></p><figure><img alt="Pistol fingers" src="/img/update-dec-23/pistol-fingers.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">This is how I imagine myself telling the joke above.</figcaption></figure><p></p></div><p>Now that the <a href="/blog/2022/11/29/wasp-beta">Beta Launch</a> craze is over (thanks for your support, it was amazing - we saw more devs hacking with Wasp than ever!), we're back to our usual programming. Let's dive in and see what's new and what's in the plans for this year:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="--we-hosted-our-first-hackathon---it-was-a-blast--">🎮 🐝 We hosted our first hackathon - it was a blast! 🎉 🎉<a class="hash-link" href="#--we-hosted-our-first-hackathon---it-was-a-blast--" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Tweet about Wasp" src="/img/update-dec-23/tskaggs-tweet.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We launched our first Wasp hackathon ever on the last day of Beta Launch (thus we named it Betathon) and got some <a href="/blog/2023/01/11/betathon-review">really cool submissions</a>! Winners received hosting credits kindly offered by our partners at <a href="https://railway.app/" target="_blank" rel="noopener noreferrer">Railway</a> and a special 1st place award was a wasp-themed mechanical keyboard (we're still assembling it but we'll post photos on our <a href="https://twitter.com/WaspLang" target="_blank" rel="noopener noreferrer">twitter</a> :))!</p><blockquote><p>“<strong><em>This was the best app dev experience I ever had!</em></strong> <em>…Walking through the docs, I immediately figured out how to use Wasp and was able to make a prototype in a couple of days.”</em> - Chris</p></blockquote><p>To check out the winning projects and see where devs found Wasp most helpful, take a look here: <a href="/blog/2023/01/11/betathon-review">Wasp Betathon review post</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-new-auth-method---github-">🔑 New auth method - GitHub! 🐙<a class="hash-link" href="#-new-auth-method---github-" title="Direct link to heading">​</a></h2><p>Next to <a href="/docs/language/features#username-and-password">username/password</a> and <a href="/docs/language/features#google">Google</a>, <strong>Wasp now also supports <a href="/docs/language/features#github">GitHub</a></strong> as an authentication method!</p><div><p align="center"></p><figure><img alt="Support for GitHub auth in Wasp" src="/img/update-dec-23/github-auth.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Putting the code above in your <code>main.wasp</code> file and specifying your GitHub env variables is all you need to do! Wasp will provide you with a full-stack GitHub authentication along with UI helpers (GitHub sign-up button) you can immediately use in your React component.</p><p>For more details, check the docs <a href="/docs/language/features#github">here</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-lets-discuss---on-github-discussions">💬 Let's discuss - on GitHub Discussions!<a class="hash-link" href="#-lets-discuss---on-github-discussions" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Wasp is now on GitHub Discussions" src="/img/update-dec-23/gh-discussions.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>So far we've been capturing your feedback across <a href="https://github.com/wasp-lang/wasp/issues" target="_blank" rel="noopener noreferrer">GitHub issues</a> and <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">Wasp Discord server</a>, but with the current volume it has become a bit unwieldy and hard to keep track of.</p><p>That's why we introduced <a href="https://github.com/wasp-lang/wasp/discussions" target="_blank" rel="noopener noreferrer">Wasp GitHub Discussions</a>! It's a relatively new service by GitHub that allows distinguishing between specific, well-defined issues (bug reports, TODOs, ...) and discussion items (ideating about new features, figuring out best practices, etc) and allows for upvotes from the community.</p><p>If there is a feature you'd like to see in Wasp (e.g. support for Vue) you can create a new post for it or upvote it if it is already there!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-next-launch-is-coming---a-super-early-sneak-peek-">🚀 Next launch is coming - a super early sneak peek 👀<a class="hash-link" href="#-next-launch-is-coming---a-super-early-sneak-peek-" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Next launch sneak peek" src="/img/update-dec-23/next-launch.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We know we just wrapped up Beta release, but we are busy wasps and our heads are already in the next one! We made a preliminary draft of the features that are going to be included - <strong>the "theme" of this release is going to be about making Wasp super easy and friendly for you to use</strong>.</p><p>We'll further polish our auth &amp; deployment experience, along with ensuring TypeScript experience is fully typed and as helpful as possible. Stay tuned for the official roadmap and date of the next launch!</p><p>Want to make sure your fav feature makes it into the next release? <a href="https://github.com/wasp-lang/wasp/discussions" target="_blank" rel="noopener noreferrer">Let us know on Discussions</a>!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-wasp-is-now-on-youtube">🎥 Wasp is now on YouTube!<a class="hash-link" href="#-wasp-is-now-on-youtube" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Wasp is on YouTube" src="/img/update-dec-23/wasp-youtube.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Thanks to Vince, who recently joined as Devrel (intro blog post coming soon!), Wasp now finally has <a href="https://www.youtube.com/@wasplang/videos" target="_blank" rel="noopener noreferrer">its YouTube channel</a>!</p><p>We're just starting out but already made some splashes - our <a href="https://youtu.be/HjUpqfEonow" target="_blank" rel="noopener noreferrer">"Build a full-stack app in 9 mins with Wasp and ChatGPT"</a> got over 2k views (not bad for a channel with 50 subscribers, right?).</p><p>We also made our first YT short, featuring <a href="https://youtube.com/shorts/-daNTYiUC64?feature=share" target="_blank" rel="noopener noreferrer">how to add auth to your app in 60 seconds</a> with Wasp.</p><p>If you want to stay in the loop (and I guess you do since you're reading this :D), please <a href="https://www.youtube.com/@wasplang" target="_blank" rel="noopener noreferrer">subscribe to our channel</a> and help us reach the first 100 subscribers on YouTube!</p><div><p align="center"></p><figure><img alt="Subscribe to Wasp on YouTube" src="/img/update-dec-23/yt-cta.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">You know you want it!</figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="-community-highlights">🕹 Community highlights<a class="hash-link" href="#-community-highlights" title="Direct link to heading">​</a></h2><ul><li><p><a href="https://dev.to/emmanuelthecoder/making-something-waspy-a-review-of-wasp-571j" target="_blank" rel="noopener noreferrer">Making Something Waspy: A Review Of Wasp</a> - an overview of Wasp by Emmanuel, one of our contributors and hackathon winners!</p></li><li><p><a href="https://podcast.bitreach.io/episodes/matija-sosic" target="_blank" rel="noopener noreferrer">The first 2,000 GitHub stars of Wasp</a> (podcast 🔊) - I was a guest on the Scaling DevTools podcast by <a href="https://twitter.com/jacksbridger" target="_blank" rel="noopener noreferrer">Jack Bridger</a> - we chatted about how Wasp started, what were the hardest parts and what are the plans for the future!</p></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wasp-github-star-growth---over-2000-️-woohoo">Wasp Github Star Growth - over 2,000 ⭐️, woohoo!<a class="hash-link" href="#wasp-github-star-growth---over-2000-️-woohoo" title="Direct link to heading">​</a></h2><p>Beta was great and it brought us to <a href="https://github.com/wasp-lang/wasp" target="_blank" rel="noopener noreferrer">2,234 stars</a>! We never imagined Wasp could become so popular when we were just getting started. Huge thanks to all our <a href="https://github.com/wasp-lang/wasp/graphs/contributors" target="_blank" rel="noopener noreferrer">contributors</a> and <a href="https://github.com/wasp-lang/wasp/stargazers" target="_blank" rel="noopener noreferrer">stargazers</a> - you are amazing!</p><div><p align="center"></p><figure><img alt="Wasp has over 2,000 GitHub stars" src="/img/update-dec-23/gh-stars.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>And if you haven't yet, please <a href="https://wasp-lang.dev/docs" target="_blank" rel="noopener noreferrer">star us on Github</a>! Yes, we are shameless star beggars, but if you believe in the project and want to support it that's one of the best ways to do it (next to actually building something with Wasp - <a href="https://wasp-lang.dev/docs" target="_blank" rel="noopener noreferrer">go do that too</a>! :D)</p><p>And before you leave, here's a photo of a squishy wasp (ok, it's a bumblebee, but you get it) proudly rocking Wasp swag 🤘 🐝 (yep, we got a bunch of these for the office, you can also see Martin the background :D)!</p><div><p align="center"></p><figure><img alt="Wasp's new mascot" src="/img/update-dec-23/da-boi.jpg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">This lil' boy actually became pretty popular in our community - we're now looking for a name for him!</figcaption></figure><p></p></div><p>Thanks for reading and see you in a month!</p><p>Buzzity buzz, you got that pizzazz 🐝 🐝,<br>
<!-- -->Matija, Martin and the Wasp team</p><p><em>Want to stay in the loop? → <a href="/#signup">Join our newsletter!</a></em></p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="startups" term="startups"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hosting Our First Hackathon: Results & Review]]></title>
        <id>/2023/01/11/betathon-review</id>
        <link href="https://wasp-lang.dev/blog/2023/01/11/betathon-review"/>
        <updated>2023-01-11T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[To finalize the Wasp Beta launch week, we held a Beta Hackathon, which we dubbed the “Betathon”. The idea was to hold a simple, open, and fun hackathon to encourage users to build with Wasp, and that’s exactly what they did!]]></summary>
        <content type="html"><![CDATA[<p>To finalize the Wasp Beta launch week, we held a Beta Hackathon, which we dubbed the “Betathon”. The idea was to hold a simple, open, and fun hackathon to encourage users to build with Wasp, and that’s exactly what they did!</p><p>As Wasp is still in its early days, we weren’t sure what the response would be, or if there’d be any response at all. Considering that we didn’t do much promotion of the Hackathon outside of our own channels, we were surprised by the results.</p><p>In this post, I’ll give you a quick run-down of:</p><ul><li>the hackathon results 🏆</li><li>how the hackathon was organized</li><li>how we promoted it</li><li>the community response</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="and-the-winners-are">…and the Winners Are:<a class="hash-link" href="#and-the-winners-are" title="Direct link to heading">​</a></h2><p>What’s a hackathon without the participants!? Let’s get this post off to a proper start by congratulating our winners and showcasing their work. 🔍</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tims-job-board">🥇&nbsp;Tim’s Job Board<a class="hash-link" href="#tims-job-board" title="Direct link to heading">​</a></h3><div><p align="center"></p><figure><img alt="Tim's Job Board" src="/img/betathon/tim.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Tim really went for it and created a feature-rich Job Board:</p><ul><li>View the <a href="https://client-production-54e7.up.railway.app/" target="_blank" rel="noopener noreferrer">App</a> &amp; <a href="https://github.com/tskaggs/wasp-jobs" target="_blank" rel="noopener noreferrer">GitHub Repo</a></li><li>Follow <a href="https://twitter.com/tskaggs" target="_blank" rel="noopener noreferrer">Tim on Twitter</a></li><li>🎉 Prizes: Wasp-colored Mechanical Keyboard, Wasp swag, $200 <a href="http://Railway.app" target="_blank" rel="noopener noreferrer">Railway.app</a> credits</li></ul><blockquote><p>“<strong><em>Wasp is very awesome!</em></strong> <em>Easy setup and start-up especially if you're familiar with the Prisma ORM and Tailwind CSS. The stack is small but powerful... I'm going to use Wasp on a few MVP projects this year.”</em> - Tim</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="chriss-cook-wherever-recipes-app">🥈Chris’s “Cook Wherever” Recipes App<a class="hash-link" href="#chriss-cook-wherever-recipes-app" title="Direct link to heading">​</a></h3><div><p align="center"></p><figure><img alt="Chris's Cook Wherever Recipes App" src="/img/betathon/chris.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Chris created an extensive database of recipes in a slick app:</p><ul><li>View the <a href="https://cookwherever.com" target="_blank" rel="noopener noreferrer">App</a> &amp; <a href="https://github.com/cookwherever/cookwherever" target="_blank" rel="noopener noreferrer">GitHub Repo</a></li><li>Follow <a href="https://twitter.com/breadchris" target="_blank" rel="noopener noreferrer">Chris on Twitter</a></li><li>🎉&nbsp;Prizes: Wasp swag, $125 <a href="http://Railway.app" target="_blank" rel="noopener noreferrer">Railway.app</a> credits</li></ul><blockquote><p>“<strong><em>This was the best app dev experience I ever had!</em></strong> <em>…Walking through the docs, I immediately figured out how to use Wasp and was able to make a prototype in a couple of days.”</em> - Chris</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="richards-roadmap--feature-voting-app">🥉&nbsp;Richard’s Roadmap &amp; Feature Voting App<a class="hash-link" href="#richards-roadmap--feature-voting-app" title="Direct link to heading">​</a></h3><div><p align="center"></p><figure><img alt="Richard’s Roadmap &amp; Feature Voting App" src="/img/betathon/richard.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><ul><li>View the <a href="https://droad.netlify.app/" target="_blank" rel="noopener noreferrer">App</a> &amp; <a href="https://github.com/Fecony/droad" target="_blank" rel="noopener noreferrer">GitHub Repo</a></li><li>Follow <a href="https://twitter.com/webrickony" target="_blank" rel="noopener noreferrer">Richard on Twitter</a></li><li>🎉&nbsp;Prizes: Wasp Shirt, $75 <a href="http://Railway.app" target="_blank" rel="noopener noreferrer">Railway.app</a> credits</li></ul><blockquote><p>“<strong><em>I liked how Wasp simplified writing query/actions</em></strong> <em>that are used to interact with the backend and frontend. How everything is defined and configured in wasp file and just works. Also <!-- -->[…]<!-- --> login/signup was really easy to do since Wasp provides these two methods for use.”</em> -</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="emmanuels-notes-app">🥉&nbsp;Emmanuel’s Notes App<a class="hash-link" href="#emmanuels-notes-app" title="Direct link to heading">​</a></h3><div><p align="center"></p><figure><img alt="Emmanuel’s Notes App" src="/img/betathon/emmanuel.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><ul><li>View the <a href="https://github.com/EmmanuelTheCoder/noteapp-with-wasp" target="_blank" rel="noopener noreferrer">GitHub Repo</a></li><li>Follow <a href="https://twitter.com/EmmanuelCoder" target="_blank" rel="noopener noreferrer">Emmanuel on Twitter</a></li><li>🎉&nbsp;Prizes: Wasp Shirt, $75 <a href="http://Railway.app" target="_blank" rel="noopener noreferrer">Railway.app</a> credits</li></ul><blockquote><p><em>I joined the hackathon less than 48 hours before the submission deadline.</em> <strong><em>Wasp made it look easy because it handled the hard parts for me.</em></strong> <em>For example, username/password authentication took less than 7 lines of code to implement. -</em> excerpt from <a href="https://dev.to/emmanuelthecoder/making-something-waspy-a-review-of-wasp-571j" target="_blank" rel="noopener noreferrer">Emmanuel’s Betathon Blog Post</a></p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hackathon-how-to">Hackathon How-to<a class="hash-link" href="#hackathon-how-to" title="Direct link to heading">​</a></h2><p>Personally, I’ve never organized a hackathon before, and this was Wasp’s first hackathon as well, so when you’re a complete newbie at something, you often look towards others for inspiration. Being admirers of the work and style of Supabase, we drew a lot of inspiration from their “<a href="https://supabase.com/blog/launch-week-5-hackathon" target="_blank" rel="noopener noreferrer">launch week</a>” approach when preparing for our own Beta launch and hacakthon.</p><div><p align="center"></p><figure><img alt="Wasp Betathon Homepage" src="/img/betathon/betathonpage.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Our dedicated hackathon landing page w/ intro video &amp; submission form</figcaption></figure><p></p></div><p>With some good inspiration in hand, we set off to create a simple, easy-going Hackathon experience. We weren’t certain we’d get many participants, so we decided to make the process as open as possible: <em>two weeks to work on any project using Wasp, alone or in a team of up to 4 people, submitted on our <a href="https://betathon.wasp-lang.dev/" target="_blank" rel="noopener noreferrer">Betathon Homepage</a> before the deadline</em>. That was it.</p><p>When you’re an early-stage startup, you can’t offer big cash prizes, so we asked Railway if they’d be interested in sponsoring some prizes, as we’re big fans of their deployment and hosting platform. Luckily, they agreed (thanks, Railway 🙏🚂). It was also a great match, since we already had the documentation for deploying Wasp apps to Railway on our website, making it an obvious choice for the participants to deploy their Hackathon apps with.</p><div><p align="center"></p><figure><img alt="Keyboard" src="/img/betathon/keyboard.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Disclaimer: actual prize keyboard will be cooler and waspier 😎🐝</figcaption></figure><p></p></div><p>On top of that, we decided that a cool grand prize could be a Wasp-colored mechanical keyboard. Nothing fancy, but keyboards are an item a lot of programmers love. We also threw in some Wasp beanies and shirts, and stated that we’d spotlight the winner’s on our platforms and social media accounts. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="promotion">Promotion<a class="hash-link" href="#promotion" title="Direct link to heading">​</a></h2><p>For the Wasp Beta Launch Week, we were active and publicising Wasp on many platforms. We didn’t outright promote the hackathon on those platforms, but we were getting a lot of incoming interest to our Website and Discord, so we made noise about it there. We posted banners on the homepage, and made announcements on Discord and Twitter that directed people to a <a href="https://betathon.wasp-lang.dev" target="_blank" rel="noopener noreferrer">Beta Hacakthon homepage</a> we created.</p><p>The homepage was nice to have as a central spot for all the rules and relevant info. We also added a fun intro video to give the hackathon a more personal touch. I also think the effort put into making an intro video gives participants the feeling that they’re entering into a serious contest and committing to something of substance.</p><div><p align="center"></p><figure><img alt="Hackathon Wasp app repo" src="/img/betathon/github.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Wanna host your own Hackathon? Use our template app!</figcaption></figure><p></p></div><p>As an extra bonus, we wrote the Betathon Homepage with Wasp, and put the <a href="https://github.com/wasp-lang/wasp/tree/main/examples/hackathon" target="_blank" rel="noopener noreferrer">source code up on our GitHub</a>. We thought it might inspire people to build with Wasp, using it as a guide while creating their own projects for the hackathon, plus it could be used by others in the future if they want to host their own hackathon. 💻</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-response">The Response<a class="hash-link" href="#the-response" title="Direct link to heading">​</a></h3><p>The response overall was small but significant, considering Wasp’s age. We were also extremely happy with the quality of the engagement. We had thirteen participants register overall, a nice number considering we only started promoting the hackathon on the day that we announced it (this is probably something we’d do differently next time)!</p><p>We also asked participants for their feedback on participating in the Hackathon, and they were all pleased with the open, straight-forward approach we took, so we’ll most likely be repeating this for future versions. Other good signs were the many comments that participants were eager to take part in our next hackathon, as well as some dedicated new community members, which makes it all the more motivating for us. 💪</p><hr><p><strong>A big THANK YOU again to all the participants for their hard work and feedback. Here’s to the next one! 🍻</strong></p>]]></content>
        <author>
            <name>Vinny</name>
            <uri>https://vincanger.github.io</uri>
        </author>
        <category label="fullstack" term="fullstack"/>
        <category label="webdev" term="webdev"/>
        <category label="hackathon" term="hackathon"/>
        <category label="startups" term="startups"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Watch us build a *truly* full-stack app in just 9 minutes w/ Wasp & ChatGPT 🚀 🤯]]></title>
        <id>/2022/12/08/fast-fullstack-chatgpt</id>
        <link href="https://wasp-lang.dev/blog/2022/12/08/fast-fullstack-chatgpt"/>
        <updated>2022-12-08T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[---]]></summary>
        <content type="html"><![CDATA[<br><div style="text-align:center;width:100%;display:inline-block"><iframe width="100%" height="400" src="https://www.youtube.com/embed/HjUpqfEonow" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen="true"></iframe></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="truncate"><a class="hash-link" href="#truncate" title="Direct link to heading">​</a></h2><p>There’s a lot of hype around ChatGPT at the moment, and for good reason. It’s amazing. But there’s also some very valid criticism: that it’s simply taking the grunt work out of programming by writing boilerplate for us, which we as developers have to maintain! </p><div style="margin-bottom:1rem"><a href="https://twitter.com/paulg/status/1600447377248116736?ref_src=twsrc%5Etfw" target="_blank" rel="noopener noreferrer"><img loading="lazy" src="https://dev-to-uploads.s3.amazonaws.com/uploads/articles/5rgubux630836d05mje5.png" alt="I expected technology to make programming less laborious, as it does to most things. But I have to admit I expected it to happen by programmers switching to more powerful languages, rather than continuing to write programs full of boilerplate, but having AIs generate most of it." class="img_ev3q"></a></div><p>PG is totally right in his remark above, but what he doesn’t realize is that there are languages out there that attempt to overcome this very problem, and <a href="https://wasp-lang.dev" target="_blank" rel="noopener noreferrer">Wasp</a> is one of them. </p><p>What makes Wasp unique is that it’s a framework that uses a super simple <strong>language</strong> to help you build your web app: front-end, server, and deployment. But it’s not a complicated language like Java or Python, it’s more similar to SQL or JSON, so the learning curve is really quick (technically, it’s a <em>Domain Specific Langauge</em> or <em>DSL</em>). </p><p>Check it out for yourself:</p><div class="language-c codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-c codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/* main.wasp */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">app todoApp </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  title</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"ToDo App"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/* visible in tab */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  auth</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/* full-stack auth out-of-the-box */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    userEntity</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> User</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    externalAuthEntity</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> SocialLogin</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    methods</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      usernameAndPassword</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      google</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">route RootRoute </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> path</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> to</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> MainPage </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">page MainPage </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/* import your React code */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  component</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> import Main from </span><span class="token string" style="color:rgb(195, 232, 141)">"@client/Main.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>With this simple file above, Wasp will continually compile a truly full-stack web app for you, with a React front-end, and an ExpressJS server. You’re free to then build out the important features yourself with React, NodeJS, Prisma, and react-query.</p><p>The great part is, you can probably understand the Wasp syntax without even referencing the docs. Which means AI can probably work with it easily as well. So rather than having AI create a ton of boilerplate for us, we thought “can ChatGPT write Wasp?” If it can, all we need is to have it create that one file, and then the power of Wasp will take care of the rest. No more endless boilerplate!</p><p>So that’s exactly what we set to find out in the video above. The results? Well let’s just say they speak for themselves.</p>]]></content>
        <author>
            <name>Vinny</name>
            <uri>https://vincanger.github.io</uri>
        </author>
        <category label="wasp" term="wasp"/>
        <category label="ai" term="ai"/>
        <category label="chatgpt" term="chatgpt"/>
        <category label="fullstack" term="fullstack"/>
        <category label="language" term="language"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wasp Beta brings major IDE improvements]]></title>
        <id>/2022/12/01/beta-ide-improvements</id>
        <link href="https://wasp-lang.dev/blog/2022/12/01/beta-ide-improvements"/>
        <updated>2022-12-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[With the Beta release (0.7), Wasp brings its IDE game to a whole new level!]]></summary>
        <content type="html"><![CDATA[<p>With the Beta release (0.7), Wasp brings its IDE game to a whole new level!</p><p>So far Wasp didn’t have much beyond basic syntax highlighting in VSCode, but now it has:</p><ol><li><strong>Wasp language server</strong>, that brings the following to your .wasp files:<ol><li>live error reporting in your editor</li><li>autocompletion (basic for now)</li></ol></li><li><strong>VSCode Wasp language extension</strong>:<ol><li>snippets (for <code>page</code>, <code>query</code>, <code>action</code>, <code>entity</code>)</li><li>improved syntax highlighting for .wasp files</li><li>integration with the above-mentioned language server</li></ol></li><li>Support for popular <strong>IDEs to fully support Javascript and Typescript files</strong> in the Wasp project.</li></ol><div><p align="center"></p><figure><img alt="" src="/img/beta-ide-improvements/wls-demo.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Wasp IDE support in action in VSCode: syntax highlighting, snippets, live error reporting.</figcaption></figure><p></p></div><p>Wasp IDE support in action in VSCode: syntax highlighting, snippets, live error reporting.</p><h1>Wasp Language Server</h1><p>Wasp Language Server (WLS) is the “brain” behind smart IDE features like live error reporting and autocompletion - so if it seems like IDE actually understands your code to some degree, well that is the language server!</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>For curious, check out the source code of WLS on Github: <a href="https://github.com/wasp-lang/wasp/tree/main/waspc/waspls/src/Wasp/LSP" target="_blank" rel="noopener noreferrer">https://github.com/wasp-lang/wasp/tree/main/waspc/waspls/src/Wasp/LSP</a> .</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="features">Features<a class="hash-link" href="#features" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="live-errorwarning-reporting">Live error/warning reporting<a class="hash-link" href="#live-errorwarning-reporting" title="Direct link to heading">​</a></h3><p>WLS compiles wasp code for you as you work on it and shows you any errors directly in the editor, via red squiggly lines.</p><div><p align="center"></p><figure><img alt="" src="/img/beta-ide-improvements/wls-live-errors.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="autocompletion">Autocompletion<a class="hash-link" href="#autocompletion" title="Direct link to heading">​</a></h3><p>WLS understands at which part of code you are right now and offers appropriate completions for it.</p><div><p align="center"></p><figure><img alt="" src="/img/beta-ide-improvements/wls-autocompletion.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>Right now WLS is pretty naive here, and mostly focuses on offering available expressions when it realizes you need an expression. This is helpful but just a start, and it will get much smarter in future versions!</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="bit-of-history-why-are-language-servers-cool">Bit of history: why are Language Servers cool<a class="hash-link" href="#bit-of-history-why-are-language-servers-cool" title="Direct link to heading">​</a></h2><p>Years ago, there was no standardized way to write something like Language Server for your language, instead, each language was doing something of its own, and then each editor/IDE would also implement its own layer of logic for using it, and that was a loooot of work that needed to be done for each editor!</p><p>Luckily, Microsoft then came up with <a href="https://microsoft.github.io/language-server-protocol/" target="_blank" rel="noopener noreferrer">Language Server Protocol</a> - a standardized way of communicating between the “smart” part, implemented by language creators, and the editor/IDE part (language extension) that is using it. This enabled each editor to implement this logic for interacting with language servers only once, and then it can be used for any language server!</p><p>This is great for us, language creators, because it means that once we implement a language server for our language, most of the work is done, and the work we need to do per each editor is manageable.</p><p>Right now WLS is used only by the <a href="https://marketplace.visualstudio.com/items?itemName=wasp-lang.wasp" target="_blank" rel="noopener noreferrer">VSCode Wasp language extension</a>, but thanks to the nature of the Language Server Protocol, it should be relatively easy to add support for other editors too! Check this <a href="https://github.com/wasp-lang/wasp/issues/864" target="_blank" rel="noopener noreferrer">GH issue</a> if you are interested in helping.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="setup">Setup<a class="hash-link" href="#setup" title="Direct link to heading">​</a></h2><p>The best thing: there is nothing you, as a Wasp user, have to do to set up WLS! It already comes bundled with your installation of <code>wasp</code> → so if you can run <code>wasp</code> projects on your machine, you already have WLS, and it is always of the correct version needed for your current wasp installation. The only thing you need to ensure is you have <code>wasp</code> version ≥ 0.6, and a relatively fresh VSCode Wasp language extension.</p><p>An easy way to check that your version of <code>wasp</code> has WLS packaged into it is to run it and look at its usage instructions: it should mention <code>waspls</code> as one of the commands.</p><div><p align="center"></p><figure><img alt="" src="/img/beta-ide-improvements/wasp-cli-waspls.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h1>Wasp VSCode extension</h1><p>If we would call Wasp Language Server (WLS) the “backend”, then <a href="https://marketplace.visualstudio.com/items?itemName=wasp-lang.wasp" target="_blank" rel="noopener noreferrer">VSCode Wasp language extension</a> would be “frontend” → it takes care of everything to ensure you have a nice experience working with Wasp in VSCode, while delegating the hardest work to the WLS.</p><div><p align="center"></p><figure><img alt="" src="/img/beta-ide-improvements/wasp-vscode-extension.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>For curious, you can check out its source code here, core of it is just one file: <a href="https://github.com/wasp-lang/vscode-wasp/blob/main/src/extension.ts" target="_blank" rel="noopener noreferrer">https://github.com/wasp-lang/vscode-wasp/blob/main/src/extension.ts</a></p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="features-1">Features<a class="hash-link" href="#features-1" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="syntax-highlighting">Syntax highlighting<a class="hash-link" href="#syntax-highlighting" title="Direct link to heading">​</a></h3><p>Nothing unexpected here: it recognizes different parts of Wasp syntax, like type, value, identifier, comment, string, … and colors them appropriately.</p><p>If you are curious how is this implemented, check <a href="https://github.com/wasp-lang/vscode-wasp/blob/main/syntaxes/wasp.tmLanguage.yaml" target="_blank" rel="noopener noreferrer">https://github.com/wasp-lang/vscode-wasp/blob/main/syntaxes/wasp.tmLanguage.yaml</a> → the whole syntax of Wasp is described via this “mysterious” old TextMate format, since that is the way to do it in VSCode.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="snippets">Snippets<a class="hash-link" href="#snippets" title="Direct link to heading">​</a></h3><p>Wasp allows you to quickly generate a snippet of code for a new <code>page</code>, <code>query</code>, <code>action</code>, or <code>entity</code>!</p><div><p align="center"></p><figure><img alt="" src="/img/beta-ide-improvements/wls-snippets.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Check out our snippet definitions here: <a href="https://github.com/wasp-lang/vscode-wasp/blob/main/snippets/wasp.json" target="_blank" rel="noopener noreferrer">https://github.com/wasp-lang/vscode-wasp/blob/main/snippets/wasp.json</a> . It is actually really easy, in VSCode, to define them and add new ones.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="live-error-reporting--autocompletion">Live error reporting + autocompletion<a class="hash-link" href="#live-error-reporting--autocompletion" title="Direct link to heading">​</a></h3><p>This is done by delegating the work to WLS, as described above!</p><h1>IDE support for Javascript / Typescript in Wasp project</h1><p>Due to how unique Wasp is in its approach, getting an IDE to provide all the usual features for Javascript / Typescript wasn’t completely working, and instead, the IDE would get somewhat confused with the context in which files are and would for example not be able to offer “go to definition” for some values, or would not know how to follow the import path.</p><p>With Wasp Beta this is now resolved! We resolved this by somewhat changing the structure of the Wasp project and also adding tsconfig.json files that provide IDE with the information needed to correctly analyze the JS/TS source files.</p><p>To learn more about Typescript support in Wasp Beta, check <a href="https://wasp-lang.dev/blog/2022/11/29/typescript-feature-announcement" target="_blank" rel="noopener noreferrer">this blog post</a>!</p><h1>What does the future hold?</h1><p>While Wasp Beta greatly improved IDE support for Wasp, there are still quite a few things we want to improve on:</p><ol><li>Smarter autocompletion via WLS.<ol><li>Right now it suggests any expression when you need an expression. In the future, we want it to know exactly what is the type of needed expression, and suggest only expressions of that type! So if I am in <code>route ... { to: &lt;my_cursor_here&gt; }</code>, then I want to see only <code>page</code>s among the suggested completions, not <code>queries</code> or <code>actions</code> or something else.</li><li>Further, we would also like it to autocomplete on dictionary fields → so if I am in <code>route ... { &lt;my_cursor_here&gt; }</code>, it should offer me <code>path</code> and <code>to</code> as completions, as those are only valid fields in the <code>route</code> dictionary.</li></ol></li><li>Extensions for other editors besides VSCode. Now that we have Wasp Language Server, these shouldn’t be too hard to implement! This is also a great task for potential contributors: check this <a href="https://github.com/wasp-lang/wasp/issues/864" target="_blank" rel="noopener noreferrer">GH issue</a> if you are interested.</li><li>Implement Wasp code formatter. We could make it a part of WLS, and then have the editor extension call it on save.</li><li>Improve support for PSL (Prisma Schema Language) in .wasp files.</li></ol><p>If any of these sound interesting, feel free to join us on our <a href="https://github.com/wasp-lang/wasp" target="_blank" rel="noopener noreferrer">Github</a>, or join the discussion on <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">Discord</a>!</p>]]></content>
        <author>
            <name>Martin Sosic</name>
            <uri>https://github.com/martinsos</uri>
        </author>
        <category label="wasp" term="wasp"/>
        <category label="language" term="language"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Feature Release Announcement - Wasp Optimistic Updates]]></title>
        <id>/2022/11/30/optimistic-update-feature-announcement</id>
        <link href="https://wasp-lang.dev/blog/2022/11/30/optimistic-update-feature-announcement"/>
        <updated>2022-11-30T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We’re excited to announce that Wasp actions now feature native support for optimistic updates!]]></summary>
        <content type="html"><![CDATA[<p>We’re excited to announce that Wasp actions now feature native support for optimistic updates!
Continue reading to to find out what optimistic updates are and how Wasp implements them.</p><div><p align="center"></p><figure><img alt="Wasp TS support" src="/img/opt-updates-banner.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-are-optimistic-updates-anyway">What are Optimistic Updates Anyway?<a class="hash-link" href="#what-are-optimistic-updates-anyway" title="Direct link to heading">​</a></h2><p>Think about an interactive web app you use daily. It could be almost anything (e.g., Reddit, Youtube, Facebook). It almost certainly features UI elements you can interact with without refreshing the page, such as upvotes on Reddit or likes on Youtube.</p><p>All these small actions play out in the same manner. Let's look at Reddit upvotes as an example:</p><ol><li>You click on the upvote button</li><li>Your browser sends a request to the server to save the upvote</li><li>The server saves your upvote to the database and sends a successful response to your browser</li><li>Your browser receives the successful response and reflects the change in the UI (i.e., you see your upvote)</li></ol><p>The client&nbsp;<em>waits</em>&nbsp;for the server's confirmation&nbsp;<em>before</em>&nbsp;updating the UI because actions can sometimes fail. Well, at least that was the original idea.</p><p>These days, many popular websites update their UIs&nbsp;<em>without waiting</em>&nbsp;for servers' responses. Most of the time, everything goes as expected: you click on an upvote, and the server returns a successful response a couple of seconds later (depending on how fast your connection is). Since programmers want their users to have a snappier experience, instead of waiting for a confirmation, they update the UI immediately (as if the action were successful) and then roll back if the server doesn't return a successful response (which rarely happens). This pattern of optimistically updating the UI before receiving the confirmation of success is called, you guessed it, an&nbsp;<strong>Optimistic Update</strong>.</p><p>Most popular modern websites use optimistic updates to some degree. As mentioned, Reddit uses them for upvotes and downvotes, Youtube uses them for likes, and Trello uses them when moving cards between lists.</p><p>Optimistic updates are a significant UX improvement, but since they introduce additional state (which can get out of sync with the server), they can be tricky to get right. Then there's also the issue of writing additional code for managing the cache and rolling back the changes if the request ends up failing. Luckily, we're here to help!</p><p>Wasp recently added native support for optimistic updates, and the rest of this post demonstrates how to quickly set it up in your Wasp application.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-wasp-todo-app-without-optimistic-updates">A Wasp Todo App Without Optimistic Updates<a class="hash-link" href="#a-wasp-todo-app-without-optimistic-updates" title="Direct link to heading">​</a></h2><p>To honor the tradition of demonstrating UIs using Todo apps, We'll show you how to improve the UX of toggling an item's status when working with a slow connection.
Before looking at our todo app in action, let's see how we've implemented it in Wasp.</p><p>These are the relevant declarations in our <code>.wasp</code> file:</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">main.wasp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">entity </span><span class="token maybe-class-name">Task</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">psl</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    id          </span><span class="token maybe-class-name">Int</span><span class="token plain">     @id @</span><span class="token keyword module" style="font-style:italic">default</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">autoincrement</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    description </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    isDone      </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Boolean</span><span class="token plain"> @</span><span class="token keyword module" style="font-style:italic">default</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">psl</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// A query for fetching all tasks.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">query getTasks </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">fn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> getTasks </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@server/queries.js"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">entities</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token maybe-class-name">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// An action for updating the task's status.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">action updateTask </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">fn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> updateTask </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@server/actions.js"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">entities</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token maybe-class-name">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is the query we use to fetch the tasks (together with their statuses):</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">queries.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">getTasks</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">args</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access maybe-class-name">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">findMany</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Here's the action we use to update a task’s status:</p><div class="language-javascript codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">actions.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-javascript codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">updateTask</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token parameter"> id</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> isDone </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access maybe-class-name">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">updateMany</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">where</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> id </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> isDone </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Finally, this is how our client uses this action to update a task:</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">MainPage.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">updateTask</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/queries'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(130, 170, 255)">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token parameter"> id</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> isDone</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> description </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">task</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">label</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">description</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">input</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">'</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">checkbox</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">'</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">checked</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">isDone</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onChange</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">            </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript parameter" style="color:rgb(255, 85, 114)">e</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">updateTask</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 85, 114)">isDone</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> e</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">target</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">checked</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">description</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">label</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Let's first see how updating a task looks when everything works as expected (i.e., we're on a fast connection):</p><div><p align="center"></p><figure><img alt="Normal todo list" src="/img/optimistic-update-feature-announcement-normal.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>So far, so good! But what happens when our connection is not as fast?</p><div><p align="center"></p><figure><img alt="Todo list with lag" src="/img/optimistic-update-feature-announcement-lag.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Hmm, this isn't quite as smooth as we'd like it to be.
The user has to wait for several seconds before seeing their their changes reflected by the UI.</p><p>How can we improve it? Well, of course, we can optimistically update the checkbox!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="performing-a-wasp-action-optimistically">Performing a Wasp Action Optimistically<a class="hash-link" href="#performing-a-wasp-action-optimistically" title="Direct link to heading">​</a></h2><p>To perform the <code>updateTask</code> action optimistically, all we need to do is decorate the calling code on the client:</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">MainPage.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">updateTask</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/queries'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(130, 170, 255)">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token parameter"> id</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> isDone</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> description </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> updateTaskOptimistically </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useAction</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">updateTask</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">optimisticUpdates</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Addressing the query we want to update.</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">getQuerySpecifier</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">getTasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Telling Wasp how to update the addressed query using the new payload</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// and the previously cached data.</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">updateQuery</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token parameter"> id</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> isDone </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> oldTasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> oldTasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token parameter">task</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">===</span><span class="token plain"> id </span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> isDone </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> task</span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">task</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">label</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">description</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">input</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">'</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">checkbox</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">'</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">checked</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">isDone</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onChange</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">            </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript parameter" style="color:rgb(255, 85, 114)">e</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">updateTaskOptimistically</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 85, 114)">isDone</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> e</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">target</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">checked</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">description</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">label</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Those are all the changes we need, the rest of the code (i.e., <code>main.wasp</code>, <code>queries.js</code> and <code>actions.js</code>) remains the same. We won't describe the API in detail, but if you're curious, everything is covered by <a href="/docs/language/features#the-useaction-hook">our official docs</a>.</p><p>Finally, let's see how this version of the app looks in action:</p><div><p align="center"></p><figure><img alt="Optimistically updated todo list" src="/img/optimistic-update-feature-announcement-fixed.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Our app no longer waits for the server before rendering the changes. Instead, it updates the cache optimistically, continues waiting for the response, and rolls back the changes if the action fails (Wasp internally handles all of this). As previously mentioned, simple changes such as this one rarely fail. Therefore, most of the time, the user enjoys their snappier experience without ever knowing anything special is happening in the background.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-makes-optimistic-updates-difficult">What Makes Optimistic Updates Difficult<a class="hash-link" href="#what-makes-optimistic-updates-difficult" title="Direct link to heading">​</a></h2><p>There's an old software engineering joke you're probably familiar with:</p><blockquote><p>There are only two hard things in Computer Science: cache invalidation and naming things.</p></blockquote><p>Optimistically updating a query involves plenty of meddling with the client-side cache, which is bound to come with a few gotchas. Examples include the answers to questions such as:</p><ul><li>What happens when an optimistically updated action fails?</li><li>What happens when the user uses the optimistically updated data in a new action?</li><li>What happens when the user performs a different action that affects the same cached data as the optimistically updated one?</li><li>etc.</li></ul><p>Notice how Wasp users don't need to know about any of these issues when using our optimistic updates API. They only need to tell Wasp which query they wish to update and how, and Wasp takes care of the rest.</p><p>Wasp internally uses&nbsp;<a href="https://tanstack.com/query/v4/docs/adapters/react-query" target="_blank" rel="noopener noreferrer">React Query</a>, an excellent asynchronous state management library we'll gladly recommend to anyone. While React Query does solve some of these problems and helps with some of the rest, we still had to implement quite a complex mechanism to fully cover all edge cases.</p><p>Describing this mechanism, although technically interesting, is beyond the scope of a feature announcement. But stay tuned because in a future blog post, we'll be taking a deep dive into the infrastructure Wasp uses to ensure optimistic updates are performed correctly and consistently.</p>]]></content>
        <author>
            <name>Filip Sodić</name>
            <uri>https://github.com/sodic</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="feature" term="feature"/>
        <category label="optimistic" term="optimistic"/>
        <category label="updates" term="updates"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Permissions (access control) in web apps]]></title>
        <id>/2022/11/29/permissions-in-web-apps</id>
        <link href="https://wasp-lang.dev/blog/2022/11/29/permissions-in-web-apps"/>
        <updated>2022-11-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[At Wasp, we are working on a config language / DSL for building web apps that integrates with React & Node.js.]]></summary>
        <content type="html"><![CDATA[<p>At Wasp, we are working on a config language / DSL for building web apps that integrates with React &amp; Node.js.<br>
<!-- -->This requires us to deeply understand different parts of what constitutes a web app, in order to be able to model them in our DSL.</p><p>Recently our focus was on access control, and I decided to capture the learnings in this blog post, to help others quickly get up to speed on how to do access control in web apps.<br>
<!-- -->So, if you are new to access control in web apps, or have been doing it for some time but want to get a better idea of standard practices, read along!</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="quick-overview-of-what-this-blog-post-covers">Quick overview of what this blog post covers:<a class="hash-link" href="#quick-overview-of-what-this-blog-post-covers" title="Direct link to heading">​</a></h4><ol><li>Permissions, yay! Wait, what are they though? (quick overview of basic terms)</li><li>Where do we check permissions in a web app: frontend vs backend vs db</li><li>Common approaches (RBAC, ABAC, …)</li><li>OWASP recommendations</li><li>Implementing access control in practice</li><li>Summary (<a href="#summary-tldr">TLDR</a>)</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-permissions-yay-wait-what-are-they-though">1. Permissions, yay! Wait, what are they though?<a class="hash-link" href="#1-permissions-yay-wait-what-are-they-though" title="Direct link to heading">​</a></h2><p>Unless your web app is mostly about static content or is a form of art, it will likely have a notion of users and user accounts.</p><div><p align="center"></p><figure><img alt="Artistic dolphin painting with brush" src="/img/permissions-in-web-apps/dolphin_artist.webp"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">This dolphin doesn't need users</figcaption></figure><p></p></div><p>In such a case, you will need to know which user has permissions to do what -&gt; who can access which resources, and who can execute which operations.</p><p>Some common examples of permissions in action:</p><ol><li>User can access only their own user account.</li><li>If the user is an admin, they can ban other users’ accounts.</li><li>User can read other users’ articles, but can't modify them.</li><li>The title and description of the article behind the paywall are publicly accessible, but the content is not.</li><li>User can send an email invitation to up to 10 future users per day.</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="aha-you-mean-access-control-sorry-authorization-hmm-authentication">Aha, you mean access control! Sorry, authorization! Hmm, authentication?<a class="hash-link" href="#aha-you-mean-access-control-sorry-authorization-hmm-authentication" title="Direct link to heading">​</a></h3><p>There are different terms out there (authentication, authorization, access control, permissions) that are often confused for each other, so let's quickly clarify what each one of them stands for.</p><div><p align="center"></p><figure><img style="width:500px" alt="Spidermen representing authN, authZ, AC and permissions pointing at each other" src="/img/permissions-in-web-apps/auth-spidermen.jpg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">They all look the same!</figcaption></figure><p></p></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-authentication-or-as-cool-kids-would-say-authn">1) Authentication (or as cool kids would say: authN)<a class="hash-link" href="#1-authentication-or-as-cool-kids-would-say-authn" title="Direct link to heading">​</a></h3><p>Act of verifying the user's identity.<br>
<!-- -->Answers the question "<strong>Who are they?</strong>"</p><blockquote><p>A: Knock Knock<br>
<!-- -->B: Who is it?<br>
<!-- -->A: User!<br>
<!-- -->B: User who?<br>
<!-- -->A: Authorization: Basic myusername:mypassword</p><p>-&gt; yes, you noticed correctly, this is an example of common authentication method but HTTP header is called "Authorization"! Weird! But it all makes sense if you squint hard enough: (<a href="https://stackoverflow.com/questions/30062024/why-is-the-http-header-for-authentication-called-authorization" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/30062024/why-is-the-http-header-for-authentication-called-authorization</a>).</p></blockquote><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-authorization-or-as-cool-kids-would-say-authz">2) Authorization (or as cool kids would say: authZ)<a class="hash-link" href="#2-authorization-or-as-cool-kids-would-say-authz" title="Direct link to heading">​</a></h3><p>Process of determining access rights that user has.<br>
<!-- -->Answers the question "<strong>Are they allowed to do this?</strong>"</p><p>Normally you will want the user to be authenticated at this point already, so you have information about them based on which you will decide if they are allowed to do something.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-access-control">3) Access Control<a class="hash-link" href="#3-access-control" title="Direct link to heading">​</a></h3><p>A higher-level term (compared to authN and authZ) that encompasses the whole process of ensuring that only allowed parties can access specific resources (controlling access to resources -&gt; access control).</p><p>Often consists of authentication and/or authorization as its steps.</p><p>Also often used in the wild interchangeably with just "authorization".
Reference (OWASP): <a href="https://www.cgisecurity.com/owasp/html/ch08.html" target="_blank" rel="noopener noreferrer">https://www.cgisecurity.com/owasp/html/ch08.html</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-permissions">4) Permission(s)<a class="hash-link" href="#4-permissions" title="Direct link to heading">​</a></h3><p>A more general/informal term, closest in meaning to "authorization" when used in the context of computer science.</p><p><strong>Permission</strong> to <strong>access</strong> a <strong>resource</strong> is called <strong>authorization</strong>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="all-together">All together<a class="hash-link" href="#all-together" title="Direct link to heading">​</a></h3><div><p align="center"></p><figure><img style="width:350px" alt="Diagram of authN, authZ, AC and permissions relationship" src="/img/permissions-in-web-apps/auth-terms-diagram.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Let’s see these terms used in a sentence by observing the following imagined pull request (PR):</p><blockquote><p>Title: Added <strong>access control</strong> to the app.  </p><p>Description:<br>
<!-- -->I implemented a way for users to <strong>authenticate</strong> via email and password or via Google.<br>
<!-- -->On the server-side, I added <strong>permission checks</strong> to most of our REST API handlers, to ensure an <strong>authenticated</strong> user is <strong>authorized</strong> to execute them.<br>
<!-- -->If the user is not <strong>authorized</strong>, we throw an HTTP error 403.<br>
<!-- -->There are also some public parts of REST API where the user doesn’t have to be <strong>authenticated</strong>.</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-where-do-we-check-permissions-in-a-web-app-frontend-vs-backend-vs-database">2. Where do we check permissions in a web app: frontend vs backend vs database<a class="hash-link" href="#2-where-do-we-check-permissions-in-a-web-app-frontend-vs-backend-vs-database" title="Direct link to heading">​</a></h2><p>We explained a bunch of terms, let's see now how access permission checks are actually done in practice!</p><p>In a typical web app, you will have a frontend, backend (server), and database.</p><p>The frontend will be issuing commands to the server, which then executes operations and possibly modifies the database (on their behalf). Since <strong>users don’t have direct access to the database</strong>, and since the <strong>frontend is inherently not secure</strong>, that leaves the <strong>server as the central place where all the crucial access control needs to happen</strong>.</p><div><p align="center"></p><figure><img style="width:600px" alt="A real-life photo of frontend, server, and database performing access control." src="/img/permissions-in-web-apps/frontend-server-db-access-control.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">A real-life photo of frontend, server, and database performing access control.</figcaption></figure><p></p></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="frontend-browser">Frontend (browser)<a class="hash-link" href="#frontend-browser" title="Direct link to heading">​</a></h3><p>By frontend we mean web client -&gt; code (e.g. JS) that executes in the browser.</p><p>The frontend is here to help users issue commands towards the server via which users can access and/or modify the resources of our web app (which are most often stored in the database).</p><p>Since users can manipulate the frontend code as they wish, we can't really do any permissions checks in the frontend code, we can't trust it!</p><div><p align="center"></p><figure><img style="width:300px" alt="Imposter of the vent warning that frontend can't be trusted" src="/img/permissions-in-web-apps/imposter-of-the-vent.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Any permission checks we do on the frontend, we will need to repeat on the server in any case.<br>
<!-- -->If that is so, should we at all check permissions on the frontend, and what is the purpose of that?<br>
<strong>The main reason for doing any permissions checks on the frontend is ergonomics/user experience</strong> -&gt; by having UI focus only on resources they can change, we make it easier for users to understand what they can do in our web app and make sure they don't waste time on trying to describe complex operations that server will then not be able to execute.</p><p>So, for example, our frontend code can hide/omit certain fields in the UI form if the user shouldn't be able to access them, it can prevent opening certain pages, or hide/omit certain buttons if they trigger operations that the user is not allowed to perform.</p><div><p align="center"></p><figure><img alt="Example of using casl.js in React" src="/img/permissions-in-web-apps/casl-react-example.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Example of using casl.js in React to show button only if the user has permission.</figcaption></figure><p></p></div><p><strong>Takeaway: Permission checks on frontend are not there for security, but only for ergonomics / improving user experience.</strong></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="backend-server">Backend (server)<a class="hash-link" href="#backend-server" title="Direct link to heading">​</a></h3><p>The server is <strong>a crucial place to implement access control</strong>. It exposes an API that the frontend (browser) and/or other services consume. While doing that, they authenticate with the server, so that server knows who they are, and then they ask (i.e. via REST API or GraphQL API) the server to execute certain operations (i.e. creating, updating, or fetching something). It is the server’s job to figure out if they are allowed (authorized) to perform those operations (on specified resources / with provided arguments) and to reject them if they are not.</p><p>At its core, permissions checks on the server are here to <strong>check for each API endpoint</strong> if the caller is allowed to execute it. Often they are executed at the very start of the API endpoint logic, but often they are also intertwined with the rest of the endpoint handler logic.</p><div><p align="center"></p><figure><img alt="Example of permissions check in backend." src="/img/permissions-in-web-apps/backend-permissions-check-example.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Example of doing permission check at the start of API endpoint (is user authenticated) and then also doing another check as part of the database query (is user owner of the article they are trying to delete).</figcaption></figure><p></p></div><p>Besides defining checks at API/operation level, they are also often defined at the <strong>data/model level</strong>. This means that they are tied to specific data models (normally from the database), as part of data access logic (ORM), and are defining who can access specific field(s), or even the whole data model.</p><p>Example of attaching permission checks to the data model directly in the GraphQL schema (<a href="https://www.prisma.io/blog/graphql-directive-permissions-authorization-made-easy-54c076b5368e" target="_blank" rel="noopener noreferrer">from this blog post</a>):</p><div><p align="center"></p><figure><img alt="Example of attaching permission checks to the data model directly in the GraphQL schema" src="/img/permissions-in-web-apps/data-model-permissions-gql.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>For a more sophisticated RBAC approach, with an additional layer of indirection (permissions), read on.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="database">Database<a class="hash-link" href="#database" title="Direct link to heading">​</a></h3><p>Usually, users don’t have direct access to the database at all, instead, they affect it via the server. <strong>In such a case, there is no need to do specific database access control</strong> besides normal constraints that you will have in your DB to ensure data model integrity, like uniqueness, validations, and similar. That said, in some situations, you might want to do it, but we will not get into that in this article.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-common-approaches-rbac-abac-">3. Common approaches (RBAC, ABAC, …)<a class="hash-link" href="#3-common-approaches-rbac-abac-" title="Direct link to heading">​</a></h2><p>The most common approaches to access control are <strong>RBAC</strong> (Role-Based Access Control) and <strong>ABAC</strong> (Attribute-Based Access Control), with RBAC having the strong lead (but ABAC is picking up).</p><p>Although less popular, we will also shortly mention ReBAC as an “in-between” option.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rbac---role-based-access-control">RBAC - Role-based access control<a class="hash-link" href="#rbac---role-based-access-control" title="Direct link to heading">​</a></h3><p>Roles rule :D! In <a href="https://en.wikipedia.org/wiki/Role-based_access_control" target="_blank" rel="noopener noreferrer">RBAC</a>, roles are the central concept. Some example roles might be <code>admin</code>, <code>guest</code>, <code>writer</code>, <code>moderator</code>, …. When determining if a certain user has access, <strong>we check their roles and determine their access rights based on it</strong>. For example, <code>admin</code> can delete other users, articles, and projects, but <code>guest</code> can’t modify any resources, only read articles.</p><p>Pro advice (thanks Karan!): While we could be checking the user’s roles directly in the permission checks, it is even better (and recommended by OWASP) to add a layer of indirection → permissions. <strong>So roles are attached to users, permissions are attached to roles, and permission checks check permissions</strong> (who would expect that :)!?).</p><div><p align="center"></p><figure><img alt="Users -> Roles -> Permissions" src="/img/permissions-in-web-apps/users-roles-permissions.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>For example, a user might have role <code>admin</code>, and role <code>admin</code> has permissions <code>updateArticle</code> and <code>deleteArticle</code> attached to it. Then, when determining if a user can delete the article, we first fetch his role, then we fetch the permissions attached to that role, and finally check if <code>deleteArticle</code> is present among those → if so, they can continue with the deletion!</p><p>This way, if we decide a certain role should have more or fewer permissions, we just add or remove the permission in question to the role, and that is it! We don’t have to go through every permission check and update its logic (which we would have to do if we were checking directly against roles).</p><p><strong>RBAC is popular because it is relatively simple and it reflects the basic business domain pretty well</strong> - often we are thinking in the terms of roles in the real world, so it is easy to grasp and understand. There are plenty of solutions and frameworks out there that implement RBAC.</p><p>While a good match for many common use cases, there is a drawback to RBAC - when access control becomes complex (which usually happens as the web app evolves and grows big), RBAC sometimes fails in offering needed granularity in an elegant way, resulting in unwieldy and overly-complex access control logic.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="abac---attribute-based-access-control">ABAC - Attribute-based access control<a class="hash-link" href="#abac---attribute-based-access-control" title="Direct link to heading">​</a></h3><p>In <a href="https://en.wikipedia.org/wiki/Attribute-based_access_control" target="_blank" rel="noopener noreferrer">ABAC</a>, key idea is that you define <strong>a bunch of access control rules</strong> where each rule takes different “attributes” as input. When you need to check if a user is authorized to do smth, you run the rules and <strong>if all the rules pass, it is a go</strong>, but if a single rule fails, it is a no go.</p><p>Rule attributes can be anything, but usually, they fall into 4 categories:</p><ol><li><strong>Subject</strong>: information about a user (i.e. user’s id or name)</li><li><strong>Action</strong>: operation they want to perform (i.e. reading an Article)</li><li><strong>Object</strong>: resources they want to operate on (i.e. an Article),</li><li><strong>Environment/context:</strong> i.e. current time of the day or number of previous requests that the user did in the last hour.</li></ol><div><p align="center"></p><figure><img alt="ABAC diagram" src="/img/permissions-in-web-apps/abac-diagram.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Let’s observe the example from before where we wanted to know if user is allowed to delete an article.<br>
<!-- -->In ABAC, we could define an action “deleteArticle”, and then define a rule that takes user(subject), action, object, and additional context. That rule would check if action is “deleteArticle” → if so, it would evaluate if user is allowed to delete the article specified as an object, by checking some properties of user, maybe even role, or by checking if user is owner of that article.<br>
<!-- -->Then, when user actually issues a command to delete an article, we would ask our access control system to run it against all the rules it has, while giving it the (user, “deleteArticle”, article, context) tuple → most of the rules would say all is ok since they are not concerned with “deleteArticle” action, but the ones that are (like the one we defined above) must all pass in order to actually allow the access.</p><p><strong>ABAC is very flexible and general as an approach</strong>, and you could easily implement RBAC (and many other approaches) in ABAC (by checking the user’s role as one of the attributes) → therefore it is more general/expressive than RBAC.</p><p>However, ABAC is more complex to implement, and it is also more expensive performance-wise, due to needing to check multiple rules each time that access control check is being performed.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rebac---relationship-based-access-control">ReBAC - Relationship-based access control<a class="hash-link" href="#rebac---relationship-based-access-control" title="Direct link to heading">​</a></h3><p>Roles (RBAC) can be lacking when you need to grant access based on relationship-related questions like “is this user owner of this article” or “does this user belong to this workspace”.</p><p>While ABAC can easily handle this, you could also consider it a bit too powerful if all you need to describe are relationships → and this is where ReBAC comes in.</p><p>While there are different ways one could go about implementing ReBAC, the simplest one is to build on top of RBAC by introducing a concept of “relationship” rules to your access control logic and then checking those alongside the roles. So RBAC with a dash of ABAC (focused on relationships).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-owasp-recommendations">4. OWASP recommendations<a class="hash-link" href="#4-owasp-recommendations" title="Direct link to heading">​</a></h2><p>When looking online for “official”/standardized recommendations on how to do access control in web apps, you will most likely find resources produced by OWASP.</p><p>Definition of OWASP: The Open Web Application Security Project® (OWASP) is a nonprofit foundation that works to improve the security of software.</p><p>I found that they have quite a few resources on how to do access control in web apps, the most interesting being the following:</p><ul><li><a href="https://owasp.org/www-pdf-archive/ASDC12-Access_Control_Designs_and_Pitfalls.pdf" target="_blank" rel="noopener noreferrer">OWasp presentation about how to do ACL in Web App</a>.</li><li><a href="https://github.com/OWASP/CheatSheetSeries/blob/master/cheatsheets/Authorization_Cheat_Sheet.md" target="_blank" rel="noopener noreferrer">OWasp cheat sheet on how to do ACL in Web App.</a></li></ul><p>From their materials I extracted a couple of main points that made the most sense to me:</p><ul><li><strong>Centralize the access control logic so it is easy to review.</strong></li><li><strong>Deny access by default.</strong></li><li><strong>Prefer ABAC over RBAC.</strong></li></ul><div><p align="center"></p><figure><img alt="You should centralize your access control logic - Nyehhh" src="/img/permissions-in-web-apps/comic-centralize-logic.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-implementing-access-control-in-practice">5. Implementing access control in practice<a class="hash-link" href="#5-implementing-access-control-in-practice" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Poll on how do people implement access control" src="/img/permissions-in-web-apps/access-control-poll.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Here’s a Reddit <a href="https://www.reddit.com/r/webdev/comments/vhaglx/what_do_you_use_for_access_control_permission/" target="_blank" rel="noopener noreferrer">poll I did on r/webdev</a>.<br>
<!-- -->An interesting finding is that even though the sample is pretty small, it is clear that devs prefer RBAC over OWASP-recommended ABAC.<br>
<!-- -->I believe this is due to 2 main reasons: RBAC is simpler + there are more libraries/frameworks out there supporting RBAC than ABAC (again, due to it being simpler).<br>
<!-- -->It does seem that ABAC is picking up recently though, so it would be interesting to repeat this poll in the future and see what changes.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="organic-development">Organic development<a class="hash-link" href="#organic-development" title="Direct link to heading">​</a></h3><div><p align="center"></p><figure><img alt="Organic growth of my code (meme)" src="/img/permissions-in-web-apps/organic-code-meme.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Often, we add permission checks to our web app one by one, as needed. For example, if we are using NodeJS with ExpressJS for our server and writing middleware that handles HTTP API requests, we will add a bit of logic into that middleware that does some checks to ensure a user can actually perform that action. Or maybe we will embed “checks” into our database queries so that we query only what the user is allowed to access. Often a combination.</p><p>What can be dangerous with such an organic approach is the complexity that arises as the codebase grows - if we don’t put enough effort into centralizing and structuring our access control logic, it can become very hard to reason about it and to do consistent updates to it, leading to mistakes and vulnerabilities.</p><p>Imagine having to modify the web app so that user can now only read their own articles and articles of their friends, while before they were allowed to read any article. If there is only one place where we can make this update, we will have a nice time, but if there are a bunch of places and we need to hunt those down first and then make sure they are all updated in the same way, we are in for a lot of trouble and lot of space to make mistakes.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-an-existing-solution">Using an existing solution<a class="hash-link" href="#using-an-existing-solution" title="Direct link to heading">​</a></h3><p>Instead of figuring out on our own how to structure the access control code, often it is a better choice to use an existing access control solution! Besides not having to figure and implement everything on your own, another big advantage is that these solutions are battle-tested, which is very important for the code dealing with the security of your web app.</p><p>We can roughly divide these solutions into frameworks and (external) providers, where frameworks are embedded into your web app and shipped together with it, while providers are externally hosted and usually paid services.</p><p>A couple of popular solutions:</p><ol><li><a href="https://casbin.org/" target="_blank" rel="noopener noreferrer">https://casbin.org/</a> (multiple approaches, multiple languages, provider)<ol><li>Open source authZ library that has support for many access control models (ACL, RBAC, ABAC, …) and many languages (Go, Java, Node.js, JS, Rust, …). While somewhat complex, it is also powerful and flexible. They also have their Casdoor platform, which is authN and authZ provider.</li></ol></li><li><a href="https://casl.js.org/v5/en/" target="_blank" rel="noopener noreferrer">https://casl.js.org/v5/en/</a> (ABAC, Javascript)<ol><li>Open source JS/TS library for ABAC. CASL gives you a nice way to define the ABAC rules in your web / NodeJS code, and then also check them and call them. It has a bunch of integrations with popular solutions like React, Angular, Prisma, Mongoose, … .</li></ol></li><li><a href="https://github.com/CanCanCommunity/cancancan" target="_blank" rel="noopener noreferrer">https://github.com/CanCanCommunity/cancancan</a> (Ruby on Rails ABAC)<ol><li>Same like casl.js, but for Ruby on Rails! Casl.js was actually inspired and modeled by cancancan.</li></ol></li><li><a href="https://github.com/varvet/pundit" target="_blank" rel="noopener noreferrer">https://github.com/varvet/pundit</a><ol><li>Popular open-source Ruby library focused around the notion of policies, giving you the freedom to implement your own approach based on that.</li></ol></li><li><a href="https://spring.io/projects/spring-security" target="_blank" rel="noopener noreferrer">https://spring.io/projects/spring-security</a> <ol><li>Open source authN and authZ framework for Spring (Java). </li></ol></li><li><a href="https://github.com/dfunckt/django-rules" target="_blank" rel="noopener noreferrer">https://github.com/dfunckt/django-rules</a><ol><li>A generic, approachable open source framework for building rule-based systems in Django (Python).</li></ol></li><li><a href="https://auth0.com/" target="_blank" rel="noopener noreferrer">Auth0</a> (provider)<ol><li>Auth0 has been around for some time and is probably the most popular authN provider out there. While authN is their main offering (they give you SDKs for authentication + they store user profiles and let you manage them through their SaaS), they also allow you to define authZ to some degree, via RBAC and policies.</li></ol></li><li><a href="https://www.osohq.com/" target="_blank" rel="noopener noreferrer">https://www.osohq.com/</a> (provider, DSL)<ol><li>OSO is an authZ provider, unique in a way that they have a specialized language for authorization (DSL, called Polar) in which you define your authorization rules. They come with support for common approaches (e.g. RBAC, ABAC, ReBAC) but also support custom ones. Then, you can use their open source library embedded in your application, or use their managed cloud offering.</li></ol></li><li><a href="https://warrant.dev/" target="_blank" rel="noopener noreferrer">https://warrant.dev/</a> (Provider)<ol><li>Relatively new authZ provider, they have a dashboard where you can manage your rules in a central location and then use them from multiple languages via their SDKs, even on the client to perform UI checks. Rules can also be managed programmatically via SDK.</li></ol></li><li><a href="https://authzed.com/" target="_blank" rel="noopener noreferrer">https://authzed.com/</a> (Provider)<ol><li>AuthZed brings a specialized SpiceDB permissions database which they use as a centralized place for storing and managing rules. Then, you can use their SDKs to query, store, and validate application permissions.</li></ol></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary-tldr">Summary (TLDR)<a class="hash-link" href="#summary-tldr" title="Direct link to heading">​</a></h2><ul><li><strong>Authentication</strong> (authN) answers “who are they”, <strong>authorization</strong> (authZ) answers “are they allowed to”, while <strong>access control</strong> is the overarching term for the whole process of performing authN and authZ.</li><li>Doing access control on the frontend is just for show (for improving UX) and you can’t rely on it. <strong>Any and all real access control needs to be done on the server</strong> (possibly a bit in the db, but normally not needed).</li><li>While it is ok to start with a simple access control approach at the beginning, you should be ready to switch to a more advanced approach once the complexity grows. The most popular approaches for doing access control are <strong>RBAC</strong> (role-based) and <strong>ABAC</strong> (attribute-based). RBAC is easier to get going with, but ABAC is more powerful.</li><li>You should make sure your access control has <strong>as little duplication as possible and is centralized</strong>, in order to reduce the chance of introducing bugs.</li><li>It is usually smart to <strong>use existing solutions</strong>, like access control frameworks or external providers.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="access-control-in-wasp">Access control in Wasp<a class="hash-link" href="#access-control-in-wasp" title="Direct link to heading">​</a></h2><p>In <a href="https://wasp-lang.dev" target="_blank" rel="noopener noreferrer">Wasp</a>, we don’t yet have special support for access control, although we are planning to add it in the future. As it seems at the moment, we will probably go for ABAC, and we would love to provide a way to define access rules both at the Operations level and at Entity (data model) level. Due to Wasp’s mission to provide a highly integrated full-stack experience, we are excited about the possibilities this offers to provide an access control solution that is integrated tightly with the whole web app, through the whole stack!</p><p>You can check out our discussion about this in our <a href="https://github.com/wasp-lang/wasp/issues/584" target="_blank" rel="noopener noreferrer">“Support for Permissions” RFC</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="thanks-to-the-reviewers">Thanks to the reviewers<a class="hash-link" href="#thanks-to-the-reviewers" title="Direct link to heading">​</a></h2><p><a href="https://twitter.com/karankajla" target="_blank" rel="noopener noreferrer">Karan Kajla</a> (pro advice on RBAC!), <a href="https://twitter.com/grahamneray" target="_blank" rel="noopener noreferrer">Graham Neray</a> (great general advice + pointed out ReBAC), <a href="https://twitter.com/lawjolla" target="_blank" rel="noopener noreferrer">Dennis Walsh</a> (awesome suggestions how to have article read better), <a href="https://github.com/shayneczyzewski" target="_blank" rel="noopener noreferrer">Shayne Czyzewski</a>, <a href="https://twitter.com/matijasosic" target="_blank" rel="noopener noreferrer">Matija Sosic</a>, thank you for taking the time to review this article and make it better! Your suggestions, corrections, and ideas were invaluable.</p>]]></content>
        <author>
            <name>Martin Sosic</name>
            <uri>https://github.com/martinsos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Feature Announcement - TypeScript Support]]></title>
        <id>/2022/11/29/typescript-feature-announcement</id>
        <link href="https://wasp-lang.dev/blog/2022/11/29/typescript-feature-announcement"/>
        <updated>2022-11-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<ImgWithCaption]]></summary>
        <content type="html"><![CDATA[<div><p align="center"></p><figure><img alt="Wasp TS support" src="/img/wasp-ts-banner.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="prologue">Prologue<a class="hash-link" href="#prologue" title="Direct link to heading">​</a></h2><p>TypeScript doesn't need much introduction at this point, so we'll keep it short!
Wasp finally allows you to write your code in TypeScript (i.e., the most popular web technology after JavaScript) on both the front-end and the back-end.</p><p>You can now define and use types in any part of your code, enjoying all benefits of the static type checker. At the time of writing, not all parts of Wasp are typed as well as they could be, but we're working on it!
Exposing all Wasp functionalities through informative typed interfaces is one of our top priorities.</p><p>Without further ado, let's see how we can use TypeScript with Wasp.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="setting-up-a-typescript-project-in-wasp">Setting up a TypeScript project in Wasp<a class="hash-link" href="#setting-up-a-typescript-project-in-wasp" title="Direct link to heading">​</a></h2><p>Let's start by creating a fresh Wasp project:</p><div class="language-bash codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-bash codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">wasp new ts-project</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This will generate a project skeleton in the folder <code>ts-project</code>. The project structure is different than before, and there are now several additional generated files that help with IDE and TypeScript support. So let's explain it:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">├── .gitignore</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">├── main.wasp             # Your wasp code goes here.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">├── src</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; ├── client            # Your client code (JS/CSS/HTML) goes here.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── Main.css</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── MainPage.jsx</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── react-app-env.d.ts</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; ├── tsconfig.json</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; └── waspLogo.png</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; ├── server            # Your server code (Node JS) goes here.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; └── tsconfig.json</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; ├── shared            # Your shared (runtime independent) code goes here.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; │&nbsp;&nbsp; └── tsconfig.json</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">│&nbsp;&nbsp; └── .waspignore</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">└── .wasproot</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>At this point, we can chose one of three options:</p><ol><li>We write our code exclusively in JavaScript.</li><li>We write our code exclusively in TypeScript.</li><li>We write some parts of our code in JavaScript, and other parts in TypeScript.</li></ol><p>Since the third option is a superset of the first two, that's what Wasp currently supports. In other words, regardless of whether you want your entire codebase in one of these languages or you want to mix it up, there's no extra configuration necessary!
Simply use the appropriate extension (<code>.ts</code> and <code>.tsx</code> for TypeScript; <code>.js</code> and <code>.jsx</code> for JavaScript), and your IDE and Wasp will know what to do.</p><p>To demonstrate this, let's start Wasp and change <code>MainPage.jsx</code> to <code>MainPage.tsx</code>:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">wasp start</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">mv src/client/MainPage.jsx src/client/MainPage.tsx</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>That's it! Wasp will notice the change and recompile, and your app will continue to work. The only difference is that you can now write TypeScript in <code>MainPage.tsx</code> and get helpful information from your IDE and the static type checker. Try removing an import and see what happens.</p><p>The same applies to any file you may want to include in your project. Specify the language you wish to use via the extension, and Wasp will do the rest!</p><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_S0QG"><p>Even if you use TypeScript and have a <em>server</em> file called <code>someFile.ts</code>, you must still import it as if it had the <code>.js</code> extension (i.e., <code>import foo from 'someFile.js'</code>). Wasp internally uses <code>esnext</code> module resolution, which always requires specifying the extension as <code>.js</code> (i.e., the extension used in the emitted JS file). This applies to all <code>@server</code> imports (and files on the server in general).</p><p>Read more about ES modules in TypeScript <a href="https://www.typescriptlang.org/docs/handbook/esm-node.html" target="_blank" rel="noopener noreferrer">here</a>. If you're interested in the discussion and the reasoning behind this, read about it <a href="https://github.com/microsoft/TypeScript/issues/33588" target="_blank" rel="noopener noreferrer">in this GitHub issue</a>.</p><p>This does not apply to front-end files. Thanks to Webpack, you don't need to write extensions when working with client-side imports.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="moving-existing-projects-to-the-new-structure-and-optionally-typescript">Moving existing projects to the new structure (and optionally TypeScript)<a class="hash-link" href="#moving-existing-projects-to-the-new-structure-and-optionally-typescript" title="Direct link to heading">​</a></h2><p>If you wish to move an existing project to the new structure, the easiest approach comes down to creating a new project and moving all the files from your old project into appropriate locations. After doing this, you can choose which files you'd like to implement in TypeScript, change the extension and go for it.</p><p>To avoid digging too deep, this is all we'll say about migrating. For a more detailed migration guide, check <a href="https://github.com/wasp-lang/wasp/releases/tag/v0.7.0" target="_blank" rel="noopener noreferrer">our changelog</a>. It explains everything step-by-step.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="typescript-in-action">TypeScript in action<a class="hash-link" href="#typescript-in-action" title="Direct link to heading">​</a></h2><p>Finally, let's demonstrate how TypeScript helps us by using it in a small Todo app. The part of our code in charge of rendering tasks looks something like this:</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(130, 170, 255)">MainPage</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> tasks </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useQuery</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">getTasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">h1</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Todos</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">h1</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">TaskList</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">tasks</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">tasks</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(130, 170, 255)">TaskList</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token parameter"> tasks </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">tasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">len</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">No tasks</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">tasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">task</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> idx</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Task</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag spread punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token tag spread" style="color:rgb(255, 85, 114)">task</span><span class="token tag spread punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">key</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">idx</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function maybe-class-name" style="color:rgb(130, 170, 255)">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token parameter"> id</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> isdone</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> description </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">label</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">input</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">'</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">checkbox</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">'</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">checked</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">isdone</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onChange</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">            </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript parameter" style="color:rgb(255, 85, 114)">event</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">updateTask</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript literal-property property" style="color:rgb(255, 85, 114)">isDone</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> event</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">target</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">checked</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">description</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">label</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Try to see if you can find any bugs. When you're confident you've got all of them, continue reading.</p><p>Let's see what happens when we bring TypeScript into the picture. Remember, we only need to change the extension to <code>tsx</code>. After we do this, The IDE will warn us about missing type definitions, so let's fill these in. While we're at it, we can also tell <code>useQuery</code> what types it's working with by specifying its type arguments.</p><p>Here's how our code looks after these changes:</p><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">type</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Task</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">  id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">  description</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">  isDone</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">boolean</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">MainPage</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> tasks </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:rgb(130, 170, 255)">useQuery</span><span class="token generic-function generic class-name operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(255, 203, 107)">Task</span><span class="token generic-function generic class-name punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token generic-function generic class-name" style="color:rgb(255, 203, 107)"> Task</span><span class="token generic-function generic class-name punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token generic-function generic class-name punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token generic-function generic class-name operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">getTasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">h1</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Todos</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">h1</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">TaskList</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">tasks</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">tasks</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">TaskList</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> tasks </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> tasks</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">tasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">len</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">No tasks</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">tasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> idx</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Task</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag spread punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token tag spread" style="color:rgb(255, 85, 114)">task</span><span class="token tag spread punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">key</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">idx</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> isdone</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> description </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">label</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">input</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">'</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">checkbox</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">'</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">checked</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">isdone</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onChange</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">            </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">event</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">updateTask</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> isDone</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> event</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">target</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">checked</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">description</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">label</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>As soon as we change our code, TypeScript detects three errors:</p><div><p align="center"></p><figure><img alt="TypeScript erros" src="/img/typescript-errors.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">The errors are pretty simple (almost as if we've made them up for this example :)</figcaption></figure><p></p></div><ol><li>The first error warns us that <code>tasks</code> might be <code>undefined</code> (e.g., on the first render), which <code>TaskList</code> does not expect</li><li>The second error tells us that the property <code>len</code> does not exist on the array <code>tasks</code>. In other words, we misspelled <code>length</code>.</li><li>Finally, the third error tells us that the type <code>Task</code> does not contain the field <code>isdone</code>. This is also a typo. The field's name should be <code>isDone</code>.</li></ol><p>Thanks to TypeScript, we can quickly fix all three errors, saving us a lot of time we'd probably lose by hunting them down manually or, even worse, during runtime.</p><div class="language-tsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-tsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">type</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Task</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  description</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">string</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  isDone</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">boolean</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">MainPage</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> tasks </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token generic-function function" style="color:rgb(130, 170, 255)">useQuery</span><span class="token generic-function generic class-name operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token generic-function generic class-name" style="color:rgb(255, 203, 107)">Task</span><span class="token generic-function generic class-name punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token generic-function generic class-name" style="color:rgb(255, 203, 107)"> Task</span><span class="token generic-function generic class-name punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token generic-function generic class-name punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token generic-function generic class-name operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">getTasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">h1</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">Todos</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">h1</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">tasks </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;&amp;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">TaskList</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">tasks</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">tasks</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">TaskList</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> tasks </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> tasks</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">tasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">No tasks</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">tasks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> idx</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Task</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag spread punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token tag spread" style="color:rgb(255, 85, 114)">task</span><span class="token tag spread punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">key</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">idx</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> isDone</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> description </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">Task</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">label</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">input</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">type</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">'</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">checkbox</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">'</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">id</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">checked</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">isDone</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">          </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">onChange</span><span class="token tag script language-javascript script-punctuation punctuation" style="color:rgb(199, 146, 234)">=</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">            </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">event</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript function" style="color:rgb(130, 170, 255)">updateTask</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> id</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> isDone</span><span class="token tag script language-javascript operator" style="color:rgb(137, 221, 255)">:</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> event</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">target</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token tag script language-javascript property-access" style="color:rgb(255, 85, 114)">checked</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"> </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag script language-javascript" style="color:rgb(255, 85, 114)">          </span><span class="token tag script language-javascript punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag" style="color:rgb(255, 85, 114)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token tag" style="color:rgb(255, 85, 114)">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">description</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">span</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">label</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And that's it! This is the joy of TypeScript. We've easily fixed all reported errors, and our code should now work correctly (well, at least less incorrectly).</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="future-work">Future work<a class="hash-link" href="#future-work" title="Direct link to heading">​</a></h2><p>You might have noticed that, if we want to use the <code>Task</code> type, we have to write most of its type definition twice - once when defining the <code>Task</code> entity in the <code>.wasp</code> file and then again in our code. While we can define the type in <code>src/shared</code> to avoid writing (almost) the same code on both the server and the client, we'll still have duplication between the code in <code>src/shared</code> and our <code>.wasp</code> file.</p><p>The good news is that we know about this, also find it annoying, and are working to fix it as soon as possible! In the near future, Wasp will generate types from entities and allow you to access them using <code>@wasp</code> imports. Other improvements exist, too. For example, Wasp could read your query declarations and provide you with the correct type for the <code>context</code> object in their definitions. Another possible improvement is automatically typing queries on the front-end, and then relying on type inference to correctly type <code>useQuery</code> (instead of users specifying its type arguments explicitly).</p><p>In short, there's a long and exciting path ahead of us, full of interesting possibilities. So stick with Wasp and see how far we can make it!</p>]]></content>
        <author>
            <name>Filip Sodić</name>
            <uri>https://github.com/sodic</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="feature" term="feature"/>
        <category label="typescript" term="typescript"/>
        <category label="javascript" term="javascript"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wasp is in Beta: Auth, TypeScript, Tailwind, LSP]]></title>
        <id>/2022/11/29/wasp-beta</id>
        <link href="https://wasp-lang.dev/blog/2022/11/29/wasp-beta"/>
        <updated>2022-11-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Wasp is a simple configuration language for building full-stack web apps with less code and ensured best practices. It integrates with React, Node.js and Prisma and provides a lot of common features (auth, CRUD, async jobs, ...) out of the box.]]></summary>
        <content type="html"><![CDATA[<p>Wasp is a simple configuration language for building full-stack web apps with less code and ensured best practices. It integrates with React, Node.js and Prisma and provides a lot of common features (auth, CRUD, async jobs, ...) out of the box.</p><p>Today, we’re moving to Beta.</p><p>Since the <a href="https://news.ycombinator.com/item?id=26091956" target="_blank" rel="noopener noreferrer">launch of Wasp Alpha</a> in February 2021, we’ve been fortunate to work with hundreds of early adopters who helped us shape the product and <a href="/blog/2022/11/16/alpha-testing-program-post-mortem#the-feedback">prioritise the features</a> to build. Number of applications have been deployed to production and even the first <a href="/blog/2022/11/26/erlis-amicus-usecase">revenue generating product</a> was built on top of Wasp.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="alpha-in-numbers">Alpha in numbers<a class="hash-link" href="#alpha-in-numbers" title="Direct link to heading">​</a></h3><ul><li>1,011 projects created</li><li>2,012 GitHub stars</li><li>45 GitHub contributors</li><li>243 issues closed</li><li>42,170 lines of code</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="featured-applications-built-with-wasp">Featured applications built with Wasp<a class="hash-link" href="#featured-applications-built-with-wasp" title="Direct link to heading">​</a></h3><ul><li><a href="/blog/2022/11/26/michael-curry-usecase">Grabbit: internal tool for managing dev environments at StudentBeans</a></li><li><a href="/blog/2022/10/28/farnance-hackathon-winner">Farnance: SaaS for farmers, a HackLBS 2021 winner</a></li><li><a href="/blog/2022/11/26/erlis-amicus-usecase">Amicus: Planning and workflow tracking for legal teams</a></li></ul><p>Here are the the new features that ship with Beta:</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="typescript-support">🟦&nbsp;TypeScript support<a class="hash-link" href="#typescript-support" title="Direct link to heading">​</a></h3><p>Developers can now write all their code in TypeScript both on client and server. We’re also in the process of migrating our codebase and adding new types to Wasp imports every day.</p><p><a href="/blog/2022/11/29/typescript-feature-announcement">Learn more here →</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="full-stack-authentication">🔑&nbsp;Full-stack authentication<a class="hash-link" href="#full-stack-authentication" title="Direct link to heading">​</a></h3><p>Besides username &amp; password, Wasp now also supports authentication with Google. We offer both UI helpers (forms you can just import) and functions you can call from client or server if you need more control.</p><p><a href="/blog/2022/11/15/auth-feature-announcement">Learn more here →</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tailwind-support">💨&nbsp;Tailwind support<a class="hash-link" href="#tailwind-support" title="Direct link to heading">​</a></h3><p>Tailwind CSS framework is now supported in Wasp. Just add two files to the project and you’re ready to go!</p><p><a href="/blog/2022/11/16/tailwind-feature-announcement">Learn more here →</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="async-jobsworkers">⏳&nbsp;Async jobs/workers<a class="hash-link" href="#async-jobsworkers" title="Direct link to heading">​</a></h3><p>Developers can run one-time or schedule repeating functions that run out of the regular request-response band. This is useful for e.g. sending emails, crunching data, generating reports and other resources intensive tasks. Powered by pg-boss, zero setup required.</p><p><a href="/blog/2022/06/15/jobs-feature-announcement">Learn more here →</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-optimistic-updates-support">🥛 Optimistic updates support<a class="hash-link" href="#-optimistic-updates-support" title="Direct link to heading">​</a></h3><p>Wasp will by default propagate your data model changes across the stack. Still, <a href="https://wasp-lang.dev/blog/2021/12/02/waspello#what-doesnt-work-yet" target="_blank" rel="noopener noreferrer">in some cases</a>
you might want more control over that flow for the sake of smoother UX - that is now easy to achieve with Wasp.</p><p><a href="/blog/2022/11/30/optimistic-update-feature-announcement">Learn more here →</a></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-wasp-language-server">📟 Wasp Language Server<a class="hash-link" href="#-wasp-language-server" title="Direct link to heading">​</a></h3><p>Wasp now has its own LSP for VS Code (other editors coming soon) - that means improved syntax highlighting, code snippets, autocompletion, and error reporting.</p><p><a href="/blog/2022/12/01/beta-ide-improvements">Learn more here →</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-next">What’s next?<a class="hash-link" href="#whats-next" title="Direct link to heading">​</a></h2><p>The next features are going to be about making Wasp easier to use - more examples, starter templates and UI helpers. Longer term, we’ll look into deeper integration of data models throughout the stack and supporting more functionalities through the DSL.</p><p>It’s <a href="/blog/2022/11/29/blog/2022/11/26/wasp-beta-launch-week">Beta Launch Week</a> and we’re highlighting a new feature every week. Also, at the end of the week we’ll kick-off first Wasp hackathon! Signup <a href="/#signup">here</a> to stay in the loop.</p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="startups" term="startups"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Why we chose Prisma as a database layer for Wasp]]></title>
        <id>/2022/11/28/why-we-chose-prisma</id>
        <link href="https://wasp-lang.dev/blog/2022/11/28/why-we-chose-prisma"/>
        <updated>2022-11-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<ImgWithCaption]]></summary>
        <content type="html"><![CDATA[<div><p align="center"></p><figure><img alt="Beta is coming" src="/img/why-we-chose-prisma/wasp-loves-prisma.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Wasp is a full-stack JS web dev framework, covering frontend, backend, and database. When choosing the solution to build our database layer on top, we chose Prisma, even though it was still somehwat new tech at that point, and we believe today we made a great choice -&gt; read on to learn why!</p><p>At Wasp, <a href="/docs/vision">we aim</a> to simplify full-stack web development via a specialized high-level language. This language allows you to describe the main parts of your web app succinctly, avoiding a lot of usual boilerplate and configuration while giving you lots of features and ensuring best practices. Wasp is essentially a full-stack web framework implemented as a specialized language that works with React &amp; Node.js!</p><p>When we started working on Wasp, we wanted to keep it easy to learn and to the point, so we decided:</p><ul><li>the Wasp language should only be used at a high level, so you would still use React, NodeJS, HTML, CSS, etc. to implement your custom logic. If a full-stack web app is an orchestra, Wasp is the conductor.</li><li>the Wasp language should be declarative and simple, very similar to JSON, but “smarter” in the sense it understands web app concepts and makes sure your app follows them.</li></ul><p>With that in mind, we focused on identifying high-level web app concepts that are worth capturing in the Wasp language. We identified the following parts of a web app:</p><ul><li>General app info (title, head, favicon, …)</li><li>Pages and Routes</li><li>Data Models (aka Entities), e.g. User, Task, Organization, Article, … .</li><li>Operations (communication between client and server; CRUD on data models, 3rd party APIs, …)</li><li>Deployment</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="entities">Entities<a class="hash-link" href="#entities" title="Direct link to heading">​</a></h2><p>Of all of those, Entities are in the middle of everything, present through the whole codebase, and are central to all the other parts of the web app: client, server, and database. They were, however, also the most daunting part to implement!</p><p>When we started, we imagined an Entity would look something like this in Wasp:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">entity User {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  id: Id,</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  username: String @unique,</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  email: String @unique</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  groups: [Group]</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>While adding this initial syntax to our language was feasible, there were also much bigger tasks to tackle in order to make this a proper solution:</p><ul><li>expand syntax to be flexible enough for real-life use cases</li><li>support migrations (data and schema)</li><li>generate code that users can call from JS/TS to query and update entities in the DB</li><li>and probably a lot of other things that we hadn’t even thought of yet!</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="mongoose-sequelize--or-prisma">Mongoose, Sequelize, … or Prisma?<a class="hash-link" href="#mongoose-sequelize--or-prisma" title="Direct link to heading">​</a></h2><p>We already decided that we would pick an ORM(ish) solution for JS/TS which we would build the rest of the features on top of. We started evaluating different ones: Mongoose, Sequelize, TypeORM, … .</p><p>But then we looked at Prisma, and the winner was clear! Not only was Prisma taking care of everything that we cared about, but it had one additional feature that made it a perfect fit:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">model User {</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  id          Int     @id @default(autoincrement())</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  username    String  @unique</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  password    String</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>No, this is not another idea of how the syntax for Entities could look like in Wasp language → this is the Prisma Schema Language (PSL)!!!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="prisma-schema-language-psl">Prisma Schema Language (PSL)<a class="hash-link" href="#prisma-schema-language-psl" title="Direct link to heading">​</a></h2><p>Indeed, Prisma is unique in having a special, declarative language for describing data models (schema), and it was exactly what we needed for Wasp.</p><p>So instead of implementing our own syntax for describing Entities, we decided to use Prisma and their PSL to describe Entities (data models) inside the Wasp language.</p><p>Today, Entities are described like this in Wasp language:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">... some Wasp code ...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">entity User {=psl</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  id          Int     @id @default(autoincrement())</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  username    String  @unique</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  password    String</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">psl=} </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">... some Wasp code ...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>So in the middle of Wasp, you just switch to writing PSL (Prisma Schema Language) to describe an entity!</p><p>Another great thing is that the PSL is at its core a pretty simple language, so we <a href="https://github.com/wasp-lang/wasp/blob/main/waspc/src/Wasp/Psl/Parser/Model.hs" target="_blank" rel="noopener noreferrer">implemented our own parser</a> for it → that means that Wasp actually understands what you wrote, even though it is PSL, and can fully work with it. So we lost nothing by using PSL instead of our own syntax and instead gained all the features that Prisma brings.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="other-benefits">Other Benefits<a class="hash-link" href="#other-benefits" title="Direct link to heading">​</a></h2><p>Besides PSL, there were plenty of other reasons why we felt Prisma is a great fit for us:</p><ul><li>It is targeting Javascript / Typescript.</li><li>It takes care of migrations and has a nice workflow for doing it.</li><li>It supports different databases: Mongo, PostgreSQL, CockroachDB, …, which is very important for Wasp since our vision is to support different stacks in the future.</li><li>It has Prisma Studio - UI for inspecting your database, which we also make available to you via Wasp CLI.</li><li>It keeps improving quickly and is very focused on a nice developer experience, which is also our focus here at Wasp.</li><li>Community is extremely welcoming and the core team is super helpful - all of our questions and issues were answered super quickly!</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="challenges">Challenges<a class="hash-link" href="#challenges" title="Direct link to heading">​</a></h2><p>While integrating Prisma into Wasp went really smoothly, there were a few hiccups:</p><ul><li>Getting Prisma CLI to provide interactive output while being called programmatically by Wasp was tricky, and in the end, we had to use a bit of a dirty approach to trick the Prisma CLI into thinking it is called interactively. We opened an issue for this with Prisma, so hopefully, we will be able to remove this once it is resolved: <a href="https://github.com/prisma/prisma/issues/7113" target="_blank" rel="noopener noreferrer">https://github.com/prisma/prisma/issues/7113</a>.</li><li>In the early days, there were some bugs, however, they were always quickly solved, so updating to the newest Prisma version was often the solution.</li><li>It took us a bit of fiddling to get Prisma to work with its schema outside of the server’s root directory, but we did get it working in the end!</li></ul><p>Most of these were due to us stretching the boundaries of how Prisma was imagined to be used, but in total Prisma proved to be fairly flexible!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary">Summary<a class="hash-link" href="#summary" title="Direct link to heading">​</a></h2><p>With its declarative language for describing schema, focus on ergonomics, and JS/TS as the target language, Prisma was really a stroke of luck for us - if not for it, it would have taken much more effort to get the Entities working in Wasp.</p><p>When we started using it, Prisma was still somewhat early, and it was certainly the least-mature technology in our stack - but we decided to bet on it because it was just a perfect fit, and it made so much sense. Today, with Prisma being a mature and popular solution, we are more than happy we made that choice!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="future">Future<a class="hash-link" href="#future" title="Direct link to heading">​</a></h2><p>Already, Prisma is playing a big role at Wasp, but there is still more that we plan and want to do:</p><ul><li>support Prisma’s Enum and Type declarations</li><li>expose more of Prisma’s CLI commands, especially database seeding</li><li>add support in Wasp for multiple databases (which Prisma already supports)</li><li>improve IDE support for PSL within the Wasp language</li></ul><p>If you are interested in helping with any of these, reach out to us on this issue <a href="https://github.com/wasp-lang/wasp/issues/641" target="_blank" rel="noopener noreferrer">https://github.com/wasp-lang/wasp/issues/641</a>, or in any case, join us on our <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">Discord server</a>!</p>]]></content>
        <author>
            <name>Martin Sosic</name>
            <uri>https://github.com/martinsos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="prisma" term="prisma"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Amicus: See how Erlis built a SaaS for legal teams with Wasp and got first paying customers!]]></title>
        <id>/2022/11/26/erlis-amicus-usecase</id>
        <link href="https://wasp-lang.dev/blog/2022/11/26/erlis-amicus-usecase"/>
        <updated>2022-11-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[amicus hero shot]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="amicus hero shot" src="/assets/images/amicus-hero-shot-5fa944706f38333bf0f22a6784b7fd2b.png" width="1920" height="1705" class="img_ev3q"></p><p><a href="https://github.com/ErlisK" target="_blank" rel="noopener noreferrer">Erlis Kllogjri</a> is an engineer based in San Francisco with broad experience ranging from mechanical engineering and C/C++ microcontroller programming to Python and web app development. In his free time, Erlis enjoys working on side projects, which is also how <a href="https://www.amicus.work/" target="_blank" rel="noopener noreferrer">Amicus</a> started out.</p><p><a href="https://www.amicus.work/" target="_blank" rel="noopener noreferrer">Amicus</a> is a SaaS for legal teams - think about it as "Asana for lawyers", but with features and workflows tailored to the domain of law.</p><p>Read on to learn how long it took Erlis to develop the first version of his SaaS with Wasp, how he got his first paying customers, and what features he plans to add next!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="looking-for-a-full-stack-all-in-one-solution-with-react--nodejs">Looking for a full-stack “all-in-one” solution, with React &amp; Node.js<a class="hash-link" href="#looking-for-a-full-stack-all-in-one-solution-with-react--nodejs" title="Direct link to heading">​</a></h2><p>Erlis first learned about Wasp on HackerNews and it immediately caught his attention, particularly the configuration language part. One of the companies he worked at in the past had its own internal DSL in the hardware domain, and he understood how helpful it could be for moving fast and avoiding boilerplate.</p><p>Erlis also had previous experience in web development, especially on the front-end side in React and Javascript, so that made Wasp a logical choice.</p><blockquote><p>I was looking at other solutions, but none of them were full-stack and sounded like a lot of work just to stitch everything together and get started. I just wanted to get the job done and didn’t care about picking the stack specifics myself. Wasp was really helpful as it set me up with the best practices and I had everything running in just a few minutes!</p><p>— Erlis Kllogjri - Amicus</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-amicus-v10-and-getting-first-customers">Building Amicus v1.0 and getting first customers!<a class="hash-link" href="#building-amicus-v10-and-getting-first-customers" title="Direct link to heading">​</a></h2><p>The idea for Amicus came from his brother, who is employed at a law firm - talking about their process and challenges in executing them, Erlis thought it would be an interesting side project, especially given there is a real problem to solve.</p><p>Soon, the first version of Amicus was live! It was made in a true lean startup fashion, starting with the essential features and immediately being tested with users.</p><div><p align="center"></p><figure><img alt="Amicus's dashboard" src="/img/amicus-usecase/amicus-dashboard.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Amicus's dashboard, using Material-UI</figcaption></figure><p></p></div><p>Erlis used Material-UI as a UI library since it came with one of the example apps built in Wasp (Beta introduced Tailwind support!). Users could track their clients, active legal matters and there was even integrated billing with Stripe! Amicus also extensively used Wasp’s <a href="https://wasp-lang.dev/blog/2022/06/15/jobs-feature-announcement" target="_blank" rel="noopener noreferrer">Async Jobs</a> feature to regularly update invoices, send reminder emails and clear out old data from the database.</p><p>After a few iterations with the legal team who were Amicus' test user (e.g. adding support for different types of users via roles), they were ready to get onboarded and become paying customers! More than 20 people from a single company are using Amicus daily for their work, making it an amazing source of continuous feedback for further development.</p><p>Erlis enjoyed the most how fast he could progress and ship features with Wasp on a weekly basis. Having both front-end, back-end, and database set and fully configured to work together from the beginning, he could focus on developing features rather than spend time figuring out the intricacies of the specific stack.</p><blockquote><p>If it weren't for Wasp, Amicus would probably have never been finished. I estimate it saved me 100+ hours from the start and I'm still amazed that I did all this work as a team-of-one. Being able to quickly change existing features and add the new ones is the biggest advantage of Wasp for me.</p><p>— Erlis Kllogjri - Amicus</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="beyond-mvp-with-wasp">Beyond MVP with Wasp<a class="hash-link" href="#beyond-mvp-with-wasp" title="Direct link to heading">​</a></h2><p>Although Erlis already has a product running in production, with first paying customers, he wants to see how far he can take it and has a lot of ideas (also requests) for the next features. <em>(Actually, Erlis had a big kanban board with post-its on a wall behind him as we were chatting, dedicated just to Amicus - that was impressive to see!)</em>. </p><p>Some of the most imminent ones are:</p><ul><li>uploading and sharing files between lawyers and clients</li><li>usage logging and analytics</li><li>transactional emails for notifications</li></ul><p>Since under the hood Wasp is generating code in today's mainstream, production-tested technologies such as React, Node.js and PostgreSQL (through Prisma), there aren't any technical limitations to scaling Amicus as it grows and attracts more users.</p><p>Also, given that the <code>wasp build</code> CLI command generates a ready Docker image for the back-end (and static files for the front-end), deployment options are unlimited. Since Heroku is shutting down its free plan, we added guides on how to deploy your project for free on <a href="http://Fly.io" target="_blank" rel="noopener noreferrer">Fly.io</a> and Railway (freemium).</p><blockquote><p>I was using Wasp while still in Alpha and was impressed how well everything worked, especially given how much stuff I get. I had just a few minor issues and the team responded super quickly on Discord and helped me resolve it.</p><p>— Erlis Kllogjri - Amicus</p></blockquote>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="startups" term="startups"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How Michael Curry chose Wasp to build Grabbit: an internal tool for managing dev resources at StudentBeans]]></title>
        <id>/2022/11/26/michael-curry-usecase</id>
        <link href="https://wasp-lang.dev/blog/2022/11/26/michael-curry-usecase"/>
        <updated>2022-11-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[grabbit hero shot]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="grabbit hero shot" src="/assets/images/grabbit-hero-shot-cf6ee29a431f48a29beb295252838294.png" width="859" height="504" class="img_ev3q"></p><p><a href="https://github.com/cursorial" target="_blank" rel="noopener noreferrer">Michael Curry</a> is a senior front-end engineer at <a href="https://www.improbable.io/" target="_blank" rel="noopener noreferrer">Improbable</a>, a metaverse and simulation company based in London. In his free time he enjoys learning about compilers.</p><p>In his previous position at StudentBeans, he experienced the problem of multiple engineering teams competing for the same dev environment (e.g. testing, staging, …). Then he discovered Wasp and decided to do something about it!</p><p>Read on to learn why Michael chose Wasp to build and deploy an internal tool for managing development environments at StudentBeans.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-problem-the-battle-for-the-dev-environment">The problem: the battle for the dev environment<a class="hash-link" href="#the-problem-the-battle-for-the-dev-environment" title="Direct link to heading">​</a></h2><p>StudentBeans has a microservices-based architecture with multiple environments - test, staging, production, …. The team practices CI/CD and deploys multiple times a day. With such a rapid development speed, it would relatively often happen that multiple engineering teams attempt to claim the same dev environment at the same time. </p><p>There wasn't an easy way for teams to synchronize on who is using which environment and it would eventually lead to unexpected changes, confusion, and prolonged development times.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-solution-grabbit---claim-and-release-dev-environments-as-you-go">The solution: Grabbit - claim and release dev environments as-you-go<a class="hash-link" href="#the-solution-grabbit---claim-and-release-dev-environments-as-you-go" title="Direct link to heading">​</a></h2><p>After the incident described above repeated for the n-th time, the team got together for a postmortem. They decided their new development process should look like this:</p><ul><li>merge your changes</li><li>claim the environment you want to deploy to (e.g. testing, staging, …)</li><li>deploy your changes</li><li>test your changes</li><li>release the environment once you are done with it so others are able to claim it</li></ul><p>The other requirements were to build the solution in-house to save money and also not to spend more than a few hours on it as they still needed to deliver some important features for the ongoing sprint.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-power-of-rapid-prototyping-with-wasp">The power of rapid prototyping with Wasp<a class="hash-link" href="#the-power-of-rapid-prototyping-with-wasp" title="Direct link to heading">​</a></h2><p>Michael learned about Wasp during its <a href="https://news.ycombinator.com/item?id=26091956" target="_blank" rel="noopener noreferrer">first HackerNews launch</a> and it immediately caught his eye. Being a programming language enthusiast himself, he immediately understood the value of a DSL approach and how it could drastically simplify the development process, while at the same time not preventing him from using his preferred tech stack (React, Node.js) when needed.</p><p>Also, although Michael had full-stack experience, his primary strength at the time was on the front-end side. Wasp looked like a great way of not having to deal with the tedious back-end setup and wiring (setting up the database, figuring out API, …) and being able to focus on the UX.</p><blockquote><p>When I first learned about Wasp on HN I was really excited about its DSL approach. It was amazing how fast I could get things running with Wasp - I had the first version within an hour! The language is also fairly simple and straightforward and plays well with React &amp; Node.js + it removes a ton of boilerplate.</p><p>— Michael Curry - Grabbit</p></blockquote><h2 class="anchor anchorWithStickyNavbar_LWe7" id="out-of-the-box-deployment">Out-of-the-box deployment<a class="hash-link" href="#out-of-the-box-deployment" title="Direct link to heading">​</a></h2><p>Once Michael was satisfied with the first version of Grabbit, and confirmed with the team it fits their desired process, the only thing left to do was to deploy it! It is well known this step can get really complicated, especially if you're not yet well-versed in the sea of config options that usually come with it.</p><p>Wasp CLI comes with a <code>wasp build</code> command that does all the heavy lifting for you - it creates a directory with static front-end files that you can easily deploy to e.g. Netlify, and on the other hand, a Docker image for the back-end. Since Heroku is ending its free plan, our recommendation is to deploy to Fly.io, for which the detailed guide is provided. You can find the <a href="https://wasp-lang.dev/docs/deploying" target="_blank" rel="noopener noreferrer">detailed deployment instructions here</a>.</p><p>In Michael's case, he deployed Grabbit behind the VPN since it was an internal tool, and this process was made easy by having a ready-to-go Dockerfile.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="from-mvp-to-a-full-fledged-saas-without-a-rewrite">From MVP to a full-fledged SaaS without a rewrite<a class="hash-link" href="#from-mvp-to-a-full-fledged-saas-without-a-rewrite" title="Direct link to heading">​</a></h2><p>The presented functionality of Grabbit above is quite simple (create a resource → claim it → release it), and it could have easily been implemented in some no-code tool or, if we really wanted to go simple, with a Trello board. So why use Wasp at all?</p><p>One reason is that developers know and prefer their tools and trust code over the no-code solutions, especially when requirements are still evolving and it is not evident they won't get "stuck" in some closed system. Michael had similar thinking - as he identified this problem at his own company, he realized others must be facing the same issue as well. That is why his plan was to keep improving Grabbit and eventually offer it as a standalone SaaS.</p><p>This is where Wasp comes in - he could develop and deploy an initial version of Grabbit in a matter of hours, but still end up with a platform that he can extend indefinitely through the power of code with his stack of choice, React &amp; Node.js, while also using the npm packages he is using everyday at work.</p><p>Once he starts adding more advanced features, such as multi-user support with authentication, email notifications, and integration with CI/CD, no-code tools won't cut it any more. This way he saved himself and the company from throwing an MVP away and starting everything from scratch (having to learn the new technology and figure out how to set it all up) as the product evolves.</p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="startups" term="startups"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wasp Beta Launch Week announcement]]></title>
        <id>/2022/11/26/wasp-beta-launch-week</id>
        <link href="https://wasp-lang.dev/blog/2022/11/26/wasp-beta-launch-week"/>
        <updated>2022-11-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[It’s almost here! After almost two years since our Alpha release, countless apps developed, React and Node versions upgraded, and PRs merged we’re only a day away from Beta!]]></summary>
        <content type="html"><![CDATA[<p>It’s almost here! After almost two years since our Alpha release, countless apps developed, React and Node versions upgraded, and PRs merged <strong>we’re only a day away from Beta!</strong></p><div><p align="center"></p><figure><img alt="Beta is coming" src="/img/beta-ann/beta-banner.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We’re going to follow a launch week format, <strong>which means our Beta launch will last for the whole week</strong>! Starting with the Product Hunt launch this Sunday (we’ll let you know once we’re live, so sharpen your upvoting fingers!) <strong>we’ll highlight a new feature every day</strong>.</p><p>I’ll try not to spoil too much in advance but we’re really excited about this - here follows a quick overview of what it’s gonna look like:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="sunday-nov-27---product-hunt-launch-event---lets-get-this-party-started-auth-">Sunday, Nov 27 - Product Hunt launch event 🚀 + let’s get this party started: <strong>Auth</strong> 🎉<a class="hash-link" href="#sunday-nov-27---product-hunt-launch-event---lets-get-this-party-started-auth-" title="Direct link to heading">​</a></h2><p>Besides defending our Product Hunt title (we won <a href="https://www.producthunt.com/products/wasp-lang-alpha#wasp-lang-alpha" target="_blank" rel="noopener noreferrer">#1 Product of the Day</a> last time), this time we’ll also have an online party for all of us to celebrate together!</p><p>It will be held <strong>on our Discord at 9:00 am EST / 15:00 CET</strong> - <a href="https://discord.gg/4kUcXChX?event=1042717917097246720" target="_blank" rel="noopener noreferrer">sign up here</a> and make sure to mark yourself as “Interested”!</p><p>Join us to meet the team, attend a relaxed AMA session to learn everything about Wasp, from how it started to development challenges (having fun with Haskell, web dev and compilers) and ideas and plans for the future.</p><div><p align="center"></p><figure><img alt="Beta launch party instructions" src="/img/beta-ann/launch-party.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>The first feature to announce will be authentication in Wasp! It’s easier and cooler than ever, supports 3rd party providers (hint: starts with “G”), and works smoother than a jar of peanut butter (not the crunchy one of course)!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="monday-nov-28---typescript-support">Monday, Nov 28 - TypeScript support!<a class="hash-link" href="#monday-nov-28---typescript-support" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="TypeScript is here!" src="/img/beta-ann/thank-you-god.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>When we asked you what was missing in Wasp during our <a href="/blog/2022/11/16/alpha-testing-program-post-mortem">Alpha Testing Program</a>, you were pretty clear:</p><div><p align="center"></p><figure><img alt="TypeScript is wanted!" src="/img/beta-ann/ts-wanted.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We heard you (honestly we were missing it too) and now it’s here! You can write your code in TypeScript and enjoy all the goodies that types bring. Some things already work really well and there are a few for which we still have ideas on how to make them better, but more on that on Tuesday!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wednesday-nov-29---tailwind-support-">Wednesday, Nov 29 - Tailwind support! 🐈&nbsp;💨<a class="hash-link" href="#wednesday-nov-29---tailwind-support-" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Tailwind Nic Cage" src="/img/beta-ann/nic-cage-tailwind.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>It’s beautiful! Another highly anticipated featured that also comes with Beta - support for Tailwind CSS framework! Since it has an additional build step it didn’t work out-of-the-box with Alpha, but now it works like a breeze (see what I did here?)!</p><p>Honestly, having used it for designing our new Beta landing page I can really see why it gained so much popularity. So long, making up names for classes, “containers”, and “wrappers”!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="thursday-nov-30---optimistic-updates">Thursday, Nov 30 - Optimistic updates!<a class="hash-link" href="#thursday-nov-30---optimistic-updates" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="Without optimistic updates" src="/img/beta-ann/no-opt-updates.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Stop glitching, dang it!</figcaption></figure><p></p></div><p>You know that feeling when you move your Trello card “Try Wasp Beta” from “Todo” column to “Done” column and everything works super smoothly without any glitches? That’s because of optimistic updates! You may not need it often but if you needed and it wasn’t possible you’d feel really sad.</p><p>Well, that’s why Alpha is called Alpha and Beta is called Beta 😅. Long story short, now it’s possible to do it in Wasp and it’s also super easy and clean! We're actually very optimistic you’ll feel really good about implementing optimistic updates for your app in Wasp.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="friday-dec-1---improved-ide-support-tooling-and-wasp-lsp">Friday, Dec 1 - Improved IDE support, tooling and Wasp LSP!<a class="hash-link" href="#friday-dec-1---improved-ide-support-tooling-and-wasp-lsp" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="VS Code support for Wasp LSP" src="/img/beta-ann/wasp-loves-vscode.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>If you like types in TypeScript (and in general), then you will also enjoy Wasp! Our DSL is also a typed language which means it can report errors in compile time, e.g. in case you haven’t configured your route correctly. And now all that happens directly in your editor!</p><p><strong>Beta brings LSP, Language Server for Wasp that works with VS Code</strong> (support for other editors coming soon! I’m VIM user myself so take a guess :D). That means improved syntax highlighting, code autocompletion and live error reporting - everything you’d expect from a language!</p><div><p align="center"></p><figure><img alt="Wasp Language Server in action" src="/img/beta-ann/wls-demo.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Wasp LSP in action!</figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="saturday-dec-2---grande-finale--1-wasp-hackathonwaspathon">Saturday, Dec 2 - Grande Finale + #1 Wasp Hackathon!(Waspathon🐝&nbsp;?)<a class="hash-link" href="#saturday-dec-2---grande-finale--1-wasp-hackathonwaspathon" title="Direct link to heading">​</a></h2><div><p align="center"></p><figure><img alt="First Wasp hackathon" src="/img/beta-ann/hackathon-banner.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>I don’t want to reveal too much in advance, but yep there will be a hackathon, yep there will be cool rewards (at least we think so) and yep it will be awesome! We’ll officially announce it as we end the launch week, and equipped with all the new features Beta brought we’ll switch into the hacking mode!</p><p>It’s our first hackathon and we can’t wait to tell you more about it (ok, I admit, we’re still working on it) and see what you beeld with Wasp!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="recap">Recap<a class="hash-link" href="#recap" title="Direct link to heading">​</a></h2><ul><li><strong>We are launching Beta this Sunday, Nov 27, on Product Hunt at 1am PST / 4am EST / 10am CET</strong> - make sure to upvote and comment (anything counts, even “go guys!”) when you can</li><li><strong>Beta brings a ton of new exciting features</strong> - we’ll highlight one each day of the following week</li><li><strong>On Saturday, Dec 2, we’ll announce a hackathon</strong> - our first ever!</li></ul><p>That’s it, Waspeteers - keep buzzing as always and see you soon on the other side! 🐝&nbsp;&nbsp;🅱️</p><p>Matija, Martin &amp; the Wasp team</p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="startups" term="startups"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How Wasp reached all-time high PR count during Hacktoberfest: tips for OSS maintainers]]></title>
        <id>/2022/11/17/hacktoberfest-wrap-up</id>
        <link href="https://wasp-lang.dev/blog/2022/11/17/hacktoberfest-wrap-up"/>
        <updated>2022-11-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[2078 lines of code across 24 PRs were changed in Wasp repo during HacktoberFest 2022 - the most prominent online event for promoting and celebrating OSS culture. October has been a blast, to say the least, and the most active month in the repo's history.]]></summary>
        <content type="html"><![CDATA[<p>2078 lines of code across 24 PRs were changed in <a href="https://github.com/wasp-lang/wasp" target="_blank" rel="noopener noreferrer">Wasp repo</a> during <a href="https://hacktoberfest.com/" target="_blank" rel="noopener noreferrer">HacktoberFest 2022</a> - the most prominent online event for promoting and celebrating OSS culture. October has been a blast, to say the least, and the most active month in the repo's history.</p><p>This is the story of our journey along with the tips on leveraging Hacktoberfest to get your repo buzzing! 🐝🐝</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-it-went-the-stats">How it went: the stats<a class="hash-link" href="#how-it-went-the-stats" title="Direct link to heading">​</a></h2><p>Let's take a quick look at the charts below (data obtained from <a href="https://ossinsight.io/analyze/wasp-lang/wasp" target="_blank" rel="noopener noreferrer">OSS Insight</a> platform) 👇</p><div><p align="center"></p><figure><img alt="PR history" src="/img/hacktoberfest-wrap-up/pr-history.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">24 contributor PRs in Oct, an all-time high!</figcaption></figure><p></p></div><div><p align="center"></p><figure><img alt="Lines of code changes" src="/img/hacktoberfest-wrap-up/code-lines-history.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">On the other hand, number of changed LoC isn't that huge</figcaption></figure><p></p></div><p>While the number of PRs is at an all-time high, the number of updated lines of code is fewer than usual. If we take a look at the distribution of PR sizes in the first chart, we can see that "xs" and "s" PRs are in the majority (20 out of 24).</p><p><strong>This brings us to our first conclusion: first-time contributors start with small steps!</strong> The main benefit here is getting potential contributors interested and familiar with the project, rather than expecting them to jump in and
immediately start implementing the next major feature. Efforts like that require investing time to understand and digest codebase architecture, design decisions and the development process.</p><p>On the other hand, being able to implement and merge any feature, no matter the size, from beginning to the end, and to get your name on the list of contributors of your favourite project is an amazing feeling! That will make your contributors feel like superheroes and motivate them to keep taking on larger and larger chunks, and maybe eventually even join the core team!</p><p><strong>Thus, the second conclusion would be: don’t underestimate the significance of small PRs!</strong> It's not about reducing your backlog, but rather encouraging developers to get engaged with your project in a friendly way.</p><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</div><div class="admonitionContent_S0QG"><p>To make it easier for your new contributors, you can prepare in advance good issues to get started with - e.g. smaller bugs, docs improvements, fun but isolated problems, etc.</p><p>We added <a href="https://github.com/wasp-lang/wasp/issues?q=is%3Aissue+is%3Aopen+label%3A%22good+first+issue%22" target="_blank" rel="noopener noreferrer"><code>good-first-issue</code></a> label to such issues in Wasp repo, and even added extra context such as <code>no-haskell</code>, <code>webdev</code>, <code>example</code>, <code>docs</code>.</p></div></div><p>With your repo being set, the next question is <em>"How do I get people to pick my project to work on"</em>? Relying solely
on putting "Hacktoberfest" topic on your GitHub repo won't do the trick, not with thousands of other repos doing the same.</p><p>If you want to get noticed, <strong>you need to do marketing. A lot of it. The name of the game here is what you put in is what you get back.</strong> Let's talk about this in more detail.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="a-thin-line-between-genuine-interactions-and-annoying-self-promotion">A thin line between genuine interactions and annoying self-promotion<a class="hash-link" href="#a-thin-line-between-genuine-interactions-and-annoying-self-promotion" title="Direct link to heading">​</a></h2><p>First and foremost, you'll need to create <a href="https://github.com/wasp-lang/wasp/issues/735" target="_blank" rel="noopener noreferrer">an entry point</a> with all the necessary information for the participants. We opted for a GitHub issue where we categorized Hacktoberfest issues by type, complexity, etc, but it can be anything - a dedicated landing page, Medium/Dev.to article, or whatever works for you. Once you have that, you can start promoting it.</p><div><p align="center"></p><figure><img alt="Hacktoberfest entry point - gh issue" src="/img/hacktoberfest-wrap-up/hf-gh-entry-point.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Our entry point for Hacktoberfest</figcaption></figure><p></p></div><p>Our marketing strategy consisted of the following:</p><ol><li><p>Tweeting regularly - what's new, interesting issues, ...</p></li><li><p>Writing meaningful Reddit posts about your achievements</p></li><li><p>Hanging out in HacktoberFest <a href="https://discord.com/invite/hacktoberfest" target="_blank" rel="noopener noreferrer">Discord server</a>, chatting with others and answering their questions</p></li><li><p>Checking posts with <a href="https://dev.to/t/hacktoberfest" target="_blank" rel="noopener noreferrer">appropriate</a> <a href="https://medium.com/tag/hacktoberfest2022" target="_blank" rel="noopener noreferrer">tags</a> on different blogging websites like Medium, Dev.to, Hashnode, etc. and participating in conversations. </p></li></ol><p>There are plenty of other ways to advertise your project, like joining events or writing articles. Even <a href="https://github.com/dailydotdev/memetoberfest" target="_blank" rel="noopener noreferrer">meme contests</a>. The activities mentioned above worked the best for us. Let’s dive a bit deeper.</p><p>Tweets are pretty obvious - as mentioned, you can share updates on how stuff is going. Tag contributors, inform your followers about available issues and mention those who might be a good fit for tackling them.  </p><p>Reddit is a much more complex beast. You need to avoid clickbait post titles, comply with subreddit rules on self-promotion and try to give meaningful info to the community simultaneously. Take less than you give, and you’re good. </p><div><p align="center"></p><figure><img alt="posting on reddit" src="/img/hacktoberfest-wrap-up/oss-reddit-post.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">How posting on Reddit feels</figcaption></figure><p></p></div><p>The Discord server marketing was pretty straightforward. There’s even a dedicated channel for self-promotion. In case you're not talkative much, dropping a link to your project is OK, and that’s it. On the other hand, the server is an excellent platform for discussing Hacktoberfest-related issues, approaches, and ideas. The more you chat, the higher your chances of drawing attention to your project.</p><p>The most engaging but also time consuming activity was commenting on blog posts of other Hacktoberfest participants. <strong>Pretending that you’re interested in the topic only to leave a self-promoting comment will not bring you anywhere - it can only result in your comment being removed</strong>. Make sure to provide value: add more information on the topic of the article, address specific points the author may have missed, or mention how you’ve dealt with the related issue in your project. </p><p>Be consistent and dedicate time to regularly to check new articles and jump into discussions. Share a link to your repo only if it fits into the flow of the conversation.</p><p><img loading="lazy" alt="Content marketing in a nutshell" src="/assets/images/content-marketing-in-a-nutshell-2a0f296439c966511b1e9bdcd7805bea.png" width="736" height="532" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="was-it-worth-it">Was it worth it?<a class="hash-link" href="#was-it-worth-it" title="Direct link to heading">​</a></h2><p>Before joining HacktoberFest as maintainers, we weren’t sure it would be worth the time investment. Our skepticism was reinforced by the following:</p><ol><li><p><a href="https://www.reddit.com/r/developersIndia/comments/xvynx9/hacktoberfest_is_ruining_opensource/" target="_blank" rel="noopener noreferrer">Mentions</a> of people submitting trivial PRs just to win the award</p></li><li><p>The fact that we're making a relatively complex project (DSL for developing React + Node.js full-stack web apps with less code) and it might be hard for people to get into it</p></li><li><p>The compiler is written is Haskell, with templates in JavaScript - again, not the very common project setup</p></li></ol><p>Fortunately, none of this turned out to be a problem! We've got 24 valid PRs, both Haskell and non-Haskell, a ton of valuable feedback, and several dozen new users and community members. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wrap-up">Wrap up<a class="hash-link" href="#wrap-up" title="Direct link to heading">​</a></h2><p>Don’t expect magic to happen. HacktoberFest is all about smaller changes and getting community introduced to your project. Be ready to promote your repo genuinely and don’t be afraid to take part in the contest. We hope that helps and wish you the best of luck!</p><p>Remember, HacktoberFest is all about the celebration of open source. Stick to that principle, and you’ll get the results you could only wish for!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ps---thanks-to-our-contributors">P.S. - Thanks to our contributors!<a class="hash-link" href="#ps---thanks-to-our-contributors" title="Direct link to heading">​</a></h2><p>Massive shout out to our contributors: <a href="https://twitter.com/ussgarci" target="_blank" rel="noopener noreferrer">@ussgarci</a>, <a href="https://twitter.com/h4r1337" target="_blank" rel="noopener noreferrer">@h4r1337</a>, <a href="https://twitter.com/d0m96" target="_blank" rel="noopener noreferrer">@d0m96</a>, <a href="https://twitter.com/EmmanuelCoder" target="_blank" rel="noopener noreferrer">@EmmanuelCoder</a>, <a href="https://twitter.com/gautier_difolco" target="_blank" rel="noopener noreferrer">@gautier_difolco</a>, <a href="https://twitter.com/vaishnav_mk1" target="_blank" rel="noopener noreferrer">@vaishnav_mk1</a>, <a href="https://twitter.com/NeoLight1010" target="_blank" rel="noopener noreferrer">@NeoLight1010</a>, <a href="https://twitter.com/abscubix" target="_blank" rel="noopener noreferrer">@abscubix</a>, <a href="https://twitter.com/JFarayola" target="_blank" rel="noopener noreferrer">@JFarayola</a>, <a href="https://twitter.com/Shahx95" target="_blank" rel="noopener noreferrer">@Shahx95</a> and everyone else for making it possible. You rock! 🤘</p>]]></content>
        <author>
            <name>Maksym Khamrovskyi</name>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="hacktoberfest" term="hacktoberfest"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Alpha Testing Program: post-mortem]]></title>
        <id>/2022/11/16/alpha-testing-program-post-mortem</id>
        <link href="https://wasp-lang.dev/blog/2022/11/16/alpha-testing-program-post-mortem"/>
        <updated>2022-11-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are working on a new web framework that integrates with React & Node.js, and also happens to be a language. As you can probably imagine, it’s not easy to get people to use a new piece of technology, especially while still in Alpha. On the other hand, without users and their feedback, it’s impossible to know what to build.]]></summary>
        <content type="html"><![CDATA[<p>We are working on a new web framework that integrates with React &amp; Node.js, and also happens to be a language. As you can probably imagine, it’s not easy to get people to use a new piece of technology, especially while still in Alpha. On the other hand, without users and their feedback, it’s impossible to know what to build.</p><p>That is why we ran Alpha Testing Program for Wasp - here is what we learned and what went both well and wrong along the way.</p><div><p align="center"></p><figure><img alt="twitter DM - shared atp in swag groups" src="/img/atp/swag-groups-twitter.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="of-course-i-know-about-wasp-i-just-havent-come-around-to-trying-it-out-yet">“Of course I know about Wasp! I just haven’t come around to trying it out yet.”<a class="hash-link" href="#of-course-i-know-about-wasp-i-just-havent-come-around-to-trying-it-out-yet" title="Direct link to heading">​</a></h2><p>Although we hit the front page of HN <a href="https://news.ycombinator.com/item?id=26091956" target="_blank" rel="noopener noreferrer">several</a> <a href="https://news.ycombinator.com/item?id=32098144" target="_blank" rel="noopener noreferrer">times</a> and are about to reach 2,000 stars on GitHub, there is still a big difference between a person starring a repo and actually sitting down and building something with it.</p><p>Talking to people, we realised a lot of them had heard of Wasp, thought it was a neat idea, but hadn’t tried it out. These were the main reasons:</p><ul><li>having to find 30 mins to go through our <strong>Build a Todo App</strong> tutorial - <em>“I'm busy now, but I’ll do it next week.”</em></li><li>building a bare-bones todo app is not that exciting</li><li>not having an idea what else to build</li><li><em>“the product is still in alpha, so I will bookmark it for later”</em></li></ul><p>These are all obvious and understandable reasons. I must admit, I’m much the same — maybe even worse — when it comes to trying out something new/unproven. It just isn’t a priority, and without a push that will help me overcome all these objections, I usually don’t have an incentive to go through with it.</p><p>Having realised all that, we understood we needed to give people a reason to try Wasp out <strong>now</strong>, because that’s when we needed the feedback, not next week.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="welcome-to-wasp-alpha-testing-program">Welcome to Wasp Alpha Testing Program!<a class="hash-link" href="#welcome-to-wasp-alpha-testing-program" title="Direct link to heading">​</a></h2><p align="center"></p><figure><img loading="lazy" alt="The team" src="/img/atp/welcome-to-atp-notion.png" class="img_ev3q"><figcaption style="color:#808080">I was having a bit too much fun <a href="https://wasp-lang.notion.site/CLOSED-Welcome-to-Wasp-Alpha-Testing-program-f3a8a350802341abac87fb7831bb1e60" target="_blank" rel="noopener noreferrer">here</a>, but Portal fans will understand.</figcaption></figure><p></p><p>We quickly put together an admissions page for alpha testers in Notion (you can see it <a href="https://wasp-lang.notion.site/Wasp-Alpha-Testing-Program-Admissions-dca25649d63849cb8dfc55881e4f6f82" target="_blank" rel="noopener noreferrer">here</a>) and started sharing it around. To counter the hurdles we mentioned above, we time-boxed the program (<em>”this is happening now and you have 48 hours to finish once you start</em>”) and promised a t-shirt to everyone that goes through the tutorial and fills out the feedback form.</p><div><p align="center"></p><figure><img alt="Apply to ATP - CTA" src="/img/atp/atp-apply-here.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">CTA from the admissions page</figcaption></figure><p></p></div><p>Soon, the first applications started trickling in! For each new applicant, we’d follow up with the <a href="https://www.notion.so/CLOSED-Welcome-to-Wasp-Alpha-Testing-program-f3a8a350802341abac87fb7831bb1e60" target="_blank" rel="noopener noreferrer">instructions</a> on how to successfully go through the Alpha Testing Program:</p><ul><li>fill out intro form (years of experience, preferred stack, etc)</li><li>go through our “build a Todo app” tutorial</li><li>fill out the feedback form - what was good, what was bad etc.</li></ul><div><p align="center"></p><figure><img alt="Timeboxing" src="/img/atp/timeboxing.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">People were really respectful of this deadline and would politely ask to extend it in case they couldn’t make it.</figcaption></figure><p></p></div><p>But, soon after I got the following message on Twitter:</p><div><p align="center"></p><figure><img alt="twitter DM - shared atp in swag groups" src="/img/atp/swag-groups-twitter.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We got really scared that we would get a ton of folks putting in minimal effort while trying Wasp out just to get the free swag, leaving us empty-handed and having learned nothing! On the other hand, we didn’t have much choice since we didn’t define the “minimum required quality” of feedback in advance.</p><p>Luckily, it wasn’t the problem in the end, even the opposite -- we did get a surge of applications, but only a portion of them finished the program and the ones that did left really high-quality feedback!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-it-went---test-profile--feedback">How it went - test profile &amp; feedback<a class="hash-link" href="#how-it-went---test-profile--feedback" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tester-profile">Tester profile<a class="hash-link" href="#tester-profile" title="Direct link to heading">​</a></h3><p>We received 210 applications and 53 out of those completed the program — 25% completion rate.</p><p>We also surveyed applicants about their preferred stack, years of programming experience, etc:</p><div><p align="center"></p><figure><img alt="Intro survey - tester profile" src="/img/atp/atp-intro-survey-yoe.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Yep, we like puns.</figcaption></figure><p></p></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="the-feedback">The feedback<a class="hash-link" href="#the-feedback" title="Direct link to heading">​</a></h3><p>The feedback form evaluated testers’ overall experience with Wasp. We asked them what they found to be the best and worst parts of working with Wasp, as well as about the next features they’d like to see.</p><div><p align="center"></p><figure><img alt="Feedback survey - experience" src="/img/atp/atp-feedback-survey-exp.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p><strong>The bad parts</strong></p><p>What our testers were missing the most was a full-blown IDE and TypeScript support. Both of these are coming in Beta but only JS was supported at the time. Plus, there were some installation problems with Windows (which is not fully supported yet — best to use it through WSL).</p><div><p align="center"></p><figure><img alt="Feedback survey - the bad parts" src="/img/atp/atp-bad-parts.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We were already aware that TypeScript support is an important feature, but didn’t have an exact feeling of how much - the feedback was really helpful and helped us prioritise our Beta backlog.</p><p><strong>The good parts</strong></p><p>Testers’ favourite part was the batteries-included experience, particularly the <a href="/docs/tutorials/todo-app/06-auth">auth model</a>.</p><div><p align="center"></p><figure><img alt="Feedback survey - the good parts" src="/img/atp/atp-good-parts.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="post-mortem-what-didnt-go-well">Post-mortem: what didn’t go well<a class="hash-link" href="#post-mortem-what-didnt-go-well" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="no-threshold-for-feedback-quality">No threshold for feedback quality<a class="hash-link" href="#no-threshold-for-feedback-quality" title="Direct link to heading">​</a></h3><div><p align="center"></p><figure><img alt="Feedback quality" src="/img/atp/atp-feedback-quality.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>We didn’t put any kind of restrictions on the feedback form, e.g. minimal length of the feedback. That resulted in ~15%-20% of answers being single words, such as depicted above. I’m not sure if there is an efficient way to avoid this or just a stat to live with.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="using-free-text-form-for-collecting-addresses">Using free text form for collecting addresses<a class="hash-link" href="#using-free-text-form-for-collecting-addresses" title="Direct link to heading">​</a></h3><p>It never crossed our minds before that validating addresses could be such an important part of shipping swag, but turns out it is. It seems that there are a lot of ways to specify an address, some of which are different from what is expected by our post office, resulting in a number of shipments getting returned.</p><p>An ideal solution would be to use a specialized “address” field in a survey that would auto-validate it, but turns out Typeform (which we used) doesn’t have that feature implemented yet, although <a href="https://community.typeform.com/suggestions-feedback-34/address-field-question-type-2950" target="_blank" rel="noopener noreferrer">it’s been highly requested</a>.</p><div><p align="center"></p><figure><img alt="Shipment returned" src="/img/atp/atp-shipment-returned.jpg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><div><p align="center"></p><figure><img alt="Shipment returned email" src="/img/atp/atp-shipment-returned-email.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-non-obvious-benefit-of-alpha-testing-program">The non-obvious benefit of Alpha Testing Program<a class="hash-link" href="#the-non-obvious-benefit-of-alpha-testing-program" title="Direct link to heading">​</a></h2><p>What went well is that we got a lot of high-quality feedback that steered and fortified our plan for the upcoming Beta release.</p><p>The other big benefit is that we finally solved the <em>“looks cool but i’ll try it out later maybe”</em> problem. Overall, our usage went well up during the program, but even after it ended, the baseline increased significantly. This was the second-order effect we didn’t foresee.</p><p>Our understanding is that once people finally gave it a try, a portion of them felt the value first-hand and decided to keep using it for other projects as well.</p><div><p align="center"></p><figure><img alt="Alpha testing program - usage spike" src="/img/atp/atp-usage-spike.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="summary--going-forward-beta">Summary &amp; going forward: Beta<a class="hash-link" href="#summary--going-forward-beta" title="Direct link to heading">​</a></h2><p>The overall conclusion from our Alpha Testing Program is it was a worthy effort which got us valuable feedback and positively affected the overall usage. Moving forward we’ll try to focus on ensuring more quality feedback and prioritising 1-to-1 communication to make sure we fully understand what bothers Wasp users and what we can improve. It also might be helpful to do testing in smaller batches so we are not overwhelmed with responses and can focus on the individual testers - that’s something we might try out in Beta.</p><p>As mentioned, the next stop is Beta! It comes out on the 27th of November - <a href="/#signup">sign up here</a> to get notified.</p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="startups" term="startups"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Feature Announcement - Tailwind CSS support]]></title>
        <id>/2022/11/16/tailwind-feature-announcement</id>
        <link href="https://wasp-lang.dev/blog/2022/11/16/tailwind-feature-announcement"/>
        <updated>2022-11-16T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<img alt="Full stack devs"]]></summary>
        <content type="html"><![CDATA[<p align="center"><img loading="lazy" alt="Full stack devs" src="/img/tailwind-1.png" width="400px" class="img_ev3q"></p><p><em>Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><p>There are backend devs who can do some frontend, and frontend devs who can do some backend. But the mythical full stack dev is exceedingly rare (or more likely, a lie). Even as someone who falls into the meme category above, we <em>all</em> still need to make websites that <strong>look noice</strong>. This is a place where CSS frameworks can help.</p><p>But which one should you use? According to our <em>extensive research</em>, a statistically-questionable-but-you’re-still-significant-to-us 11 people on Twitter wanted us to add better support for <a href="https://tailwindcss.com/" target="_blank" rel="noopener noreferrer">Tailwind</a>. Which was lucky for us, since we already added it before asking them. 😅</p><p align="center"><img loading="lazy" alt="Twitter voting" src="/img/tailwind-2.png" width="400px" class="img_ev3q"></p><p>Ok, it wasn’t a huge stretch for us to do so preemptively. Tailwind is one of the most heavily used CSS frameworks out there today and seems to keep growing in popularity. So how do you integrate it into your Wasp apps? Like many things in Wasp, it’s really easy- just drop in two config files into the root of your project and you can then start using it! Here are the defaults:</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">./tailwind.config.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/** @type {import('tailwindcss').Config} */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">module</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">content</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"./src/**/*.{js,jsx,ts,tsx}"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">theme</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">extend</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">plugins</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">./postcss.config.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">module</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">exports</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">plugins</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">tailwindcss</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">autoprefixer</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>When these two files are present, Wasp will make sure all the required NPM dependencies get added, that <a href="https://postcss.org/" target="_blank" rel="noopener noreferrer">PostCSS</a> plays nicely with Tailwind directives in CSS files, and that your JavaScript files are properly processed so you can use all the CSS selectors you want (provided you are properly equipped :D).</p><p align="center"><img loading="lazy" alt="Best monitor" src="/img/tailwind-3.png" width="500px" class="img_ev3q"></p><p>With that in place, you can add the Tailwind directives to your CSS files like so:</p><div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">./src/client/Main.css</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token atrule rule">@tailwind</span><span class="token atrule"> base</span><span class="token atrule punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token atrule rule">@tailwind</span><span class="token atrule"> components</span><span class="token atrule punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token atrule rule">@tailwind</span><span class="token atrule"> utilities</span><span class="token atrule punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/* rest of content below */</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And then start using Tailwind classes in your components:</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">h1</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">className</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">text-3xl font-bold underline</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">  Hello world!</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text"></span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">h1</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>As usual, Wasp will still automatically reload your code and refresh the browser on any changes. 🥳</p><p>Lastly, here is a small example that shows how to add a few Tailwind plugins for the adventurous (<a href="https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/todoApp.wasp#L8-L9" target="_blank" rel="noopener noreferrer">wasp file</a> and <a href="https://github.com/wasp-lang/wasp/blob/main/waspc/examples/todoApp/tailwind.config.js#L10-L11" target="_blank" rel="noopener noreferrer">Tailwind config</a>), and <a href="/docs/integrations/css-frameworks">here</a> are the docs for more details. We can’t wait to see what you make!</p>]]></content>
        <author>
            <name>Shayne Czyzewski</name>
            <uri>https://github.com/shayneczyzewski</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="feature" term="feature"/>
        <category label="css" term="css"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Feature Announcement - New auth method (Google)]]></title>
        <id>/2022/11/15/auth-feature-announcement</id>
        <link href="https://wasp-lang.dev/blog/2022/11/15/auth-feature-announcement"/>
        <updated>2022-11-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<img alt="No login for you!"]]></summary>
        <content type="html"><![CDATA[<p align="center"><img loading="lazy" alt="No login for you!" src="/img/auth-hero.png" width="300px" class="img_ev3q"></p><p><em>Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="prologue">Prologue<a class="hash-link" href="#prologue" title="Direct link to heading">​</a></h2><p>We've all been there. Your app needs to support user authentication with social login, and you must now decide what to do next. Should you eschew the collective experience and wisdom of the crowd and YOLO it by rolling your own, praying you don't get pwned in prod? "Nah, I just ate some week-old sushi and can't take another risk that big anytime soon.", you rightly think.</p><p>Ok, surely you can just use a library, right? Open source software, baby! "Hmm, seems Library X, Y, and Z are all somewhat used, each with their pros/cons, nuances, and integration pain points. Oh wait, there are tutorials for each... but each says how hard they are to correctly set up and use. I scoped this feature for one day, not a one-week hair-pulling adventure (Dang scrum! Who likes it anyways? Oh yeah, PMs do. Dang PMs!)." Ok, something else. You need to brainstorm. <code>You instead start to surf Twitter and see an ad for some unicorn auth startup.</code></p><p>Eureka, you can go with a third-party SaaS offering! "We shouldn't have to pay for a while (I <del>think?</del> hope!), and it's just another dependency, no biggie... #microservices, right?" "But what about outages, data privacy, mapping users between systems, and all that implicit trust you are placing in them?" you think. "What happens when Elon buys them next?" You gasp as if you walked by a Patagonia vest covered in that hot new <em>Burnt Hair</em> cologne.</p><p>"All I want is username and password auth with Google login support, why is that so hard in 2022?!? I miss Basic HTTP auth headers. I think I'll move off the grid and become a woodworker."</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="easy-auth-setup-in-wasp">Easy auth setup in Wasp<a class="hash-link" href="#easy-auth-setup-in-wasp" title="Direct link to heading">​</a></h2><p>Wasp helps that dev by taking care of the entire auth setup process out of the box. Adding support for username and password auth, plus Google login, is super quick and easy for Wasp apps. We think this makes adding auth fast and convenient, with no external dependencies or frustrating manual configuration. Here’s how it works:</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-1---add-the-appropriate-models">Step 1 - Add the appropriate models<a class="hash-link" href="#step-1---add-the-appropriate-models" title="Direct link to heading">​</a></h3><p>We need to store user info and the external mapping association for social logins. Here is an example you can start from and add new fields to:</p><div class="language-sql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">./main.wasp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-sql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">entity </span><span class="token keyword" style="font-style:italic">User</span><span class="token plain"> {</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">psl</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    id                        </span><span class="token keyword" style="font-style:italic">Int</span><span class="token plain">           </span><span class="token variable" style="color:rgb(191, 199, 213)">@id</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">@default</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">autoincrement</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    username                  String        </span><span class="token variable" style="color:rgb(191, 199, 213)">@unique</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    password                  String</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    externalAuthAssociations  SocialLogin</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">psl</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">}</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">entity SocialLogin {</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">psl</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  id          </span><span class="token keyword" style="font-style:italic">Int</span><span class="token plain">       </span><span class="token variable" style="color:rgb(191, 199, 213)">@id</span><span class="token plain"> </span><span class="token variable" style="color:rgb(191, 199, 213)">@default</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">autoincrement</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  provider    String</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  providerId  String</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">user</span><span class="token plain">        </span><span class="token keyword" style="font-style:italic">User</span><span class="token plain">      </span><span class="token variable" style="color:rgb(191, 199, 213)">@relation</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">fields</span><span class="token plain">: </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">userId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">references</span><span class="token plain">: </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> onDelete: </span><span class="token keyword" style="font-style:italic">Cascade</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  userId      </span><span class="token keyword" style="font-style:italic">Int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  createdAt   </span><span class="token keyword" style="font-style:italic">DateTime</span><span class="token plain">  </span><span class="token variable" style="color:rgb(191, 199, 213)">@default</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">now</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  @</span><span class="token variable" style="color:rgb(191, 199, 213)">@unique</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">provider</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> providerId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> userId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">psl</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-2---update-appauth-to-use-these-items">Step 2 - Update <code>app.auth</code> to use these items<a class="hash-link" href="#step-2---update-appauth-to-use-these-items" title="Direct link to heading">​</a></h3><div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">./main.wasp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">app authExample</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token selector" style="color:rgb(199, 146, 234)">// ...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">  auth:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token selector" style="color:rgb(199, 146, 234)">userEntity: User</span><span class="token selector punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token selector" style="color:rgb(199, 146, 234)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">    externalAuthEntity: SocialLogin</span><span class="token selector punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token selector" style="color:rgb(199, 146, 234)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">    methods:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token selector" style="color:rgb(199, 146, 234)">usernameAndPassword:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token selector punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token selector" style="color:rgb(199, 146, 234)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">      google:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">onAuthFailedRedirectTo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/login"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-3---get-google-credentials-and-add-environment-variables">Step 3 - Get Google credentials and add environment variables<a class="hash-link" href="#step-3---get-google-credentials-and-add-environment-variables" title="Direct link to heading">​</a></h3><p>Follow the Google setup guide <a href="https://wasp-lang.dev/docs/integrations/google" target="_blank" rel="noopener noreferrer">here</a> and add the environment variables to your <code>.env.server</code> file.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-4---make-use-of-the-google-login-button-in-your-login-page-component">Step 4 - Make use of the Google login button in your <code>Login</code> page component<a class="hash-link" href="#step-4---make-use-of-the-google-login-button-in-your-login-page-component" title="Direct link to heading">​</a></h3><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">./src/client/auth/Login.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'react'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">Link</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'react-router-dom'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> </span><span class="token imports maybe-class-name">SignInButton</span><span class="token imports"> </span><span class="token imports keyword module" style="font-style:italic">as</span><span class="token imports"> </span><span class="token imports maybe-class-name">GoogleSignInButton</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/auth/helpers/Google'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">LoginForm</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/auth/forms/Login'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(130, 170, 255)">Login</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">LoginForm</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        I don't have an account yet (</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Link</span><span class="token tag" style="color:rgb(255, 85, 114)"> </span><span class="token tag attr-name" style="color:rgb(255, 203, 107)">to</span><span class="token tag attr-value punctuation attr-equals" style="color:rgb(199, 146, 234)">=</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag attr-value" style="color:rgb(255, 85, 114)">/signup</span><span class="token tag attr-value punctuation" style="color:rgb(199, 146, 234)">"</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">go to signup</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">Link</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text">).</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">        </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;</span><span class="token tag class-name" style="color:rgb(255, 203, 107)">GoogleSignInButton</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">/&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">      </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain-text"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain-text">    </span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&lt;/</span><span class="token tag" style="color:rgb(255, 85, 114)">div</span><span class="token tag punctuation" style="color:rgb(199, 146, 234)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token maybe-class-name">Login</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="step-5---run-the-app">Step 5 - Run the app!<a class="hash-link" href="#step-5---run-the-app" title="Direct link to heading">​</a></h3><h2 class="anchor anchorWithStickyNavbar_LWe7" id="epilogue">Epilogue<a class="hash-link" href="#epilogue" title="Direct link to heading">​</a></h2><p>No need to move off the grid out of frustration when adding authentication and social login to your web app. <a href="https://github.com/shayneczyzewski/authExample" target="_blank" rel="noopener noreferrer">Here</a> is a complete, minimal example if you want to jump right in, and <a href="https://wasp-lang.dev/docs/language/features#authentication--authorization" target="_blank" rel="noopener noreferrer">here</a> are the full docs for more info. With just a few simple steps above, we've added authentication with best practices baked into our app so we can move on to solving problems that add value to our users!</p>]]></content>
        <author>
            <name>Shayne Czyzewski</name>
            <uri>https://github.com/shayneczyzewski</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="feature" term="feature"/>
        <category label="auth" term="auth"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Farnance: How Julian built a SaaS for farmers with Wasp and won a hackathon!]]></title>
        <id>/2022/10/28/farnance-hackathon-winner</id>
        <link href="https://wasp-lang.dev/blog/2022/10/28/farnance-hackathon-winner"/>
        <updated>2022-10-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[farnance hero shot]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="farnance hero shot" src="/assets/images/farnance-hero-shot-83d807c51c7548151c301194a377ec3e.png" width="2462" height="1750" class="img_ev3q"></p><p><a href="https://jlaneve.github.io/" target="_blank" rel="noopener noreferrer">Julian LaNeve</a> is an engineer and data scientist who currently works at <a href="http://Astronomer.io" target="_blank" rel="noopener noreferrer">Astronomer.io</a> as a Product Manager. In his free time, he enjoys playing poker, chess and <a href="https://www.smudailycampus.com/news/smu-graduate-julian-laneve-wins-100k-grand-prize-from-data-science-competition" target="_blank" rel="noopener noreferrer">winning</a> data science competitions.</p><p>His project, <a href="https://farnance.netlify.app/" target="_blank" rel="noopener noreferrer">Farnance</a>, is a SaaS marketplace that allows farmers to transform their production into a digital asset on blockchain. Julian and his team developed Farnance as a part of the London Business School’s annual hackathon <a href="https://hacklbs.devpost.com/" target="_blank" rel="noopener noreferrer">HackLBS 2021</a>, and ended up as winners among more than 250 participants competing for 6 prizes in total!</p><p>Read on to learn why Julian chose Wasp to develop and deploy Farnance and what parts he enjoyed the most.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="finding-a-perfect-react--nodejs-hackathon-setup">Finding a perfect React &amp; Node.js hackathon setup<a class="hash-link" href="#finding-a-perfect-react--nodejs-hackathon-setup" title="Direct link to heading">​</a></h2><p>Julian had previous experiences with React and Node.js and loved that he could use JavaScript across the stack, but setting up a new project and making sure it uses all the latest packages (and then also figuring out how to deploy it) was always a pain. Since the hackathon only lasted for two days, he needed a quick way to get started but still have the freedom to use his favourite stack.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-power-of-one-line-auth-and-no-api-approach">The power of one-line auth and No-API approach<a class="hash-link" href="#the-power-of-one-line-auth-and-no-api-approach" title="Direct link to heading">​</a></h2><p>Julian first learned about Wasp when it <a href="https://news.ycombinator.com/item?id=26091956" target="_blank" rel="noopener noreferrer">launched on HN</a> and decided it would be a perfect tool for his case. The whole app setup, across the full stack, is covered out-of-the-box, simply by typing <code>wasp new farnance</code>, and he is ready to start writing own React &amp; Node.js code.</p><p>Except on the app setup, the team saved a ton of time by not needing to implement the authentication and a typical CRUD API, since it is covered by Wasp as well. They could also deploy everything for free on Heroku and Netlify in just a few steps, which was a perfect fit for a hackathon.</p><div><p align="center"></p><figure><img alt="Julian's testimonial on Discord" src="/img/farnance/julian-discord-testimonial.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Farnance is still running and you can <a href="https://farnance.netlify.app/" target="_blank" rel="noopener noreferrer">try it out here</a>! The source code is also <a href="https://github.com/jlaneve/Farnance" target="_blank" rel="noopener noreferrer">publicly available</a>, although note it is running on older version of Wasp so some things are a bit different.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="spend-more-time-developing-features-and-less-time-reinventing-the-wheel">Spend more time developing features and less time reinventing the wheel<a class="hash-link" href="#spend-more-time-developing-features-and-less-time-reinventing-the-wheel" title="Direct link to heading">​</a></h2><p>Julian was amazed by how fast he was able to get Farnance of the ground and share a working web app with the users! He decided to go with Google's material-ui for an UI framework which gave his app an instant professional look, although they didn’t have a dedicated designer on the team.</p><p>With all the common web app features (setup, auth, CRUD API) being taken care of by Wasp out-of-the-box they could invest all the time saved in developing and refining their unique features which in the end brought them victory!</p><blockquote><p>I’ve done plenty of hackathons before where I’ve built small SaaS apps, and there’s just so much time wasted setting up common utilities - stuff like user management, databases, routing, etc. Wasp handled all that for me and let me build out our web app in record time</p><p>— Julian LaNeve - Farnance</p></blockquote><div><p align="center"></p><figure><img alt="Farnance's dashboard" src="/img/farnance/farnance-dashboard.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Farnance dashboard in action!</figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="start-quickly-but-also-scale-without-worries">Start quickly, but also scale without worries<a class="hash-link" href="#start-quickly-but-also-scale-without-worries" title="Direct link to heading">​</a></h2><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>Heroku used to offer free apps under certain limits. However, as of November 28, 2022, they ended support for their free tier. <a href="https://blog.heroku.com/next-chapter" target="_blank" rel="noopener noreferrer">https://blog.heroku.com/next-chapter</a></p><p>As such, we have updated our Deployment docs with new recommendations: <a href="https://wasp-lang.dev/docs/deploying" target="_blank" rel="noopener noreferrer">https://wasp-lang.dev/docs/deploying</a></p></div></div><p>Since Wasp compiler generates a full-stack React &amp; Node.js app under the hood, there aren’t any technical limitations to scaling Julian’s app as it grows and gets more users in the future. By running <code>wasp build</code> inside a project folder, developers gets both frontend files and a Dockerfile for the backend, which can then be deployed as any regular web app to the platform of your choice.</p><p>Wasp provides <a href="/docs/deploying">step-by step instructions</a> on how to do it with Netlify and Fly.io for free, but we plan to add even more examples and more integrated deployment experience in the coming releases!</p><blockquote><p>Deploying the wasp app was incredibly easy - I didn’t have time to stand up full infrastructure in the 2 day hackathon and don’t have an infra/devops background, but I had something running on Netlify within an hour. Other projects at the hackathon struggled to do this, and putting access in the hands of the judges certainly helped get us 1st place.</p><p>— Julian LaNeve - Farnance</p></blockquote>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="startups" term="startups"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How Wasp reached 1,000 stars on GitHub (detailed stats & timeline)]]></title>
        <id>/2022/09/29/journey-to-1000-gh-stars</id>
        <link href="https://wasp-lang.dev/blog/2022/09/29/journey-to-1000-gh-stars"/>
        <updated>2022-09-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Wasp is an open-source configuration language for building full-stack web apps that integrates with React & Node.js. We launched first prototype 2 years ago, currently are at 1.9k stars on GitHub and will be releasing Beta in the coming months.]]></summary>
        <content type="html"><![CDATA[<p>Wasp is an open-source configuration language for building full-stack web apps that integrates with React &amp; Node.js. We launched first prototype 2 years ago, currently are at 1.9k stars on GitHub and will be releasing Beta in the coming months.</p><p>It was very hard for us to find and be able to learn from early inception stories of successful OSS projects and that's why we want to share what it looked like for Wasp.</p><p><img loading="lazy" alt="1k stars chart" src="/assets/images/1k_gh_stars_chart-0e5c74b7b623d6bdcd6b81f39dde13fc.png" width="810" height="576" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="before-the-stars-is-this-really-a-problem-1-year">Before the stars: Is this really a problem? (1 year)<a class="hash-link" href="#before-the-stars-is-this-really-a-problem-1-year" title="Direct link to heading">​</a></h2><p>My co-founder and twin brother Martin and I got an initial idea for Wasp in 2018, while developing a web platform for running bioinformatics analysis in the cloud for one London-based startup.</p><p>It was our third or fourth time creating a full-stack app from scratch with the latest &amp; hottest stack. This time, it was React/Node.js; for our previous projects, we went through PHP/Java/Node.js on the back-end and jQuery/Backbone/Angular on the front-end. Because Martin and I felt we were spending a lot of time relearning how to use the latest stack just to build the same features all over again (auth, CRUD, forms, async jobs, etc.), we asked ourselves: <em>Why not abstract these common functionalities in a stack-agnostic, higher-level language (like e.g. SQL does for databases) to never reimplement them again?</em></p><p>Before we jumped into coding, we wanted to make sure this is a problem that actually exists and that we understand it well (enough). In our previous startup we found Customer Development (aka talking to users) extremely helpful, so we decided to do it again for Wasp.</p><p>In a month or so we conducted 25 problem interviews, probing around “What is your biggest challenge with web app development?” After we compiled the results, we identified the following four problems as the most significant ones and decided to focus on them in our v1:</p><ul><li>It is hard to <strong>quickly start</strong> a new web app and make sure <strong>the best practices are being followed</strong>.</li><li>There is a lot of duplication/boilerplate in <strong>managing the state</strong> across front-end, back-end, and the database.</li><li>A lot of <strong>common features are re-implemented</strong> for every new app.</li><li>Developers are overwhelmed by the <strong>increasing tool complexity</strong> and don't want to be responsible for managing it.</li></ul><p>We also clustered the answers we got by topics, so we could dive deeper and identify the areas that got the most attention:</p><div><p align="center"></p><figure><img alt="Start and setup of a web app - problems" src="/img/1000-gh-stars/wasp-cust-dev-start-and-setup.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Interviewee problems regarding starting and setting up a new web app.</figcaption></figure><p></p></div>The reason why we stopped at 25 was that the answers started repeating themselves. We felt that we identified the initial patterns and were ready to move on.<h2 class="anchor anchorWithStickyNavbar_LWe7" id="0-180-️-first-contact-7-months">0-180 ⭐️: First Contact (7 months)<a class="hash-link" href="#0-180-️-first-contact-7-months" title="Direct link to heading">​</a></h2><p>After confirming and clarifying the problem with other developers, Martin and I felt we finally deserved to do some coding. (Ok, I admit, we had actually already started, but the interviews made us feel better about it 😀). We created a new repo on GitHub and started setting up the tooling &amp; playing around with the concept.</p><p>For the next couple of months, we treated Wasp as a side project/experiment and didn’t do any marketing. However, we were well aware of how crucial external feedback is. So, once we built a very rudimentary code generation functionality, we also created a project page that we could share with others to explain what we’re working on and ask for feedback.</p><p>At that point, we came up with the first “real” name for Wasp - <strong>STIC: Specification To Implementation Compiler</strong>, as the big vision for Wasp was to be a stack-agnostic, specification language from which we could generate the actual code in e.g. React &amp; Node.js or even some other stack.</p><div><p align="center"></p><figure><img alt="STIC - first project page" src="/img/1000-gh-stars/stic-project-page.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Our first page for Wasp! Not the best at explaining what Wasp does, though.</figcaption></figure><p></p></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="baby-steps-on-reddit-and-hacker-news">Baby steps on Reddit and Hacker News<a class="hash-link" href="#baby-steps-on-reddit-and-hacker-news" title="Direct link to heading">​</a></h3><p>Our preferred way of distributing STIC project page was through relevant subreddits - r/webdev, r/coding, r/javascript, r/Haskell, r/ProgrammingLanguages, …. </p><p><a href="https://www.reddit.com/r/javascript/comments/f38h1t/askjs_we_are_developing_a_declarative_dsl_for/" target="_blank" rel="noopener noreferrer">This</a> was the first Reddit post we’ve ever made about Wasp:</p><div><p align="center"></p><figure><img alt="First Wasp post on Reddit" src="/img/1000-gh-stars/wasp-reddit-first-post.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Our first Reddit post! We managed to get some feedback before we got banned.</figcaption></figure><p></p></div><p>One important thing we learned is that Reddit doesn’t like self-promotion. Sometimes, even if you’re only asking for feedback, the mods (and bots) will see it as self-promo and ban your post. It depends a lot on the mods, though. Reaching out to them and asking for explanation sometimes helps, but not very often. All subreddits have their own rules and guidelines that describe when or how it is OK to post about your project (e.g., /r/webdev has “Showoff Saturdays”), and we tried to follow them as best as we could.</p><p>After Reddit, we also launched on HN. This was our first ever launch there! We scored 20 points and received a few motivating comments:</p><div><p align="center"></p><figure><img alt="First Wasp post on Reddit" src="/img/1000-gh-stars/first-hn-launch.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="listening-to-users">Listening to users<a class="hash-link" href="#listening-to-users" title="Direct link to heading">​</a></h3><p>Martin and I also followed up with the people we had previously interviewed about their problems in web dev. We showed them STIC project page and asked for comments. From all the feedback we captured, we identified the following issues:</p><ul><li><strong>Developers were not familiar with a term “DSL.”</strong> Almost all of us use a DSL on a daily basis (e.g., SQL, HCL (Terraform), HTML), but it’s not a popular term.</li><li><strong>Developers feared learning a new programming language</strong>. Although our goal was never to replace e.g. Java or Typescript but to make Wasp work alongside it, we discovered that we had failed to communicate it well. Our messaging made developers feel they have to drop all their previous knowledge and start from scratch if they want to use Wasp.</li><li><strong>Nobody could try Wasp yet + there wasn’t any documentation besides the project page</strong>. Our code was public, but we didn’t have a build/distribution system yet. Only a devoted Haskell developer could build it from the source. This made it hard for developers to buy into the high-level vision, as there was nothing they could hold onto. Web frameworks/languages are very “tactile” — it’s hard to judge one without trying it out.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="180-300-️--anybody-can-try-wasp-out--docs--alpha-3-months">180-300 ⭐️ : Anybody can try Wasp out + Docs = Alpha! (3 months)<a class="hash-link" href="#180-300-️--anybody-can-try-wasp-out--docs--alpha-3-months" title="Direct link to heading">​</a></h2><p>After processing this feedback, we realized that the next step for us was to get Wasp into the condition where developers can easily try it out without needing any extra knowledge or facing the trouble of compiling from the source. That meant polishing things a bit, adding a few crucial features, and writing our first documentation, so that users would know how to use it.</p><p>To write our docs, we picked <a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docusaurus</a> — an OSS writing platform made by Facebook. We saw several other OSS projects using it for their docs + its ability to import React in your markdown was amazing. Docusaurus gave us a lot of initial structure, design and features (e.g., search), saving us from reinventing the wheel.</p><div><p align="center"></p><figure><img alt="First Wasp docs" src="/img/1000-gh-stars/first-docs.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Martin made sure to add a huge Alpha warning sign :D</figcaption></figure><p></p></div><p>Our M.O. at the time was to focus pretty much exclusively on one thing, either development or community. Since Wasp team consisted of only Martin and me, it was really hard to do multiple things at once. After the docs were out and Wasp was ready to be easily downloaded, we called this version “Alpha” and switched once again into the “community” mode.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="300-570-️--big-break-on-reddit-and-product-hunt-2-months">300-570 ⭐️ : Big break on Reddit and Product Hunt (2 months)<a class="hash-link" href="#300-570-️--big-break-on-reddit-and-product-hunt-2-months" title="Direct link to heading">​</a></h2><p>Once Alpha was out, we <a href="https://news.ycombinator.com/submitted?id=matijash" target="_blank" rel="noopener noreferrer">launched again on HackerNews</a> and drew a bit of attention (34 upvotes and 3 comments). However, that was little compared to our Reddit launches, where we scored 263 upvotes on <a href="https://www.reddit.com/r/javascript/comments/jvv1yg/together_with_my_brother_ive_been_working_on_wasp/" target="_blank" rel="noopener noreferrer">r/javascript</a> and 365 upvotes on <a href="https://www.reddit.com/r/reactjs/comments/jx5fyg/together_with_my_brother_ive_been_working_on_wasp/" target="_blank" rel="noopener noreferrer">r/reactjs</a>:</p><div><p align="center"></p><figure><img alt="Big break on Reddit" src="/img/1000-gh-stars/reddit-big-break.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">They love me! [insert Tobey Maguire as Spiderman]</figcaption></figure><p></p></div><p>Compared to the volume of attention and feedback we’ve been previously receiving, this was a big surprise for us! Here are some of the changes in messaging that we made for the Reddit launches:</p><ul><li><strong>Put prefix “declarative” in front of the “language”</strong> to convey that it’s not a regular programming language like Python or Javascript but rather something much more lightweight and specialized.</li><li><strong>Emphasized that Wasp is not a standalone language that will replace your current stack</strong> but rather a “glue” between your React &amp; Node.js code, allowing you to keep using your favourite stack.</li><li><strong>Focused on the benefits like “less boilerplate,”</strong> which is a well known pain in web development.</li></ul><div class="theme-admonition theme-admonition-tip alert alert--success admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>Docs made the difference</div><div class="admonitionContent_S0QG"><p>Once we added the docs, we noticed a peculiar thing: <strong>developers became much less trigger-happy to criticize the project, especially in a non-constructive way</strong>. Our feeling was the majority of developers who were checking Wasp out still didn’t read the docs in detail (or at all), but the sheer existence of them made them feel there is more content they should go through before passing the final judgment.</p></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="winning-1-product-of-the-day-on-product-hunt">Winning #1 Product of The Day on Product Hunt<a class="hash-link" href="#winning-1-product-of-the-day-on-product-hunt" title="Direct link to heading">​</a></h3><p>After HN and Reddit, we continued with the “Alpha launch” mindset and set ourselves to launch Wasp on Product Hunt. It was our first time ever launching on PH, so we didn’t know what to expect. We googled some advice, did maybe a week of preparation (i.e., wrote the copy, asked a few friends to share their experiences with Wasp once we’re live), and that was it.</p><p>We launched <a href="https://www.producthunt.com/products/wasp-lang-alpha#wasp-lang-alpha" target="_blank" rel="noopener noreferrer">Wasp on PH on Dec 6, 2020</a> and it ended up as Product of the day! That gave us a boost in stars and overall traction. Another benefit of PH was that Wasp also ended up in their daily newsletter, which supposedly has over a million subscribers. All this gave us quite a boost and visibility increase.</p><div><p align="center"></p><figure><img alt="Product Hunt launch" src="/img/1000-gh-stars/ph-launch.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="570-1000-️--wasp-joins-yc--official-hn-launch-25-months">570-1000 ⭐️ : Wasp joins YC + “Official” HN launch (2.5 months)<a class="hash-link" href="#570-1000-️--wasp-joins-yc--official-hn-launch-25-months" title="Direct link to heading">​</a></h2><p>Soon after Product Hunt, Wasp joined Y Combinator for their W21 batch. We had applied two times before and always made it to the interviews, but did not get in. This time, the traction tipped the scales in our favour. (You can read more about our journey to YC <a href="https://wasp-lang.dev/blog/2021/02/23/journey-to-ycombinator" target="_blank" rel="noopener noreferrer">here</a>.)</p><p>For the first month of YC, there was a lot of admin and setup work to deal with alongside the regular program. That added a third dimension to our existing two areas of effort. Once we went past that, we could again put more focus on product and community development. </p><p>Our next milestone was to launch Wasp on Hacker News, but this time “officially” as a YC-backed company. <strong>Hacker News provides a lot of <a href="https://news.ycombinator.com/yli.html" target="_blank" rel="noopener noreferrer">good tips</a> on how to successfully launch and 80% of the advice applies even if your product isn’t backed by YC</strong>. I wish I had known about it before. The gist of the advice is to write in a clear and succinct way and to avoid buzzwords, superlatives, and salesy tone above all. Consider HN readers as your peers and explain what you do in a way you would talk to a friend over a drink. It really works that way.</p><p>We went through the several iterations of the text, sweated over how it’s gonna go, and when the day finally came — we launched! It went beyond all our expectations. With 222 points and 79 comments, <strong>our HN launch was one of the most successful launches (#9) out of 300+ companies in the W21 batch.</strong> Many developers and VCs that checked our launch afterwards were surprised how much positive feedback Wasp received, especially given how honest and direct HN audience can be.</p><p><strong>HN launch brought us about 200 stars right away</strong>, and the rest came in the following weeks. As it was February and the YC program was nearing its end, we  needed to shift gears again and focus on fundraising. This put all the other efforts on the back burner. (You can read about our fundraising learnings from 250+ meetings in 98 days <a href="https://wasp-lang.dev/blog/2021/11/22/fundraising-learnings" target="_blank" rel="noopener noreferrer">here</a>.) But the interest of the community remained and even without much activity from our side they kept coming and trying Wasp out.</p><div><p align="center"></p><figure><img alt="YC HN launch" src="/img/1000-gh-stars/yc-hn-launch.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion-understanding-users--number-of-stars">Conclusion: understanding users &gt; number of stars<a class="hash-link" href="#conclusion-understanding-users--number-of-stars" title="Direct link to heading">​</a></h2><p>Our primary goal was never to reach X stars, but rather to understand how we can make Wasp more helpful so that developers would want to use it for their projects. As you could read above, even well before we started a repository we made sure to talk to developers and learn about their problems.</p><p>We also kept continually improving how we present Wasp - had we not pivoted our message from <em>“Wasp is a new programming language”</em> to <em>“Wasp is a simple config language that works alongside React &amp; Node.js”</em> we wouldn’t have been where we are today.</p><p>On the other hand, stars have become an unofficial “currency” of GitHub and developers and VCs alike consider it when evaluating a project. They shouldn’t be disregarded and you should make it easy for users who like your product to express their support by starring your repo (like I’m doing right <a href="https://github.com/wasp-lang/wasp" target="_blank" rel="noopener noreferrer">here</a>), but that should always be a second order of concern.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="good-luck">Good luck!<a class="hash-link" href="#good-luck" title="Direct link to heading">​</a></h2><p>I hope you found this helpful and that we shed some light on how things can look like in the early stages of an OSS project. Also, keep in mind this was our singular experience and that every story is different, so take everything with a grain of salt and pick only what makes sense for you and your product.</p><p>We wish you the best of luck and feel free to reach out if you'll have any questions!</p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="startups" term="startups"/>
        <category label="github" term="github"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Building an app to find an excuse for our sloppy work]]></title>
        <id>/2022/09/05/dev-excuses-app-tutrial</id>
        <link href="https://wasp-lang.dev/blog/2022/09/05/dev-excuses-app-tutrial"/>
        <updated>2022-09-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We’ll build a web app to solve every developer's most common problem – finding an excuse to justify our messy work! And will do it with a single config file that covers the full-stack app architecture plus several dozen lines of code. In the quickest possible way, so we can’t excuse ourselves from building it!]]></summary>
        <content type="html"><![CDATA[<p>We’ll build a web app to solve every developer's most common problem – finding an excuse to justify our messy work! And will do it with a single config file that covers the full-stack app architecture plus several dozen lines of code. In the quickest possible way, so we can’t excuse ourselves from building it!</p><p><img loading="lazy" alt="Best excuse of all time" src="/assets/images/compiling-f5efe2c14d949890ce85c23d36e10bd2.png" width="413" height="360" class="img_ev3q"></p><p>Best excuse of all time! <a href="https://xkcd.com/303/" target="_blank" rel="noopener noreferrer">Taken from here.</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-requirements-were-unclear">The requirements were unclear.<a class="hash-link" href="#the-requirements-were-unclear" title="Direct link to heading">​</a></h2><p>We’ll use Michele Gerarduzzi’s <a href="https://github.com/michelegera/devexcuses-api" target="_blank" rel="noopener noreferrer">open-source project</a>. It provides a simple API and a solid number of predefined excuses. A perfect fit for our needs. Let’s define the requirements for the project: </p><ul><li>The app should be able to pull excuses data from a public API. </li><li>Save the ones you liked (and your boss doesn't) to the database for future reference.</li><li>Building an app shouldn’t take more than 15 minutes.</li><li>Use modern web dev technologies (NodeJS + React)</li></ul><p>As a result – we’ll get a simple and fun pet project. You can find the complete codebase <a href="https://github.com/wasp-lang/wasp/tree/release/examples/tutorials/ItWaspsOnMyMachine" target="_blank" rel="noopener noreferrer">here</a>. </p><p><img loading="lazy" alt="Final result" src="/assets/images/final-excuse-app-0c228a553be0865e245d5e421f86ea27.png" width="996" height="568" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="theres-an-issue-with-the-third-party-library">There’s an issue with the third party library.<a class="hash-link" href="#theres-an-issue-with-the-third-party-library" title="Direct link to heading">​</a></h2><p>Setting up a backbone for the project is the most frustrating part of building any application. </p><p>We are installing dependencies, tying up the back-end and front-end, setting up a database, managing connection strings, and so on. Avoiding this part will save us a ton of time and effort. So let’s find ourselves an excuse to skip the initial project setup.</p><p>Ideally – use a framework that will create a project infrastructure quickly with the best defaults so that we’ll focus on the business logic. A perfect candidate is <a href="https://wasp-lang.dev/" target="_blank" rel="noopener noreferrer">Wasp</a>. It’s an open-source, declarative DSL for building web apps in React and Node.js with no boilerplate</p><p>How it works: developer starts from a single config file that specifies the app architecture. Routes, CRUD API, auth, and so on. Then adds React/Node.js code for the specific business logic. Behind the scenes, Wasp compiler will produce the entire source code of the app - back-end, front-end, deployment template, database migrations and everything else you’ve used to have in any other full-stack app. </p><p><img loading="lazy" alt="Wasp architecture" src="/assets/images/wasp-compilation-6585aca9de412cf27332aa8f21e7da4d.png" width="1525" height="696" class="img_ev3q"></p><p>So let’s jump right in.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="maybe-somethings-wrong-with-the-environment">Maybe something's wrong with the environment.<a class="hash-link" href="#maybe-somethings-wrong-with-the-environment" title="Direct link to heading">​</a></h2><p>Wasp intentionally works with the LTS Node.js version since it guarantees stability and active maintenance. As for now, it’s Node 16 and NPM 8. If you need another Node version for some other project – there’s a possibility to <a href="https://wasp-lang.dev/docs#1-requirements" target="_blank" rel="noopener noreferrer">use NVM</a> to manage multiple Node versions on your computer at the same time.</p><p>Installing Wasp on Linux (for Mac/Windows, please <a href="https://wasp-lang.dev/docs#2-installation" target="_blank" rel="noopener noreferrer">check the docs</a>):</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">curl -sSL https://get.wasp-lang.dev/installer.sh | sh</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now let’s create a new web app named ItWaspsOnMyMachine.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">wasp new ItWaspsOnMyMachine</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Changing the working directory:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">cd ItWaspsOnMyMachine</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Starting the app:</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">wasp start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Now your default browser should open up with a simple predefined text message. That’s it! 🥳 We’ve built and run a NodeJS + React application. And for now – the codebase consists of only two files! <code>main.wasp</code> is the config file that defines the application’s functionality. And <code>MainPage.js</code> is the front-end.</p><p><img loading="lazy" alt="Initial page" src="/assets/images/init-page-d4e0be9843a1b8dcf496a2ec6ff01565.png" width="1891" height="1043" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="that-worked-perfectly-when-i-developed-it">That worked perfectly when I developed it.<a class="hash-link" href="#that-worked-perfectly-when-i-developed-it" title="Direct link to heading">​</a></h2><p><strong>1) Let’s add some additional configuration to our <code>main.wasp</code> file. So it will look like this:</strong></p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">main.wasp | Defining Excuse entity, queries and action</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Main declaration, defines a new web app.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">app </span><span class="token maybe-class-name">ItWaspsOnMyMachine</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Wasp compiler configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">wasp</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">version</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"^0.6.0"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Used as a browser tab title.                                  </span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">title</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"It Wasps On My Machine"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">head</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Adding Tailwind to make our UI prettier</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;script src='https://cdn.tailwindcss.com'&gt;&lt;/script&gt;"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">dependencies</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Adding Axios for making HTTP requests                                          </span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"axios"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"^0.21.1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Render page MainPage on url `/` (default url).</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">route </span><span class="token maybe-class-name">RootRoute</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">path</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">to</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">MainPage</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain">                 </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// ReactJS implementation of our page located in `src/client/MainPage.js` as a default export.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">page </span><span class="token maybe-class-name">MainPage</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">                                             </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">component</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">Main</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@client/MainPage.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Prisma database entity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">entity </span><span class="token maybe-class-name">Excuse</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">psl                                          </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    id          </span><span class="token maybe-class-name">Int</span><span class="token plain">     @id @</span><span class="token keyword module" style="font-style:italic">default</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">autoincrement</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    text        </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">psl</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Query declaration to get a new excuse</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">query getExcuse </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">                                           </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">fn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> getExcuse </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@server/queries.js"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">entities</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token maybe-class-name">Excuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Query declaration to get all excuses</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">query getAllSavedExcuses </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">                                  </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">fn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> getAllSavedExcuses </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@server/queries.js"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">entities</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token maybe-class-name">Excuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Action to save current excuse</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">action saveExcuse </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">                                         </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">fn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> saveExcuse </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@server/actions.js"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">entities</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token maybe-class-name">Excuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>We’ve added Tailwind to make our UI more pretty and Axios for making API requests. </p><p>Also, we’ve declared a database entity called <code>Excuse</code>, queries, and action. The <code>Excuse</code> entity consists of the entity’s ID and the text. </p><p><code>Queries</code> are here when we need to fetch/read something, while <code>actions</code> are here when we need to change/update data. Both query and action declaration consists of two lines – a reference to the file that contains implementation and a data model to operate on. You can find more info <a href="https://wasp-lang.dev/docs/tutorials/todo-app/listing-tasks#introducing-operations-queries-and-actions" target="_blank" rel="noopener noreferrer">in the docs</a>. So let’s proceed with queries/actions. </p><p><strong>2) Create two files: “actions.js” and “queries.js” in the <code>src/server</code> folder.</strong></p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/server/actions.js | Defining an action</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">saveExcuse</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">excuse</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access maybe-class-name">Excuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">create</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">text</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> excuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">text</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/server/queries.js | Defining queries</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">axios</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'axios'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">getExcuse</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> response </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> axios</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'https://api.devexcus.es/'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">getAllSavedExcuses</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">_args</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access maybe-class-name">Excuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">findMany</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Let’s add <code>saveExcuse()</code> action to our <code>actions.js</code> file. This action will save the text of our excuse to the database. Then let’s create two queries in the <code>queries.js</code> file. First, one <code>getExcuse</code> will call an external API and fetch a new excuse. The second one, named <code>getAllSavedExcuses</code>, will pull all the excuses we’ve saved to our database. </p><p>That’s it! We finished our back-end. 🎉 Now, let’s use those queries/actions on our UI.</p><p><strong>3) Let’s erase everything we had in the <code>MainPage.js</code> file and substitute it with our new UI.</strong></p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/client/MainPage.js | Updating the UI</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">React</span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token imports"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> useState </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'react'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> useQuery </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/queries'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">getExcuse</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/queries/getExcuse'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">getAllSavedExcuses</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/queries/getAllSavedExcuses'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">saveExcuse</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/actions/saveExcuse'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(130, 170, 255)">MainPage</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">currentExcuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> setCurrentExcuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useState</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">text</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">""</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> excuses </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useQuery</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">getAllSavedExcuses</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">handleGetExcuse</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token function" style="color:rgb(130, 170, 255)">setCurrentExcuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getExcuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">err</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">alert</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Error while getting the excuse: '</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> err</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">handleSaveExcuse</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">currentExcuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">text</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">saveExcuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">currentExcuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">err</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token dom variable" style="color:rgb(191, 199, 213)">window</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">alert</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Error while saving the excuse: '</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"> err</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">message</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">div className</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token string" style="color:rgb(195, 232, 141)">"grid grid-cols-2 text-3xl"</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">div</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">button onClick</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">handleGetExcuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> className</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token string" style="color:rgb(195, 232, 141)">"mx-2 my-1 p-2 bg-blue-600 hover:bg-blue-400 text-white rounded"</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token maybe-class-name">Get</span><span class="token plain"> excuse </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">button</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">button onClick</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">handleSaveExcuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> className</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token string" style="color:rgb(195, 232, 141)">"mx-2 my-1 p-2 bg-blue-600 hover:bg-blue-400 text-white rounded"</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token maybe-class-name">Save</span><span class="token plain"> excuse </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">button</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token maybe-class-name">Excuse</span><span class="token plain"> excuse</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">currentExcuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">div</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">div</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">div className</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token string" style="color:rgb(195, 232, 141)">"px-6 py-2 bg-blue-600 text-white"</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> </span><span class="token maybe-class-name">Saved</span><span class="token plain"> excuses</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">div</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">excuses </span><span class="token operator" style="color:rgb(137, 221, 255)">&amp;&amp;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token maybe-class-name">ExcuseList</span><span class="token plain"> excuses</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">excuses</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">div</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">div</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(130, 170, 255)">ExcuseList</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">props</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> props</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">excuses</span><span class="token operator" style="color:rgb(137, 221, 255)">?.</span><span class="token plain">length </span><span class="token operator" style="color:rgb(137, 221, 255)">?</span><span class="token plain">  props</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">excuses</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">excuse</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> idx</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token maybe-class-name">Excuse</span><span class="token plain"> excuse</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">excuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> key</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">idx</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'No saved excuses'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(130, 170, 255)">Excuse</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token parameter"> excuse </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain">div className</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token string" style="color:rgb(195, 232, 141)">"px-6 py-2"</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">excuse</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">text</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token operator" style="color:rgb(137, 221, 255)">/</span><span class="token plain">div</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token maybe-class-name">MainPage</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Our page consists of three components. <code>MainPage</code>, <code>ExcuseList</code> and <code>Excuse</code>. It may seem at first that this file is pretty complex. It’s not, so let’s look a bit closer. </p><p><code>Excuse</code> is just a div with an excuse text, <code>ExcuseList</code> checks if there are any excuses. If the list is empty – show a message <code>No saved excuses</code>. In other case – excuses will be displayed. </p><p><code>MainPage</code> contains info about the current excuses and the list of already saved excuses. Two buttons click handlers <code>handleGetExcuse</code> and <code>handleSaveExcuse</code>. Plus, the markup itself with some Tailwind flavor. </p><p><strong>4) Before starting an app – we need to execute database migration because we changed the DB schema by adding new entities. If you’ve had something running in the terminal – stop it and run:</strong></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">wasp db migrate-dev</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>You’ll be prompted to enter a name for the migration. Something like <code>init</code> will be ok. Now we can start the application!</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">wasp start</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" alt="Final empty result" src="/assets/images/final-result-96b2236068263477dad9a4268828e539.png" width="996" height="568" class="img_ev3q"></p><p>Now you can click the “Get excuse” button to receive an excuse. And save the ones you like into the DB with the “Save excuse” button. Our final project should look like this:</p><p><img loading="lazy" alt="Final result" src="/assets/images/final-excuse-app-0c228a553be0865e245d5e421f86ea27.png" width="996" height="568" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="it-would-have-taken-twice-as-long-to-build-it-properly">It would have taken twice as long to build it properly.<a class="hash-link" href="#it-would-have-taken-twice-as-long-to-build-it-properly" title="Direct link to heading">​</a></h2><p>Now we can think of some additional improvements. For example:</p><ul><li>1) Add a unique constraint to Entity’s ID so we won’t be able to save duplicated excuses. </li><li>2) Add exceptions and edge cases handling. </li><li>3) Make the markup prettier.</li><li>4) Optimize and polish the code </li></ul><p>So, we’ve been able to build a full-stack application with a database and external API call in a couple of minutes. And now we have a box full of excuses for all our development needs. </p><p><img loading="lazy" alt="Box of excuses for the win!" src="/assets/images/accessible-website-excuse-8ec8ef48df4347b8bfda47d4f5598c1b.jpg" width="717" height="554" class="img_ev3q"></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p>]]></content>
        <author>
            <name>Maksym Khamrovskyi</name>
        </author>
        <category label="wasp" term="wasp"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to get started with Haskell in 2022 (the straightforward way)]]></title>
        <id>/2022/09/02/how-to-get-started-with-haskell-in-2022</id>
        <link href="https://wasp-lang.dev/blog/2022/09/02/how-to-get-started-with-haskell-in-2022"/>
        <updated>2022-09-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Haskell is a unique and beautiful language that is worth learning, if for nothing else, then just for the concepts it introduces and their potential to expand your view on programming.]]></summary>
        <content type="html"><![CDATA[<p>Haskell is a unique and beautiful language that is worth learning, if for nothing else, then just for the concepts it introduces and their potential to expand your view on programming.</p><p>I have been programming in Haskell on and off since 2011 and professionally for the past 2 years, building a <a href="https://github.com/wasp-lang/wasp" target="_blank" rel="noopener noreferrer">compiler</a>. While in that time Haskell has become much more beginner-friendly, I keep seeing beginners who are overwhelmed by numerous popular options for build tools, installers, introductory educational resources, and similar. <a href="https://www.haskell.org/" target="_blank" rel="noopener noreferrer">Haskell’s homepage</a> getting a call from the previous decade to give them their UX back :D also doesn’t help!</p><p>That is why I decided to write this opinionated and practical post that will tell you exactly how to get started with Haskell in 2022 in the most standard / common way. Instead of worrying about decisions that you are not equipped to make at the moment (e.g. “what is the best build tool?”), you can focus on enjoying learning Haskell :)!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="tldr--super-opinionated-summary">TLDR / Super opinionated summary<a class="hash-link" href="#tldr--super-opinionated-summary" title="Direct link to heading">​</a></h2><ol><li>For setup, use <a href="https://www.haskell.org/ghcup/" target="_blank" rel="noopener noreferrer">GHCup</a>. Install GHC, HLS, and cabal.</li><li>As a build tool, use <a href="https://cabal.readthedocs.io/" target="_blank" rel="noopener noreferrer">cabal</a>.</li><li>For editor, use VS Code with <a href="https://marketplace.visualstudio.com/items?itemName=haskell.haskell" target="_blank" rel="noopener noreferrer">Haskell extension</a>. Or, use emacs/vim/....</li><li>Join <a href="https://www.reddit.com/r/haskell/" target="_blank" rel="noopener noreferrer">r/haskell</a>. Feel free to ask for help!</li><li>To learn the basics of Haskell, read the <a href="http://learnyouahaskell.com/" target="_blank" rel="noopener noreferrer">LYAH</a> book and <a href="https://lhbg-book.link/" target="_blank" rel="noopener noreferrer">build a blog generator in Haskell</a>. Focus on getting through stuff instead of understanding everything fully; you will come back to it later again.</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-setup-use-ghcup-for-seamless-installation">1. Setup: Use GHCup for seamless installation<a class="hash-link" href="#1-setup-use-ghcup-for-seamless-installation" title="Direct link to heading">​</a></h2><p><a href="https://www.haskell.org/ghcup/#" target="_blank" rel="noopener noreferrer">GHCup</a> is a universal installer for Haskell. It will install everything you need to program in Haskell and will help you manage those installations in the future (update, switch versions, and similar). It is simple to use and works the same way on Linux, macOS, and Windows. It gives you a single central place/method to take care of your Haskell installation so that you don’t have to deal with OS-specific issues.</p><p>To install it, follow instructions at <a href="https://www.haskell.org/ghcup/#" target="_blank" rel="noopener noreferrer">GHCup</a>. Then, use it to install the Haskell Toolchain (aka stuff that you need to program in Haskell). </p><p>Haskell Toolchain consists of:</p><ol><li>GHC -&gt; Haskell compiler</li><li>HLS -&gt; Haskell Language Server -&gt; your code editor will use this to provide you with a great experience while editing Haskell code</li><li>cabal -&gt; Haskell build tool -&gt; you will use this to organize your Haskell projects, build them, run them, define dependencies, etc.</li><li>Stack -&gt; cabal alternative, which you won’t need for now since we’ll go with cabal as our build tool of choice</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-build-tool-use-cabal">2. Build tool: Use cabal<a class="hash-link" href="#2-build-tool-use-cabal" title="Direct link to heading">​</a></h2><p>There are two popular build tools for Haskell: <a href="https://cabal.readthedocs.io/" target="_blank" rel="noopener noreferrer">cabal</a> and <a href="https://docs.haskellstack.org/" target="_blank" rel="noopener noreferrer">Stack</a>. Both are widely used and have their pros and cons. So, one of the hard choices beginners often face is which one to use.</p><p>Some time ago, cabal was somewhat hard to use (complex, “dependency hell”). That’s why Stack was created: a user-friendly build tool that solves some of the common issues of cabal. (Interestingly, Stack uses cabal’s core library as its backend!) However, as Stack was being developed, cabal advanced, too. Many of its issues have been solved, making it a viable choice for beginners.</p><p>In 2022, I recommend <code>cabal</code> to beginners. I find it a bit easier to understand when starting out (no resolvers), it works well out of the box with GHCup and the rest of the ecosystem, and it seems to be better maintained lately. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-editor-vs-code-is-a-safe-bet">3. Editor: VS Code is a safe bet<a class="hash-link" href="#3-editor-vs-code-is-a-safe-bet" title="Direct link to heading">​</a></h2><p>HLS (Haskell Language Server) brings all the cool IDE features to your editor. So, as long as your editor has a decent Haskell language extension that utilizes HLS, you are good.</p><p>The safest bet is to go with <strong>Visual Studio Code</strong> — it has a great <a href="https://marketplace.visualstudio.com/items?itemName=haskell.haskell" target="_blank" rel="noopener noreferrer">Haskell extension</a> that usually works out of the box. A lot of Haskell programmers also use Emacs and Vim. I can confirm they also have good support for Haskell. </p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="4-community-rhaskell-and-more">4. Community: r/haskell and more<a class="hash-link" href="#4-community-rhaskell-and-more" title="Direct link to heading">​</a></h2><p>Haskell community is a great place to ask for help and learn about new developments in the  ecosystem. I prefer <a href="https://www.reddit.com/r/haskell/" target="_blank" rel="noopener noreferrer">r/haskell</a> -&gt; it tracks all the newest events and no question goes unanswered. There is also <a href="https://discourse.haskell.org/" target="_blank" rel="noopener noreferrer">Haskell Discourse</a>, where a lot of discussions happen, including the more official ones. A lot of Haskellers are still active on <a href="https://wiki.haskell.org/IRC_channel" target="_blank" rel="noopener noreferrer">IRC</a>, but I find it too complex and outdated to use.</p><p><em>Check <a href="https://www.haskell.org/community" target="_blank" rel="noopener noreferrer">https://www.haskell.org/community</a> for a full list of Haskell communities.</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="5-learning-you-dont-need-a-math-degree-just-grab-a-book">5. Learning: You don’t need a math degree, just grab a book<a class="hash-link" href="#5-learning-you-dont-need-a-math-degree-just-grab-a-book" title="Direct link to heading">​</a></h2><p>There is a common myth going around that you need a special knowledge of math (PhD in category theory!) to be able to program in Haskell properly. From my experience, this is as far from the truth as it can be. It is certainly not needed, and I seriously doubt it helps even if you have it. Maybe for some very advanced Haskell stuff, but certainly not for junior/intermediate level.</p><p>Instead, learning Haskell is the same as learning other languages -&gt; you need a healthy mix of theory and practice. The main difference is that there will be more unusual/new concepts than you are used to, which will require some additional effort. But these new concepts are also what makes learning Haskell so fun!</p><p>I recommend starting with a book for beginners, <a href="http://learnyouahaskell.com/" target="_blank" rel="noopener noreferrer">LYAH</a>. It has an online version that you can read for free, or you can buy a printed version if you like physical books.</p><p>If you don't like LYAH, consider other popular books for beginners (none of them are free though):</p><ol><li><a href="https://haskellbook.com/" target="_blank" rel="noopener noreferrer">Haskell Programming from first principles</a></li><li><a href="https://www.manning.com/books/get-programming-with-haskell" target="_blank" rel="noopener noreferrer">Get Programming with Haskell</a></li><li><a href="https://www.amazon.com/Programming-Haskell-Graham-Hutton/dp/1316626229" target="_blank" rel="noopener noreferrer">Programming in Haskell</a></li></ol><p>Whatever book you go with, don’t get stuck for too long on concepts that are confusing to you, especially towards the end of the book. Some concepts will just need time to click; don’t expect to grasp it all on the first try. Whatever you do grasp from the first read will likely be more than enough to get going with your first projects in Haskell. You can always come back to those complex concepts later and understand them better. Also, don’t be shy to ask the community -&gt; there are many Haskellers out there happy to support you in your learning!</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>When I say "don't get stuck", I don't mean you should skip the difficult concept after the first hurdle. No, you should spend some hours experimenting, looking at it from different angles, playing with it, trying to crack it. But you shouldn't spend days trying to understand the same concept (e.g. function as a monad) and then feel defeated due to not grasping it 100%. Instead, if you put proper effort but stuff is not completely clicking, tap yourself on the back and move on for now.</p></div></div><p>Once you take the first pass through the book, I recommend doing a project or two. You can come up with an idea yourself, or you can follow one of the books that guide you through it. </p><p>For example:</p><ol><li><a href="https://lhbg-book.link/" target="_blank" rel="noopener noreferrer">Learn Haskell by building a blog generator</a> -&gt; free, starts from 0 knowledge, and could even be used as the very first resource, instead of e.g. LYAH.</li><li><a href="https://marcosampellegrini.com/simple-haskell-book" target="_blank" rel="noopener noreferrer">The Simple Haskell Handbook</a> -&gt; not free, expects you to know the basics of Haskell already</li></ol><p>Once you have more experience with projects, I would recommend re-reading your beginner book of choice. This time, you can skip the parts you already know and focus on what was confusing before. You will likely have a much easier time grasping those harder concepts.</p><p>p.s. If you are looking for a bit of extra motivation, check the blog post my teammate Shayne recently wrote about <a href="https://wasp-lang.dev/blog/2022/08/26/how-and-why-i-got-started-with-haskell" target="_blank" rel="noopener noreferrer">his journey with Haskell</a>. He started in late 2021 and has already made huge progress!</p><hr><p><em>Good luck with Haskell! If you have Haskell questions for me or the rest of the Wasp team, drop me a line at <code>“martin” ++ “@” ++ concat [”wasp”, “-”, “lang”] &lt;&gt; “.dev”</code> , or write to #haskell channel in <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">Wasp-lang Discord server</a>.</em></p>]]></content>
        <author>
            <name>Martin Sosic</name>
            <uri>https://github.com/martinsos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="haskell" term="haskell"/>
        <category label="language" term="language"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How and why I got started with Haskell]]></title>
        <id>/2022/08/26/how-and-why-i-got-started-with-haskell</id>
        <link href="https://wasp-lang.dev/blog/2022/08/26/how-and-why-i-got-started-with-haskell"/>
        <updated>2022-08-26T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[I have been programming professionally for over a decade, using a variety of languages day-to-day including Ada, C, Java, Ruby, Elixir, and JavaScript. I’ve also tried some obscure ones, albeit less frequently and for different purposes: MIPS assembly language and OCaml for academic work (I’m a BS, MS, and PhD dropout in CS), and Zig for some side projects. In short, I like learning new languages (at least at a surface level) and have been exposed to different programming paradigms, including functional.]]></summary>
        <content type="html"><![CDATA[<p>I have been programming professionally for over a decade, using a variety of languages day-to-day including Ada, C, Java, Ruby, Elixir, and JavaScript. I’ve also tried some obscure ones, albeit less frequently and for different purposes: MIPS assembly language and OCaml for academic work (I’m a BS, MS, and PhD dropout in CS), and Zig for some side projects. In short, I like learning new languages (at least at a surface level) and have been exposed to different programming paradigms, including functional.</p><p>Yet, I have never done Haskell. I’ve wanted to learn it since my college days, but never got the time. In late 2021, though, my curiosity took over. I wanted to see for myself if the mystique and the Kool-Aid hype (or hate) around it are justified. :P So, I decided I’d start learning it on the side and also look for a company that uses it as my next gig. That’s how my Haskell journey started, and <a href="https://wasp-lang.dev/blog/2021/12/21/shayne-intro" target="_blank" rel="noopener noreferrer">how I got into Wasp</a> a few months later.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-learn-haskell">Why learn Haskell?<a class="hash-link" href="#why-learn-haskell" title="Direct link to heading">​</a></h2><p>Haskell seems to have an aura of superiority around it. Many niche and heavily academically-inspired languages do. These languages seem to be used by the enlightened minds and allow you to quickly write complex programs in a fraction of the time with significantly less code. Lisp is amongst these languages, too. Yet, nobody uses them for anything real — only toy projects. (While stroking their long, grey beards under a tree, ruminating on the philosophy of computer science.) At least, that’s the impression I got in college and at work. So, what makes Haskell interesting to learn, let alone want to use professionally?</p><p><strong>First, it is functional as it gets.</strong> While I have used lambdas and functional concepts like <code>map</code> in non-functional languages, the fact that these were my <em>only</em> choice was really interesting to me. After years of extensive OO usage, I’ve come to appreciate this epigram by Alan Perlis. I think it captures a mindset shift between the two paradigms:</p><blockquote><p>“It is better to have 100 functions operate on one data structure than 10 functions on 10 data structures.” — Alan Perlis</p></blockquote><p>In OO, you create lots of classes with lots of methods. In functional, you have far fewer data structures (mostly list) with a lot more functions. So basically more functions to operate on fewer nouns, whereas OO is lots of nouns, each with many bespoke methods. (The first comment on <a href="https://stackoverflow.com/questions/6016271/why-is-it-better-to-have-100-functions-operate-on-one-data-structure-than-10-fun" target="_blank" rel="noopener noreferrer">this Stack Overflow thread</a> explains it really well.)</p><p>Besides, I liked the idea of referential transparency when writing pure functions. It means that you get the same result back every time you invoke a function, without fear of unknown side effects. (But the language does offer the flexibility to have side effects like IO, via Monads.) I also liked having only immutable data structures — they make reasoning about the system and data flow easier. There were many things like these two that I liked. The point is that thinking functionally really changes the way you structure and solve problems, so I was curious to give it a go.</p><p><strong>Second, Haskell is lazy.</strong> While there are pros and cons to this, it feels undeniably different. Most languages are strict, in that all function arguments are evaluated before invoking a function. This is required because of side effects; to have some expectations regarding the order in which things will run. Haskell does the opposite: it delays evaluation until it’s actually needed.</p><p>One contrived yet helpful example of laziness is infinite data structures. Below, we define <code>fibs</code> as an infinite <code>List</code> of <code>Integer</code> values, by using references to <em>itself</em>! (You can find a runnable example <a href="https://replit.com/@ShayneCzyzewsk1/LazyHaskellExample?v=1#Main.hs" target="_blank" rel="noopener noreferrer">here</a>.) </p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">fibs</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token constant" style="color:rgb(130, 170, 255)">Integer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">fibs</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">0</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">zipWith</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token hvariable">fibs</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token builtin" style="color:rgb(130, 170, 255)">tail</span><span class="token plain"> </span><span class="token hvariable">fibs</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token builtin" style="color:rgb(130, 170, 255)">take</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">10</span><span class="token plain"> </span><span class="token hvariable">fibs</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">-- [0,1,1,2,3,5,8,13,21,34]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>There’s a downside to laziness, too. It makes it harder to reason about performance and resource utilization. But the idea that you can define things in a declarative way but know that they are evaluated only when needed is a pretty eye-opening way to program.</p><p>To sum up: Haskell is functional, lazy, and strongly statically typed. Just the trifecta that gets me out of bed in the morning! :D So, how did I go about learning it?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hello-haskell">Hello Haskell!<a class="hash-link" href="#hello-haskell" title="Direct link to heading">​</a></h2><p>I started by reading the canonical Haskell newbie resource, “<em><a href="http://learnyouahaskell.com/" target="_blank" rel="noopener noreferrer">Learn You a Haskell for Great Good!</a>,</em>” often abbreviated LYAH. It was very entertaining, and I learned a lot from it. At times, I wanted it to get to the point more quickly. Still, despite the amusing images and often lengthy examples, it provided me with a great conceptual foundation. I highly recommend it as your first read — it is a really well-written resource for beginners.</p><p>After I was about 80% done with LYAH, I switched to a more recent but still popular book: “<em><a href="https://haskellbook.com/" target="_blank" rel="noopener noreferrer">Haskell Programming from First Principles</a></em>.” I liked that it started with fundamentals and then moved to more complex topics, slowly but steadily developing my understanding. It was pretty long, though, and sometimes went too far into the weeds. It also had a tinge of intellectual flexing at certain points. Still, it was a good read. I’d read it again if I were starting over.</p><p>I also tried <a href="https://github.com/google/haskell-trainings" target="_blank" rel="noopener noreferrer">a Haskell course from Google</a>. Despite being brief, it explains the key concepts in a relatively complete way. If videos are your thing, it might be a solid way to get up to speed.</p><p>In short, skimming an intro book to get your foundation solid would be the best bet. I’d also recommend trying out many different online resources when covering more intermediate topics, like Monad Transformers, for example. And don’t worry if it takes a while to start feeling comfortable with things that are pretty specific to Haskell! It just takes some time, and often it is more confusing to derive/deeply understand than to just start using them at first. The understanding will come over time. (Of course, sometimes <a href="https://adit.io/posts/2013-04-17-functors,_applicatives,_and_monads_in_pictures.html" target="_blank" rel="noopener noreferrer">pictures</a> help!)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="setup-and-ide-support">Setup and IDE support<a class="hash-link" href="#setup-and-ide-support" title="Direct link to heading">​</a></h2><p>Getting Haskell up and running was surprisingly straightforward, even though I ran it on an M1 MacBook Air, which was considered a pretty new architecture in 2021. Since the entire toolchain was not fully ARM-compatible back then, some of the setup advice required a bit of modification. But that was no big deal: I used <code>ghcup</code>, installed HLS in VS Code, and bam! — I had Haskell up and running. It was a pretty nice experience. </p><p>Some minor downsides I recall:</p><ul><li>There doesn’t seem to be a consensus on which build and package management tool to use, Cabal or Stack. However, unless you’re doing something super specific, it’s not an irreversible decision. At Wasp, we started with Stack but then migrated to Cabal since it better fit our setup and workflows. It was pretty seamless.</li><li>One thing I do miss from other IDEs is breakpoint debugging. Technically, there’s <em>some</em> support for it in Haskell, but I don’t think many use it. Breakpoints and lazy evaluation don’t seem to be BFFs.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="0-60-at-work">0-60 at work<a class="hash-link" href="#0-60-at-work" title="Direct link to heading">​</a></h2><p>For someone with experience in several different languages, it is pretty achievable to be able to solve minor bugs/features in Haskell after a few weeks of learning. At least, it was for me. I certainly struggled on best practices and such, and my code reviews involved some Haskell golfing comments for sure :) But I could make it do what I wanted it to do from the functionality perspective. Kudos to the mostly helpful compiler errors (with a bit of practice reading) and the Internet!</p><p>Hopefully, your code base demonstrates established project and Haskell patterns, so you can learn as you poke around, and your early code reviewers are supportive coworkers who can explain things as part of their suggestions. I was quite fortunate in that regard: the Wasp team values teaching and learning, and the codebase uses what is called “Simple Haskell”, which limits the use of excessive language extensions in the hopes to keep the core language and concepts as tight as possible. (Note: there are Haskell experts who view this as a severe limitation of the capabilities of the language, but as a newbie, I was happy they did it.)</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="so-was-the-juice-worth-the-squeeze">So, was the juice worth the squeeze?<a class="hash-link" href="#so-was-the-juice-worth-the-squeeze" title="Direct link to heading">​</a></h2><p>Learning Haskell took considerable time and effort. It was completely different from any language I had used before. Yet, I am very happy I embarked on this journey. Even if you do not intend to get a job using Haskell, I still think learning it is worthwhile just to expand your programming point of view and master functional concepts. And for a select set of project types (like writing a compiler for a full-stack web DSL), I feel it really will make you more productive over time. Give an intro to Haskell tutorial or video a try some weekend and let me know what you think! I’m at shayne at wasp-lang dot dev dot com.</p>]]></content>
        <author>
            <name>Shayne Czyzewski</name>
            <uri>https://github.com/shayneczyzewski</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="haskell" term="haskell"/>
        <category label="language" term="language"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to communicate why your startup is worth joining]]></title>
        <id>/2022/08/15/how-to-communicate-why-your-startup-is-worth-joining</id>
        <link href="https://wasp-lang.dev/blog/2022/08/15/how-to-communicate-why-your-startup-is-worth-joining"/>
        <updated>2022-08-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Except for a handful of companies who send people to Mars or develop AGI, most startups don’t seem to offer a good reason to join them. You go to their websites and all you see is vague, baseless, overly generic mission-schmission/values-schvalues HR nonsense that supposedly should turn you into a raving fan of whatever they’re doing and make you hit that “Join” button until their servers crash. Well…]]></summary>
        <content type="html"><![CDATA[<p>Except for a handful of companies who send people to Mars or develop AGI, most startups don’t seem to offer a good reason to join them. You go to their websites and all you see is vague, baseless, overly generic mission-schmission/values-schvalues HR nonsense that supposedly should turn you into a raving fan of whatever they’re doing and make you hit that “Join” button until their servers crash. Well…</p><p>Some people think that’s because most startups aren’t worth joining. I disagree. This argument generalizes one’s own reasons for joining a startup onto every other human being out there, which is unlikely to be true. I think most startups, no matter how ordinary, <em>do</em> have a reason to join them; <em>a good reason</em>; even <em>many good reasons</em> — they just fail to communicate them well. They’re like a shy nerd on Tinder with an empty bio and no profile pic: a kind, intelligent, and thoughtful human being who, unfortunately, will be ruthlessly swiped left — not because he’s a bad match but because his profile doesn’t show why he’s a good one.</p><p>Visually, this “Tinder profile problem” looks like this:</p><div><p align="center"></p><figure><img alt="Illustration of candidates not seeing why to join a startup" src="/img/worth-joining/illustration-1-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Now, look what would happen if a startup communicated a bit better. Suddenly, our candidates could see a reason to join. If the reason is good, they might even swipe right.</p><div><p align="center"></p><figure><img alt="Illustration of candidates seeing one reason to join a startup" src="/img/worth-joining/illustration-2-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>But most startups have <em>many</em> good reasons to join them. If only they communicated well, the outcome would be something like this:</p><div><p align="center"></p><figure><img alt="Illustration of candidates seeing many reasons to join; one candidate already running for it" src="/img/worth-joining/illustration-3-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Now, you’re probably wondering just what exactly those reasons are.</p><p>Here’s a rough list:</p><ol><li>The founders are interesting / fun / smart / human / you name it</li><li>The team is great</li><li>The culture is amazing</li><li>The business is doing well</li></ol><p>However, if you just copy this list and paste it on your jobs page, you will accomplish nothing. The candidates will never believe you. What you need to do instead is to <em>supply them with a system of concretes (facts) from which their minds will form these abstract conclusions.</em></p><p>For example:</p><ul><li>Instead of declaring that “the founders are reflective, thoughtful, and persistent,” show them how so, like Sarah from Canny does by writing comprehensive year-in-review blog posts for <a href="https://canny.io/blog/year-four-in-review/" target="_blank" rel="noopener noreferrer">four years in a row</a>.</li><li>Instead of proclaiming that “the founders are humble and can have fun,” show them how so, like Michael from Fibery did by becoming a hero of <a href="https://fibery.io/remote" target="_blank" rel="noopener noreferrer">this hilarious page</a>. (No businessy founder would ever agree to make this public. Michael did.)</li><li>Instead of purporting that “the team is great” or “you’ll work alongside very smart people” (God, I hate that one!), show them who exactly those people are, as PostHog does <a href="https://posthog.com/handbook/company/team" target="_blank" rel="noopener noreferrer">here</a> and Wasp does <a href="https://wasp-lang.dev/blog/2021/12/21/shayne-intro" target="_blank" rel="noopener noreferrer">here</a> and <a href="https://wasp-lang.dev/blog/2022/05/31/filip-intro" target="_blank" rel="noopener noreferrer">here</a>.</li></ul><p>In the rest of the post, I’ll go through the four broad reasons to join a startup one by one and show real-life examples of communicating them well. In the end, I will explain how these four reasons, communicated well, fuse into two compelling messages that will interest any candidate.</p><p>One last thing. For the sake of clarity and comprehension, I will write in the second person. Instead of saying “candidates would never believe them,” I will say “you would never believe them.” It’s much easier to read and understand.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="possible-reasons-why-your-startup-is-worth-joining-and-how-to-communicate-them-well"><strong>Possible reasons why your startup is worth joining, and how to communicate them well</strong><a class="hash-link" href="#possible-reasons-why-your-startup-is-worth-joining-and-how-to-communicate-them-well" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-founders--or-the-founders-are-interesting--fun--smart--human--you-name-it"><strong>1. FOUNDERS — or, the founders are interesting / fun / smart / human / you name it</strong><a class="hash-link" href="#1-founders--or-the-founders-are-interesting--fun--smart--human--you-name-it" title="Direct link to heading">​</a></h3><p>Most startups have curious, interesting, ambitious, terribly smart founders; the kind most of us would love to work for if we had a chance. Sadly, only a few leverage this asset. In most cases, all you get is a small round pic with a fancy title and a few abstract, high-level sentences that cause no excitement whatsoever. What a shame!</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-canny-commmunicates-who-their-founders-are"><strong>How Canny commmunicates who their founders are</strong><a class="hash-link" href="#how-canny-commmunicates-who-their-founders-are" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="founder-stories-blog-category"><strong>Founder Stories blog category</strong><a class="hash-link" href="#founder-stories-blog-category" title="Direct link to heading">​</a></h5><p>The first notable thing Canny does is the <a href="https://canny.io/blog/founder-stories/" target="_blank" rel="noopener noreferrer">Founder Stories category</a> in their blog. By quickly skimming the posts, you can understand that Sarah and Andrew (the founders):</p><ul><li>Accept their mistakes, talk about them, and learn from them. Even if the issue is sensitive, like firing people. (<a href="https://canny.io/blog/reflections-two-year-founder/" target="_blank" rel="noopener noreferrer">Reflections from the last 2 years as a founder</a>, <a href="https://canny.io/blog/hire-fire/" target="_blank" rel="noopener noreferrer">First hire to first fire</a>.)</li><li>Are reflective, thoughtful, and persistent people. (<a href="https://canny.io/blog/how-we-built-a-1m-arr-saas-startup/" target="_blank" rel="noopener noreferrer">How we built a $1m ARR SaaS startup</a>, <a href="https://canny.io/blog/year-four-in-review/" target="_blank" rel="noopener noreferrer">Year four in review: Overcoming the unexpected</a>.)</li><li>Have very definite, clear values. But, more importantly, stand up to them, even if that means losing revenue. (<a href="https://canny.io/blog/saying-no-big-customers/" target="_blank" rel="noopener noreferrer">Saying no to big customers</a>.)</li></ul><p>If they just pinned this list of virtues to their Jobs page, you would never believe them. Instead, Sarah and Andrew show what actions they take, how they work, how they think, <em>how they live</em> — and you make up their own mind about what kind of people Sarah and Andrew are from seeing all that. The difference is enormous.</p><p>Note their writing style. They don’t claim to be know-it-alls with titles like “How <em>to</em> bootstrap your startup.” Instead, they write “How <em>we</em> Bootstrapped <em>our</em> SaaS Startup to Ramen Profitability.” They cover only what they know instead of overgeneralizing. This shows both expertise and humility.</p><div><p align="center"></p><figure><img alt="A screenshot of Canny's Founder Stories blog category" src="/img/worth-joining/canny-founder-stories-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="personal-instagram"><strong>Personal Instagram</strong><a class="hash-link" href="#personal-instagram" title="Direct link to heading">​</a></h5><p>The second thing Sarah and Andrew do well to communicate who they are is their <a href="https://www.instagram.com/carryoncode/" target="_blank" rel="noopener noreferrer">Instagram</a>. They don’t post glamorous keynote appearances, as many entrepreneurs do. They share the actual day-to-day working life — both the fun and the struggle. It gives you a good idea of what they’re after in life. (Not keynotes.) That’s why it works, and that’s why people love it.</p><div><p align="center"></p><figure><img alt="A photo from Sarah and Andrew's personal Instagram" src="/img/worth-joining/canny-instagram-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p><em>Side note: Sarah explains how she develops the Canny brand in <a href="https://canny.io/blog/building-your-brand-with-storytelling/" target="_blank" rel="noopener noreferrer">this post</a>. If you want to build a good one, give it a read. She also wrote about how they attract top talent. You can read it <a href="https://canny.io/blog/startup-attract-top-talent/" target="_blank" rel="noopener noreferrer">here</a>.</em></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-fibery-communicates-who-their-founder-is"><strong>How Fibery communicates who their founder is</strong><a class="hash-link" href="#how-fibery-communicates-who-their-founder-is" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="startup-diary-blog-post-series"><strong>Startup Diary blog post series</strong><a class="hash-link" href="#startup-diary-blog-post-series" title="Direct link to heading">​</a></h5><p>While you can get a pretty good idea of Michael (the founder) from the hilarious “<a href="https://fibery.io/remote" target="_blank" rel="noopener noreferrer">Remote</a>” page Fibery shipped last year, his <a href="https://fibery.io/blog/startup-diary" target="_blank" rel="noopener noreferrer">Startup Diary post series</a> offers an even better insight into his soul. In these monthly posts, Michael honestly shares everything that’s going on with Fibery, including the good, the bad, and the ugly: firing people for poor performance, losing important customers, and failing to reach product-market fit. The fact that he’s already written 45 of those (as of Aug 2022) is also telling. And he’s not a native English speaker. If he can do that, why can’t you?</p><div><p align="center"></p><figure><img alt="A screenshot of Fibery's Startup Diary blog category" src="/img/worth-joining/fibery-startup-diary-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="crazy-challenges"><strong>Crazy challenges</strong><a class="hash-link" href="#crazy-challenges" title="Direct link to heading">​</a></h5><p>Besides writing the Startup Diary, Michael also embarks on crazy challenges like <a href="https://fibery.io/blog/100-posts-about-products" target="_blank" rel="noopener noreferrer">writing 100 posts about products</a>. Only a passionate, driven person would commit to such a thing. You cannot help but respect him for it. (Before this challenge, he wrote 100 Medium posts in 100 days in 2018. You can read them <a href="https://mdubakov.medium.com/" target="_blank" rel="noopener noreferrer">here</a>. Just scroll a few screens to reach the old stuff.)</p><div><p align="center"></p><figure><img alt="A screenshot of Fibery's 100 posts about products blog category" src="/img/worth-joining/fibery-challenges-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>If you look carefully, you’ll notice that Michael’s thinking about building a company is different from Sarah’s. For example, he despises the gentle, soothing “Oh don’t worry that it didn’t work out; you did such a good work!” approach, which is ubiquitous in the modern startup world. Instead, he states that <a href="https://fibery.io/blog/dissatisfaction-leads-to-progress/" target="_blank" rel="noopener noreferrer">dissatisfaction leads to progress</a>, referring to the famous <a href="https://youtu.be/xDAsABdkWSc" target="_blank" rel="noopener noreferrer">“Not quite my tempo”</a> scene from Whiplash. Does that make you like him more than Sarah?</p><p>It depends. If you believe that being soft and balanced is better, you’ll go with Sarah; if you believe that real progress comes only from working yourself to the bone, you’ll go with Michael (or Elon). The important thing is that both founders have their own, unique viewpoints of how things should be done, and that they communicate these viewpoints as-is instead of chopping their legs off to fit the latest Procrustean fad.</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="in-depth-original-blog-posts-about-the-industry"><strong>In-depth, original blog posts about the industry</strong><a class="hash-link" href="#in-depth-original-blog-posts-about-the-industry" title="Direct link to heading">​</a></h5><p>Some entrepreneurs say that doing a startup is like “jumping off a cliff and building your wings on the way down.” Some of it might be true. But if you want <em>reasonable</em> people to jump with you, you better tell them that you have a degree in engineering and know how to assemble wings in a free fall. Otherwise, the only team you’ll recruit is a suicide squad looking for a splashy hit.</p><p>To communicate his expertise, Michael writes in-depth, original, theoretical posts about the nature of knowledge management and organizational productivity. These posts are gems, both literally and metaphorically. (They’re filed under the <a href="https://fibery.io/blog/gems" target="_blank" rel="noopener noreferrer">Gems category</a> in the <a href="https://fibery.io/blog/" target="_blank" rel="noopener noreferrer">Fibery blog</a>.)</p><p>For example:</p><ul><li><a href="https://fibery.io/blog/fibery-vision-v1/" target="_blank" rel="noopener noreferrer">Fibery.io Vision v.1: Getting Started</a></li><li><a href="https://fibery.io/blog/the-next-wave-of-work-management-software/" target="_blank" rel="noopener noreferrer">The Next Wave of Work Management Software</a></li><li><a href="https://fibery.io/blog/augmenting-organizational-intelligence/" target="_blank" rel="noopener noreferrer">Augmenting Organizational Intelligence</a></li><li><a href="https://fibery.io/blog/use-networks-to-prioritize-product-features/" target="_blank" rel="noopener noreferrer">Use Networks to Prioritize Product Features</a></li></ul><p>After reading these articles, you understand not only that Michael really knows how to build wings while falling off the cliff, but that he has already jumped a few times. (Prior to Fibery, Michael had worked on knowledge management for more than a decade. He also had built a successful project management software, <a href="https://www.apptio.com/products/targetprocess/" target="_blank" rel="noopener noreferrer">Targetprocess</a>.) You know that he’s an expert who can be trusted.</p><p>Interestingly, even though Michael writes differently from Sarah, they both leverage what they’re good at. Sarah does not try to produce treatises on software development philosophy, and Michael doesn’t gush out with his personal learnings from building a startup. That, I think, is the right way to do it.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-posthog-communicates-who-their-founders-are"><strong>How PostHog communicates who their founders are</strong><a class="hash-link" href="#how-posthog-communicates-who-their-founders-are" title="Direct link to heading">​</a></h4><p>PostHog’s founders James and Tim don’t write 100 posts in 100 days or run a personal Instagram. But they’ve come up with something else to communicate what kind of people they are. And it’s something unique.</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="well-written-concise-bio"><strong>Well-written, concise bio</strong><a class="hash-link" href="#well-written-concise-bio" title="Direct link to heading">​</a></h5><p>First, both founders have decent <a href="https://posthog.com/handbook/company/team" target="_blank" rel="noopener noreferrer">profiles</a> in the company handbook. These bios are short, clear, and humane. They’re also very specific. Where else have you seen the name of the CEO’s cat?</p><div><p align="center"></p><figure><img alt="A screenshot of James Hawkins' bio in the PostHog Handbook" src="/img/worth-joining/posthog-james-bio-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="personal-readme-files"><strong>Personal README files</strong><a class="hash-link" href="#personal-readme-files" title="Direct link to heading">​</a></h5><p>Second, both James and Tim have an extensive README file (<a href="https://posthog.com/handbook/company/team/james-hawkins" target="_blank" rel="noopener noreferrer">one</a>, <a href="https://posthog.com/handbook/company/team/tim-glaser" target="_blank" rel="noopener noreferrer">two</a>) on how to work with them. These files give you an insight into their productivity habits, interests, and quirks. In fact, after reading them, you will likely have a better idea of the founders than you’d usually get from working at a company for a month!</p><p>For instance, James’s file has sections like:</p><ul><li><strong>Short bio.</strong> Includes very specific details like: “I tend to work 9am to 5pm with an hour for lunch, then I have a gap to have dinner with my family, then 9pm to around 11pm ish.”</li><li><strong><em>Very clear</em> areas of responsibility.</strong> No need to wonder what the hell the CEO is doing anymore!</li><li><strong>Quirks.</strong> These are remarkably humble and open-minded, like:<ul><li>“If I haven’t responded to something that you’ve sent me, that’s probably because I’ve read it and don’t feel particularly strongly - so just make a call on what to do if you don’t hear back in a reasonable time frame.”</li><li>“I’m a little disorganized. I compensate for this by making sure the teams I work on have this skill. Often I think this actually helps me prioritize the things that really matter.”</li><li>Explaining these quirks is an ingenious move. Besides explaining how to work with James, this section communicates that he’s profoundly self-aware and willing to accept and leverage his weaknesses. These qualities are very rare and incredibly valuable.</li></ul></li><li><strong>What I value.</strong> In stark contrast to most HR nonsense, these values are very clear, very specific, and written in English rather than HRese. (I just came up with this term: it means “legalese but for HR.”) Here are two examples:<ul><li>“Proactivity. Do not ask me for permission to do things - I wouldn’t have hired you if I didn’t trust you. I’d rather 9 things get done well and 1 thing I disagree with than we don’t get anything done at all.”</li><li>“Directness impresses me. If you don’t like something please just say so. It makes for much healthier relationships.”</li></ul></li></ul><p>In addition to that, there’s also: How I can help you, How you can help me, My goals until end December 2022 (very specific!), Personal strategy, Execution todo (including “1 bike ride a week”!) and Archived todo.</p><p>In summary, this README page is a gem. I wish more founders had them.</p><div><p align="center"></p><figure><img alt="A screenshot of James Hawkins' README in the PostHog Handbook" src="/img/worth-joining/posthog-james-readme-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-we-at-wasp-communicate-who-our-founders-are"><strong>How we at Wasp communicate who our founders are</strong><a class="hash-link" href="#how-we-at-wasp-communicate-who-our-founders-are" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="who-we-are-section-of-every-job-description-page"><strong>“Who we are” section of every job description page</strong><a class="hash-link" href="#who-we-are-section-of-every-job-description-page" title="Direct link to heading">​</a></h5><p>Matija and Martin (the founders of Wasp) embedded a concise description of who they are right into each <a href="https://www.notion.so/402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer">job description page</a> in Notion. They knew that this is the first company artifact many candidates will see. So they saved candidates time and effort on digging up who the hell started Wasp.</p><p>Note the language and substance of this list. When you read it, you immediately get a sense of who Matija and Martin are as people — fun, easygoing, no-corporate-bullshit kinda guys. Now imagine it said something “more normal,” like: “The company was founded by seasoned entrepreneurs…” What impression would that make?</p><div><p align="center"></p><figure><img alt="A screenshot of Wasp's job description page" src="/img/worth-joining/wasp-who-we-are-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-team--or-the-team-is-great"><strong>2. TEAM — or, the team is great</strong><a class="hash-link" href="#2-team--or-the-team-is-great" title="Direct link to heading">​</a></h3><p>It is startling how little most startups tell you about their teams. Often all you get is a chessboard of faces and titles, which gives you no idea who these people are <em>as people</em> or how working with them will feel like<em>.</em> Given how crucial a reason “great team” is for most candidates, improving how you communicate it seems like a low-hanging fruit.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-canny-communicates-who-is-on-their-team"><strong>How Canny communicates who is on their team</strong><a class="hash-link" href="#how-canny-communicates-who-is-on-their-team" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="decent-team-page"><strong>Decent team page</strong><a class="hash-link" href="#decent-team-page" title="Direct link to heading">​</a></h5><p>The Canny’s difference starts with a team page. It has a dense summary of who each team member is as a person and includes high-quality, lively photos of everybody.</p><div><p align="center"></p><figure><img alt="A screenshot of Canny's Team page" src="/img/worth-joining/canny-team-bios-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Look how specific those bios are. In most cases, all you get here is a generic “developer” or “marketer” without any personal details. Bios of robots, not people. No wonder nothing comes to mind, except perhaps for Agent Smith. But Canny’s bios are different. When you read them, you can actually imagine the person! They’re Neos in the world of Smiths.</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="remarkable-why-work-at-canny-blog-post"><strong>Remarkable “Why work at Canny” blog post</strong><a class="hash-link" href="#remarkable-why-work-at-canny-blog-post" title="Direct link to heading">​</a></h5><p>From there, it gets only better. Canny’s chief weapon for explaining their team is a blog post, the “<a href="https://canny.io/blog/work-at-canny/" target="_blank" rel="noopener noreferrer">Why work at Canny</a>” blog post. Sarah wrote it back in the summer of 2021. It is full of quotes from team members and photos of their workdays and vacations. <em>Real photos of real people</em>. No wonder the comments section under the post abounds with raving fans willing to join the team straight away!</p><div><p align="center"></p><figure><img alt="A screenshot of comments under the Canny's Why work at Canny blog post" src="/img/worth-joining/canny-why-work-post-comments-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Perhaps the best thing about this post is how little work it takes to create one. I imagine that collecting the data took some time, but the actual writing (it’s an 11-min read) took no more than a week. A week of work for a candidate magnet of such tremendous power? Sounds like a deal.</p><p><em>P.s. Sarah writes a lot more about their team in her yearly review posts, but I decided not to elaborate on those for the sake of clarity. You can check them out here: <a href="https://canny.io/blog/lessons-learned-bootstrapping-saas/" target="_blank" rel="noopener noreferrer">year 1</a>, <a href="https://canny.io/blog/year-two-lessons-bootstrapping/" target="_blank" rel="noopener noreferrer">year 2</a>, <a href="https://canny.io/blog/year-three-lessons-bootstrapped-startup/" target="_blank" rel="noopener noreferrer">year 3</a>, and <a href="https://canny.io/blog/year-four-in-review/" target="_blank" rel="noopener noreferrer">year 4</a>.</em></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-fibery-communicates-who-is-on-their-team"><strong>How Fibery communicates who is on their team</strong><a class="hash-link" href="#how-fibery-communicates-who-is-on-their-team" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="weird-about-us-page"><strong>Weird About Us page</strong><a class="hash-link" href="#weird-about-us-page" title="Direct link to heading">​</a></h5><p>Unlike Canny and PostHog’s, Fibery’s <a href="https://fibery.io/about-us" target="_blank" rel="noopener noreferrer">About Us</a> page doesn’t reveal much info about each team member. You will find no bios or README files there. But it clearly tells you one thing: the team is a bunch of weirdos. So, if weird is your thing, you’ll be attracted to Fibery like a moth to a flame. (Side note: Fibery managed to clearly explain their vision in one paragraph. This is rare.)</p><div><p align="center"></p><figure><img alt="A screenshot of Fibery's About Us page" src="/img/worth-joining/fibery-about-us-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="team-related-parts-of-startup-diary"><strong>Team-related parts of Startup Diary</strong><a class="hash-link" href="#team-related-parts-of-startup-diary" title="Direct link to heading">​</a></h5><p>I’ve already mentioned Michael’s <a href="https://fibery.io/blog/startup-diary" target="_blank" rel="noopener noreferrer">Startup Diary</a> monthly blog series. What I didn’t say is that each post communicates something about the team: who did what that month, random Slack posts (links, quotes, tweets, and images), etc. If someone new joined that month, Michael writes a few paragraphs explaining who that person is, where they come from, what they’re going to do at Fibery, and even attaches a photo. Like <a href="https://fibery.io/blog/chronicles-36/" target="_blank" rel="noopener noreferrer">Chris</a>.</p><div><p align="center"></p><figure><img alt="A screenshot of Fibery's Startup Diary blog post" src="/img/worth-joining/fibery-chris-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-posthog-communicates-who-is-on-their-team"><strong>How PostHog communicates who is on their team</strong><a class="hash-link" href="#how-posthog-communicates-who-is-on-their-team" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="team-section-in-the-company-handbook"><strong>Team section in the company handbook</strong><a class="hash-link" href="#team-section-in-the-company-handbook" title="Direct link to heading">​</a></h5><p>At PostHog, every team member has a well-written, few-paragraphs-long bio and a stylish illustration on the <a href="https://posthog.com/handbook/company/team" target="_blank" rel="noopener noreferrer">Team section</a> of the <a href="https://posthog.com/handbook/" target="_blank" rel="noopener noreferrer">PostHog’s Handbook</a>. (Which is a work of art worthy of its own blog post, by the way.) Many team members have their own README files, like the founders do. Check out Lottie Coxon’s, PostHog’s Graphic Designer’s README <a href="https://posthog.com/handbook/company/team/lottie-coxon" target="_blank" rel="noopener noreferrer">here</a>, and some others <a href="https://posthog.com/handbook/company/team/yakko-majuri" target="_blank" rel="noopener noreferrer">here</a> and <a href="https://posthog.com/handbook/company/team/karl-aksel-puulmann" target="_blank" rel="noopener noreferrer">here</a>. Even a quick read through these bios and READMEs gives you a good idea of who PostHog has on board.</p><div><p align="center"></p><figure><img alt="A screenshot of PostHog's team section in the handbook" src="/img/worth-joining/posthog-team-1-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><div><p align="center"></p><figure><img alt="Another screenshot of PostHog's team section in the handbook" src="/img/worth-joining/posthog-team-2-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="day-in-life-videos-from-employees"><strong>Day-in-life videos from employees</strong><a class="hash-link" href="#day-in-life-videos-from-employees" title="Direct link to heading">​</a></h5><p>In addition to bios and READMEs, PostHog has <a href="https://youtu.be/xlODCLrZyvM" target="_blank" rel="noopener noreferrer">a day-in-life video</a> of Lottie, their graphic designer. It communicates a lot more information about what kind of person she is and how working at PostHog feels like than her bio. I wish they had more of those.</p><div><p align="center"></p><figure><img alt="A screenshot from PostHog's graphic designer day-in-life video" src="/img/worth-joining/posthog-lottie-video-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Finally, PostHog’s handbook offers two more sections where candidates can learn even more about the team: <a href="https://posthog.com/handbook/company/culture" target="_blank" rel="noopener noreferrer">Culture</a> and <a href="https://posthog.com/handbook/people/team-structure/team-structure#reporting-structure" target="_blank" rel="noopener noreferrer">Team structure</a>. All are worth a read, and each tells you something new about the company and the team, nurturing your liking and respect for these people. Definitely worth stealing.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-we-at-wasp-communicate-who-is-on-our-team"><strong>How we at Wasp communicate who is on our team</strong><a class="hash-link" href="#how-we-at-wasp-communicate-who-is-on-our-team" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="meet-the-team-blog-posts"><strong>“Meet the team” blog posts</strong><a class="hash-link" href="#meet-the-team-blog-posts" title="Direct link to heading">​</a></h5><p>To help candidates understand who they will be working with, we at Wasp write a blog post about each new hire:</p><ul><li><a href="https://wasp-lang.dev/blog/2022/05/31/filip-intro" target="_blank" rel="noopener noreferrer">Meet the team - Filip Sodić, Founding Engineer</a></li><li><a href="https://wasp-lang.dev/blog/2021/12/21/shayne-intro" target="_blank" rel="noopener noreferrer">Meet the team - Shayne Czyzewski, Founding Engineer</a></li></ul><p>The posts are brief enough to be read in one sitting. Yet, they are very informative. Basically, each post is an interview, presented as an article. We hope they give candidates a good idea of who they'll be spending half of their waking time with.</p><div><p align="center"></p><figure><img alt="A screenshot of Wasp's Meet the team blog post" src="/img/worth-joining/wasp-meet-the-team-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-culture--or-the-culture-is-amazing"><strong>3. CULTURE — or, the culture is amazing</strong><a class="hash-link" href="#3-culture--or-the-culture-is-amazing" title="Direct link to heading">​</a></h3><p>While researchers still argue about the ultimate definition, most of us understand culture as “what working here feels like” and/or “how we do things here.” We also understand how crucial it is for those looking for work. It seems glaringly obvious that startups should work hard on communicating their culture. Yet, most companies don’t. Or, even worse, they flood their websites with meaningless HR fluff, which only scares interesting people away. In short, communicating culture well is another low-hanging fruit waiting to be picked.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-canny-communicates-their-culture"><strong>How Canny communicates their culture</strong><a class="hash-link" href="#how-canny-communicates-their-culture" title="Direct link to heading">​</a></h4><p>Canny does an outstanding job at communicating their culture. The primary tool they employ is, once again, their <a href="https://canny.io/blog/founder-stories/" target="_blank" rel="noopener noreferrer">blog</a>. (Note how multifunctional it is: founders, expertise, team, and now culture.) The posts in the Founder Stories category convey very well what working at Canny feels like. Here are a few examples.</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="why-work-at-canny-blog-post"><strong>“Why work at Canny” blog post</strong><a class="hash-link" href="#why-work-at-canny-blog-post" title="Direct link to heading">​</a></h5><p>I’ll risk repeating myself, but <a href="https://canny.io/blog/work-at-canny/" target="_blank" rel="noopener noreferrer">this post</a> so beautifully explains Canny’s culture that I couldn’t resist. It mentions why and how they work remotely, how they do team retreats (with photos and a <a href="https://youtu.be/u4yOS1cuMSQ" target="_blank" rel="noopener noreferrer">video</a> from Lisbon!), and how they had fun together playing weird Zoom games when travel was not an option due to Covid.</p><p>Pay attention to the imagery. It communicates a lot more information than any lengthy, elaborate description would. Indeed, a picture is often worth a thousand words.</p><div><p align="center"></p><figure><img alt="A photo of Canny's two team members hacking in Denver" src="/img/worth-joining/canny-hacking-in-denver-min.jpeg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="lessons-from-a-year-of-team-retreats-blog-post"><strong>“Lessons from a year of team retreats” blog post</strong><a class="hash-link" href="#lessons-from-a-year-of-team-retreats-blog-post" title="Direct link to heading">​</a></h5><p>Instead of saying that “team is our priority” or “we invest in our people,” Sarah <a href="https://canny.io/blog/lessons-from-team-retreats/" target="_blank" rel="noopener noreferrer">shows</a> what they’ve done to support their team. </p><p>Again, note how specific the imagery is.</p><div><p align="center"></p><figure><img alt="A photo from Canny's Lessons from a year of team retreats blog post" src="/img/worth-joining/canny-year-of-retreats-min.jpeg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Interestingly, Sarah’s post isn’t framed as “hey we do many team retreats, we’re awesome, come work for us.” If they wrote that, the reader would feel uneasy. They would sense bragging. That’s why the explicit message in the post is what Canny learned doing team retreats, not that they’ve done many. This explicit message, however, <em>implies</em> that they indeed have done many retreats! It sends a message that Canny cares for their employees without explicitly saying so. This is what true mastery looks like.</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="the-end-of-our-digital-nomad-journey-blog-post"><strong>“The end of our digital nomad journey” blog post</strong><a class="hash-link" href="#the-end-of-our-digital-nomad-journey-blog-post" title="Direct link to heading">​</a></h5><p>Although <a href="https://canny.io/blog/end-digital-nomad-journey/" target="_blank" rel="noopener noreferrer">this post</a> describes Sarah and Andrew’s personal nomad experience, Sarah managed to reveal Canny’s culture through it. To do that, she described how the team worked on Canny during those nomad years. She also wrote about their communication struggles, routines, and a lot more. And, again, look at how effectively her seemingly imperfect screenshots and photos transmit the vibe!</p><div><p align="center"></p><figure><img alt="A photo from Canny's The end of our digital nomad journey blog post" src="/img/worth-joining/canny-end-of-nomad-min.jpeg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><div><p align="center"></p><figure><img alt="Another photo from Canny's The end of our digital nomad journey blog post" src="/img/worth-joining/canny-end-of-nomad-2-min.jpeg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-fibery-communicates-their-culture"><strong>How Fibery communicates their culture</strong><a class="hash-link" href="#how-fibery-communicates-their-culture" title="Direct link to heading">​</a></h4><p>While Fibery’s culture is different from Canny’s, they also communicate it well. Their primary tool is a weird, quirky <a href="https://fibery.io/" target="_blank" rel="noopener noreferrer">website</a> full of special projects that give you a sense of how they do things at Fibery and what working there feels like.</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="anxiety-page"><strong>Anxiety page</strong><a class="hash-link" href="#anxiety-page" title="Direct link to heading">​</a></h5><p>The first project is Fibery’s <a href="https://fibery.io/anxiety" target="_blank" rel="noopener noreferrer">/anxiety page</a>. Launched in 2019, it mocks every serious enterprise software out there with puns like “Yet another collaboration tool” as the page title, “Mistake” as a sign-up button text, and, my favorite, “Try—Suffer—Quit” page structure.</p><div><p align="center"></p><figure><img alt="A screenshot of Fibery's /anxiety page" src="/img/worth-joining/fibery-anxiety-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>One day three years ago, someone <a href="https://news.ycombinator.com/item?id=21643683" target="_blank" rel="noopener noreferrer">submitted</a> this page to Hacker News. The post surged to the top of the frontpage, stayed there for many hours, and got 705 upvotes and 145 comments from people all over the world relating to Fibery’s culture. Why? Because it felt real.</p><p>Here’s a glimpse of what people wrote in the comments:</p><div><p align="center"></p><figure><img alt="A screenshot of Hacker News comments on Fibery's /anxiety page" src="/img/worth-joining/fibery-hn-1-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><div><p align="center"></p><figure><img alt="Another screenshot of Hacker News comments on Fibery's /anxiety page" src="/img/worth-joining/fibery-hn-2-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="remote-page"><strong>Remote page</strong><a class="hash-link" href="#remote-page" title="Direct link to heading">​</a></h5><p>The second special project Fibery did to communicate their culture is the <a href="https://fibery.io/remote" target="_blank" rel="noopener noreferrer">/remote page</a>. It shows what working from home is <em>really</em> like. It’s the funniest thing I’ve ever seen done by a software startup. (Have you ever seen a CEO being licked by a dog?) It also shows how the Fibery team works and even how they use Fibery to build Fibery. Like Canny’s “Lessons from a year of team retreats” blog post, it does so implicitly. A true masterpiece.</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="weird-humorous-site"><strong>Weird, humorous site</strong><a class="hash-link" href="#weird-humorous-site" title="Direct link to heading">​</a></h5><p>Broadly, the whole <a href="https://fibery.io/" target="_blank" rel="noopener noreferrer">site</a> screams that Fibery is a place for misfits, rebels, and trouble makers; the place where such people will be valued and will feel like home; the place built around brutal honesty and spicy humor.</p><p>The “What (non-)customers say” section is worth a mention. Over my nine years in startups, I haven’t seen a site that a) lists <em>bad</em> customer reviews; and b) uses 💩 emoji as a filter. Again, this is telling. It says a lot about who they are as people: humble, real, and fond of humor.</p><div><p align="center"></p><figure><img alt="A screenshot of Fibery's About Us page, What non-customers say section" src="/img/worth-joining/fibery-what-customers-say-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-posthog-communicates-their-culture"><strong>How PostHog communicates their culture</strong><a class="hash-link" href="#how-posthog-communicates-their-culture" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="comprehensive-company-handbook-covering-all-things-culture"><strong>Comprehensive company handbook covering all-things culture</strong><a class="hash-link" href="#comprehensive-company-handbook-covering-all-things-culture" title="Direct link to heading">​</a></h5><p>PostHog’s way of communicating their culture is the most explicit of all four examples, yet very effective. Their primary tool is the <a href="https://posthog.com/handbook" target="_blank" rel="noopener noreferrer">PostHog Handbook</a>, which covers virtually <em>every</em> aspect of what working at PostHog feels like: interviews, onboarding, training, management, communication, and even firing. (They call it <a href="https://posthog.com/handbook/people/offboarding" target="_blank" rel="noopener noreferrer">offboarding</a>.)</p><p>The handbook goes all the way up to the <a href="https://posthog.com/handbook/strategy/strategy" target="_blank" rel="noopener noreferrer">high-level strategy</a>, which is very clear. Notably, PostHog’s strategy section not only puts forth ambitious goals but actually explains how exactly the company will get there.</p><p><a href="https://posthog.com/handbook/company/values" target="_blank" rel="noopener noreferrer">The values section</a> is <em>very</em> specific; perhaps the most specific I’ve ever seen. PostHog does not merely list their values as meaningless abstractions but supports them with evidence. Some values have many paragraphs of examples demonstrating how the team follows them.</p><div><p align="center"></p><figure><img alt="A screenshot of the Values section in the PostHog's handbook" src="/img/worth-joining/posthog-values-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>They also have a specific <a href="https://posthog.com/handbook/company/culture" target="_blank" rel="noopener noreferrer">Culture page</a> with <a href="https://youtu.be/rRwzJiljpSA" target="_blank" rel="noopener noreferrer">a 5-minute video from the CEO</a> explaining how they designed PostHog for remote work from day one, which nicely complements the text.</p><div><p align="center"></p><figure><img alt="A screenshot from James Hawkins's video" src="/img/worth-joining/posthog-james-video-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>In summary, if Canny’s weapon of choice is the blog and Fibery’s is the website, then PostHog’s is definitely the handbook. It’s a work of art.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-we-at-wasp-communicate-our-culture"><strong>How we at Wasp communicate our culture</strong><a class="hash-link" href="#how-we-at-wasp-communicate-our-culture" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="easygoing-vibe-from-memes-copy-and-imagery"><strong>Easygoing vibe from memes, copy, and imagery</strong><a class="hash-link" href="#easygoing-vibe-from-memes-copy-and-imagery" title="Direct link to heading">​</a></h5><p>Unlike Posthog, we at Wasp don’t (yet) have a dedicated Culture page. We are too small for that. But that doesn’t stop us from showing what working at Wasp feels like. We just use different tools.</p><p>Our <a href="https://twitter.com/WaspLang" target="_blank" rel="noopener noreferrer">Twitter</a>, <a href="https://wasp-lang.dev/blog" target="_blank" rel="noopener noreferrer">blog</a>, and <a href="https://us4.campaign-archive.com/home/?u=8139c7de74df98aa17054b235&amp;id=f0c6ba5f1d" target="_blank" rel="noopener noreferrer">monthly updates</a> abound with memes, GIFs, and hilarious imagery. Plus, we write them in a humorous, lighthearted, easygoing style. By just scrolling through these things for a few minutes, candidates can understand that we aren’t some corporate bros. And if they like working on interesting things <em>while having fun</em>, they won’t help but feel an inkling to reach out.</p><div><p align="center"></p><figure><img alt="A funny image from Wasp's blog post about GitHub Copilot" src="/img/worth-joining/wasp-vibe-blog-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><div><p align="center"></p><figure><img alt="A photo of Wasp's team packing t-shirts for users" src="/img/worth-joining/wasp-vibe-tshirts-min.jpeg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-progress--or-the-business-is-doing-well"><strong>4. PROGRESS — or, the business is doing well</strong><a class="hash-link" href="#4-progress--or-the-business-is-doing-well" title="Direct link to heading">​</a></h3><p>When you just closed an $80 million Series B or signed Facebook as a customer, communicating progress is easy. You just state these facts. However, most companies need to attract great people way before Series B. In fact, it is these very people who’re going to get you there. As most startups are secretive about how things are going, communicating that things are going <em>somehow</em> — no matter how negligible your progress in contrast to the big guys — becomes quite an advantage. It immediately de-risks the opportunity in the candidate’s eyes. So, if EXPERTISE is about convincing candidates that you know how to build the wings, PROGRESS is about showing them the half-built carcass on your way down. Both are important if you want great people to jump off the cliff with you.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-canny-communicates-their-progress"><strong>How Canny communicates their progress</strong><a class="hash-link" href="#how-canny-communicates-their-progress" title="Direct link to heading">​</a></h4><p>To give candidates a sense that things are moving, that this company is not some long slog but a place where progress is made every day, that they can become a part of something that’s growing and, therefore, can grow themselves, to do all that, Canny does two things.</p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="year-in-review-blog-posts"><strong>“Year in review” blog posts</strong><a class="hash-link" href="#year-in-review-blog-posts" title="Direct link to heading">​</a></h5><p>The first one is their “Year in review” blog post series. Such comprehensive, thoughtful reviews are rare in the startup world. What is even rarer is when these posts span over four consecutive years. It sends a message that the founders are persistent and devoted to making this company successful.</p><p>Below are all Canny’s year-in-review posts in a sequential order:</p><ul><li><a href="https://canny.io/blog/lessons-learned-bootstrapping-saas/" target="_blank" rel="noopener noreferrer">Year in review: Lessons learned from bootstrapping our SaaS startup</a></li><li><a href="https://canny.io/blog/year-two-lessons-bootstrapping/" target="_blank" rel="noopener noreferrer">Year in review: Lessons from our second year of bootstrapping Canny</a></li><li><a href="https://canny.io/blog/year-three-lessons-bootstrapped-startup/" target="_blank" rel="noopener noreferrer">Year three in review: Lessons from growing our bootstrapped startup</a></li><li><a href="https://canny.io/blog/year-four-in-review/" target="_blank" rel="noopener noreferrer">Year four in review: Overcoming the unexpected</a></li></ul><div><p align="center"></p><figure><img alt="A screenshot of Canny's Year in review blog post" src="/img/worth-joining/canny-year-in-review-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="important-revenue-milestones-blog-posts"><strong>Important revenue milestones blog posts</strong><a class="hash-link" href="#important-revenue-milestones-blog-posts" title="Direct link to heading">​</a></h5><p>In addition to year-in-review posts, Sarah writes about hitting notable revenue milestones. Like with yearly reviews, such transparency is rare. It attracts attention, causes liking, and builds trust.</p><p>For example:</p><ul><li><a href="https://canny.io/blog/saas-startup-ramen-profitability/" target="_blank" rel="noopener noreferrer">$0 to $3,500: How we Bootstrapped our SaaS Startup to Ramen Profitability</a></li><li><a href="https://canny.io/blog/how-we-built-a-1m-arr-saas-startup/" target="_blank" rel="noopener noreferrer">$3,5k to $1m: How we built a $1m ARR SaaS startup</a></li><li><a href="https://canny.io/blog/moving-upmarket/" target="_blank" rel="noopener noreferrer">$1m to $2m: How we’re moving our SaaS upmarket to enterprise sales</a></li></ul><div><p align="center"></p><figure><img alt="A screenshot of Canny's How we built a $1m ARR SaaS startup blog post" src="/img/worth-joining/canny-million-arr-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="short-tweets-with-progress-summary"><strong>Short tweets with progress summary</strong><a class="hash-link" href="#short-tweets-with-progress-summary" title="Direct link to heading">​</a></h5><p>Finally, Sarah occasionally tweets short summaries of their progress, like <a href="https://twitter.com/sarahhum/status/1461378442256072712" target="_blank" rel="noopener noreferrer">this one</a>. These tweets work like ads. Over time, a candidate’s brain fuses them into a broader idea like “Canny is growing” or “Canny is doing well.” Then, once a candidate decides to change jobs, it nudges the candidate to consider Canny.</p><div><p align="center"></p><figure><img alt="A screenshot of Sarah’s tweet with progress update" src="/img/worth-joining/canny-sarah-tweet-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-fibery-communicates-their-progress"><strong>How Fibery communicates their progress</strong><a class="hash-link" href="#how-fibery-communicates-their-progress" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="startup-diary-blog-posts"><strong>Startup Diary blog posts</strong><a class="hash-link" href="#startup-diary-blog-posts" title="Direct link to heading">​</a></h5><p>The most notable thing Fibery does to communicate their progress is the <a href="https://fibery.io/blog/startup-diary" target="_blank" rel="noopener noreferrer">Startup Diary</a> blog posts series written by the founder, Michael, every month, <em>for the past 45 months.</em> It’s the longest series of monthly updates I know. In these posts, Michael honestly shares everything that’s going on with the company: the good, the bad, and the ugly.</p><p>Below are just a few examples, selected by me. You can study all Fibery’s monthly updates here.</p><ul><li><a href="https://fibery.io/blog/chronicles-2/" target="_blank" rel="noopener noreferrer">#2 Slow September 2018</a> — Fibery startup progress in September 2018. Slow month with not so many news. First positive feedback. Company name selection.</li><li><a href="https://fibery.io/blog/chronicles-6/" target="_blank" rel="noopener noreferrer">#6 Planning Private Beta in January 2019</a> — Fibery startup progress in January 2019: Private beta goals, selecting a market positioning (hard), apps re-design.</li><li><a href="https://fibery.io/blog/chronicles-10/" target="_blank" rel="noopener noreferrer">#10 Burn in May 2019</a> — Several people burned out, new features are delivered, public release will be sooner (we hope) (despite ill fortune).</li><li><a href="https://fibery.io/blog/chronicles-16/" target="_blank" rel="noopener noreferrer">#16 Crazy November 2019</a> — Fibery 1.0 is silently launched. Silence is hard to keep. HackerNews front page. Twitter madness. 3000 registered accounts.</li><li><a href="https://fibery.io/blog/chronicles-17/" target="_blank" rel="noopener noreferrer">#17 Fragmented December 2019</a> — Public announcements moved to January. +Lena. Tons of feedback. First money! Hype is over. We consider rising a ~$4M round.</li><li><a href="https://fibery.io/blog/chronicles-35/" target="_blank" rel="noopener noreferrer">#35 Raised $3.1M in July 2021</a> — TLDR: We closed $3.1M seed round. Building a second brain for teams. Fibery mission. Building in Public. Automation rules. Documents and Rich Text history.</li><li><a href="https://fibery.io/blog/chronicles-36/" target="_blank" rel="noopener noreferrer">#36 20k MRR in August 2021</a> — Special Startup Diary edition. 20k MRR &amp; 15 new customers! +Chris. +Sales agency. 4 case studies. Airtable integration &amp; notify people action.</li><li><a href="https://fibery.io/blog/chronicles-42/" target="_blank" rel="noopener noreferrer">($30K MRR) #42 Connecting the dots in April 2022</a> — TLDR: 🇺🇦 Ukrainian war affected our performance. $30K MRR 🐌. 69 reviews in G2 ❤️. Marketing for customer-built products is hard 🥉. 12 customer stories 👻. 2 hours downtime 🥲. New navigation ⛵️. My Space 🔒.</li></ul><p>Imagine a candidate who is considering two or more similar startups. Guess what might convince them to go with Fibery? Progress. Or, more exactly, an understanding that Fibery is <em>persistently</em> making progress and, therefore, has a decent chance to become successful. Delivered through these very updates.</p><p><em>Last year, Michael (Fibery’s CEO) started writing year-in-review posts too. I didn’t mention them because there’s just one post for now. You can read his 2021 review <a href="https://fibery.io/blog/fibery-2021/" target="_blank" rel="noopener noreferrer">here</a>.</em></p><h5 class="anchor anchorWithStickyNavbar_LWe7" id="open-startup-page-with-metrics"><strong>Open Startup page with metrics</strong><a class="hash-link" href="#open-startup-page-with-metrics" title="Direct link to heading">​</a></h5><p>The second tool that Fibery employs to share their progress is the <a href="https://fibery.io/open-startup" target="_blank" rel="noopener noreferrer">/open-startup page</a>. Like monthly updates, it gives candidates a good idea of how the business is doing. This understanding, however, comes from a different source: pure numbers. And numbers often speak louder than words.</p><div><p align="center"></p><figure><img alt="A screenshot of Fibery's Open startup page" src="/img/worth-joining/fibery-open-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-posthog-communicates-their-progress"><strong>How PostHog communicates their progress</strong><a class="hash-link" href="#how-posthog-communicates-their-progress" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="story-page-in-the-handbook"><strong>Story page in the handbook</strong><a class="hash-link" href="#story-page-in-the-handbook" title="Direct link to heading">​</a></h5><p>In the PostHog’s handbook, they have a page called <a href="https://posthog.com/handbook/company/story" target="_blank" rel="noopener noreferrer">Story</a>. It succinctly shows the milestones the company has hit so far. For each milestone, they offer a clear and concise explanation of what happened, sometimes no longer than a sentence. As a result, candidates can get a good idea of how things are going <em>in less than a minute.</em> That’s something to aspire to.</p><p>Here’s the section titles:</p><ul><li>Jan 2020: The start</li><li>Feb 2020: Launch</li><li>Apr 2020: $3M Seed round</li><li>May 2020: First 1,000 users</li><li>Oct 2020: Billions of events supported</li><li>Nov 2020: Building a platform</li><li>Dec 2020: $9M Series A</li><li>Jun 2021: $15M Series B</li><li>Sep 2021: Product Market fit achieved for PostHog Scale</li></ul><div><p align="center"></p><figure><img alt="A screenshot of PostHog's Story page" src="/img/worth-joining/posthog-story-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-we-at-wasp-communicate-our-progress"><strong>How we at Wasp communicate our progress</strong><a class="hash-link" href="#how-we-at-wasp-communicate-our-progress" title="Direct link to heading">​</a></h4><h5 class="anchor anchorWithStickyNavbar_LWe7" id="blog-posts-covering-big-milestones-yc-15m-seed"><strong>Blog posts covering big milestones (YC, $1.5m seed)</strong><a class="hash-link" href="#blog-posts-covering-big-milestones-yc-15m-seed" title="Direct link to heading">​</a></h5><p>For each milestone, Matija and Martin (Wasp founders) write a blog post describing not only what they accomplished but also <em>how</em> they did it.</p><p>For example, when Wasp got into YC, they didn’t just post the news on Twitter. They wrote a blog about <a href="https://wasp-lang.dev/blog/2021/02/23/journey-to-ycombinator" target="_blank" rel="noopener noreferrer">their journey to Y Combinator</a>. It got thousands of views.</p><p>Same with fundraising. When Wasp closed a $1.5m seed, Matija documented and shared their fundraising learnings in <a href="https://wasp-lang.dev/blog/2021/11/22/fundraising-learnings" target="_blank" rel="noopener noreferrer">a blog post</a>. It ended up on the HN frontpage. (Incidentally, this post communicates something important about the founders. It takes persistence to run 250+ meetings in 98 days.)</p><div><p align="center"></p><figure><img alt="A screenshot of Wasp's fundraising learnings blog post" src="/img/worth-joining/wasp-fundraising-learnings-post-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h5 class="anchor anchorWithStickyNavbar_LWe7" id="monthly-newsletter-with-updates"><strong>Monthly newsletter with updates</strong><a class="hash-link" href="#monthly-newsletter-with-updates" title="Direct link to heading">​</a></h5><p>To keep the momentum, Matija also writes <a href="https://us4.campaign-archive.com/home/?u=8139c7de74df98aa17054b235&amp;id=f0c6ba5f1d" target="_blank" rel="noopener noreferrer">a monthly newsletter</a>. It’s similar to Michael’s Startup Diary in substance, but has a different style. Wasp style. (Which, again, communicates our culture.)</p><p>Like PostHog’s Story page, Wasp’s monthly updates give candidates a bird’s eye view over everything that’s happened in the past two years. To anyone interested in connecting the dots, this page is a gem.</p><div><p align="center"></p><figure><img alt="A screenshot of Wasp's monthly newsletter archives" src="/img/worth-joining/wasp-monthly-newsletter-min.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="so-why-should-people-join-your-startup"><strong>So, why should people join your startup?</strong><a class="hash-link" href="#so-why-should-people-join-your-startup" title="Direct link to heading">​</a></h2><p><em>The founders are interesting / fun / smart / human / you name it</em></p><p><em>The team is great</em></p><p><em>The culture is amazing</em></p><p><em>The business is doing well</em></p><p>By communicating all these reasons well, what Canny, Fibery, PostHog, and (we hope!) Wasp really end up transmitting is two powerful messages:</p><ul><li>The company is likely to succeed</li><li>Working there will be awesome</li></ul><p>These two messages are the real answer to “why people should join your company.” The trick, however, and the reason why I wrote this post, is that you can only transmit them indirectly. You can’t say “our founders are great.” You need to provide candidates with many-many facts about the founders, which their minds will then fuse into this abstract conclusion. Ditto for expertise, team, culture, and progress. Eventually, these first-level abstractions will blend into still broader ones: “the company is likely to succeed” and “working there will be awesome.”</p><p>Thus, there’s no single, ultimate answer to “why people should join your company.” There’s only a complex system of concrete, specific units of information from which candidates make the answer themselves. In other words, you can’t teach them why your company is likely to succeed and why working here will be awesome. But you can outline the facts and let them learn for themselves. I hope this post shows how to do that outlining well, and I hope you will apply this knowledge to bring talented people onboard and build great things.</p>]]></content>
        <author>
            <name>Vasili Shynkarenka</name>
            <uri>https://github.com/flreln</uri>
        </author>
        <category label="startups" term="startups"/>
        <category label="hiring" term="hiring"/>
        <category label="wasp" term="wasp"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[ML code generation vs. coding by hand - what we think programming is going to look like]]></title>
        <id>/2022/06/24/ML-code-gen-vs-coding-by-hand-future</id>
        <link href="https://wasp-lang.dev/blog/2022/06/24/ML-code-gen-vs-coding-by-hand-future"/>
        <updated>2022-06-24T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[We are working on a config language / DSL for building web apps that integrates with React & Node.js. A number of times we've been asked “Why are you bothering creating a new language for web app development? Isn’t Github Copilot\ soon going to be generating all the code for developers anyhow?*”.]]></summary>
        <content type="html"><![CDATA[<p>We are working on a config language / DSL for building web apps that integrates with React &amp; Node.js. A number of times we've been asked “<em>Why are you bothering creating a new language for web app development? Isn’t Github Copilot<!-- -->*<!-- --> soon going to be generating all the code for developers anyhow?</em>”.</p><p>This is on our take on the situation and what we think things might look like in the future.</p><div class="theme-admonition theme-admonition-danger alert alert--danger admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 12 16"><path fill-rule="evenodd" d="M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"></path></svg></span>Trending post!</div><div class="admonitionContent_S0QG"><p>This post was trending on HackerNews - you can see the discussion <a href="https://news.ycombinator.com/item?id=32098144" target="_blank" rel="noopener noreferrer">here</a>.</p></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-ml-code-generation">Why (ML) code generation?<a class="hash-link" href="#why-ml-code-generation" title="Direct link to heading">​</a></h2><p>In order to make development faster, we came up with IDE autocompletion - e.g. if you are using React and start typing <code>componentDid</code>, IDE will automatically offer to complete it to <code>componentDidMount()</code> or <code>componentDidLoad()</code>. Besides saving keystrokes, maybe even more valuable is being able to see what methods/properties are available to us within a current scope. IDE being aware of the project structure and code hierarchy also makes refactoring much easier.</p><p><strong>Although that’s already great, how do we take it to the next level?</strong> Traditional IDE support is based on rules written by humans and if we e.g. wanted to make IDE capable of implementing common functions for us, there would be just too many of them to catalogize and maintain by hand.</p><p>If there was only a way for a computer to analyze all the code we’ve written so far and learn by itself how to autocomplete our code and what to do about humanity in general, instead of us doing all the hard work ...</p><p>Delicious and moist cake aside, we actually have this working! Thanks to the latest advances in machine learning, IDEs can now do some really cool things like proposing the full implementation of a function, based on its name and the accompanying comments:</p><div><p align="center"></p><figure><img alt="Copilot example - text sentiment" src="/img/copilot-example-sentiment.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">GitHub Copilot generating a whole function body based on its signature and the comments on top of it.</figcaption></figure><p></p></div><p>This is pretty amazing! The example above is powered by <a href="https://copilot.github.com/" target="_blank" rel="noopener noreferrer">Github Copilot</a> - it’s essentially a neural network trained on a huge amount of publicly available code. I will not get into the technical details of how it works under the hood, but there are <a href="https://betterprogramming.pub/ai-review-github-copilot-d43afde51a5a#:~:text=They%20fine%2Dtuned%20the%20Codex,code%20it's%20been%20trained%20on." target="_blank" rel="noopener noreferrer">lots</a> <a href="https://www.fast.ai/2021/07/19/copilot/" target="_blank" rel="noopener noreferrer">of great</a> <a href="https://arxiv.org/abs/2107.03374" target="_blank" rel="noopener noreferrer">articles</a> covering the science behind it.</p><p><strong>Seeing this, questions arise - what does this mean for the future of programming</strong>? Is this just IDE autocompletion on steroids or something more? Do we need to keep bothering with manually writing code, if we can just type in the comments what we want and that’s it?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="who-maintains-the-code-once-its-generated">Who maintains the code once it’s generated?<a class="hash-link" href="#who-maintains-the-code-once-its-generated" title="Direct link to heading">​</a></h2><p>When thinking about how ML code generation affects the overall development process, there is one thing to consider that often doesn’t immediately spring to mind when looking at the impressive Copilot examples.</p><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>For the purposes of this post, I will not delve into the questions of code quality, <a href="https://www.theinsaneapp.com/2021/09/github-copilot-generated-40-percent-insecure-code.html" target="_blank" rel="noopener noreferrer">security</a>, <a href="https://fosspost.org/github-copilot/" target="_blank" rel="noopener noreferrer">legal &amp; privacy issues</a>, pricing, and others of similar character that are often brought up in these early days of ML code generation. Let’s just assume all this is sorted out and see what happens next.</p></div></div><p><strong>The question is - what happens with the code once it is generated? Who is responsible for it and who will maintain and refactor it in the future?</strong></p><div><p align="center"></p><figure><img alt="Devs still need to maintain generated code" src="/img/always-has-been-copilot.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem"></figcaption></figure><p></p></div><p>Although ML code generation helps with getting the initial code written, it cannot do much beyond that - if that code is to be maintained and changed in the future (and if anyone uses the product, it is), the developer still needs to fully own and understand it.</p><p>Imagine all we had was an assembly language, but IDE completion worked really well for it, and you could say “implement a function that sorts an array, ascending” and it would produce the required code perfectly. Would that still be something you’d like to return to in the future once you need to change your sort to descending 😅&nbsp;? </p><p>In other words, it means Copilot and similar solutions do not reduce the code complexity nor the amount of knowledge required to build features, they just help write the initial code faster, and bring the knowledge/examples closer to the code (which is really helpful). If a developer accepts the generated code blindly, they are just creating tech debt and pushing it forward.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="meet-the-big-a---abstraction-">Meet the big A - Abstraction 👆<a class="hash-link" href="#meet-the-big-a---abstraction-" title="Direct link to heading">​</a></h2><p>If Github Copilot and others cannot solve all our troubles of learning how to code and understanding in detail how session management via JWT works, what can? </p><p>Abstraction - that’s how programmers have been dealing with the code repetition and reducing complexity for decades - by creating libraries, frameworks, and languages. It is how we advanced from vanilla JS and direct DOM manipulation to jQuery and finally to UI libraries such as React and Vue.</p><p>Introducing abstractions inevitably means giving up on a certain amount of power and flexibility (e.g. when summing numbers in Python you don’t get to exactly specify which CPU registers are going to be used for it), but the point is that, if done right, you don’t need nor want such power in the majority of the cases.</p><div><p align="center"></p><figure><img alt="Abstraction equals less responsibility" src="/img/uncle-ben-great-power.jpg"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">What Uncle Ben actually meant: avoiding responsibility is the main benefit of abstraction! (Peter totally missed the point, unfortunately, and became Spiderman instead of learning how to code)</figcaption></figure><p></p></div><p><strong>The only way not to be responsible for a piece of code is that it doesn’t exist in the first place</strong>. </p><p>Because as soon as pixels on the screen change their color it’s something you have to worry about, and that is why the main benefit of all frameworks, languages, etc. is <em>less code</em> == <em>less decisions</em> == <em>less responsibility.</em></p><p>The only way to have less code is to make less decisions and provide fewer details to the computer on how to do a certain task - ideally, we’d just state what we want and we wouldn’t even care about how it is done, as long as it’s within the time/memory/cost boundaries we have (so we might need to state those as well).</p><p>Let’s take a look at the very common (and everyone’s favorite) feature in the world of web apps - authentication (yaay ☠️&nbsp;🔫)! The typical code for it will look something like this:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">Auth on the backend in Node.js - example</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">jwt</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'jsonwebtoken'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">SecurePassword</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'secure-password'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">util</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'util'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">prisma</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'../dbClient.js'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> handleRejection </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'../utils.js'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">config</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'../config.js'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> jwtSign </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> util</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">promisify</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">sign</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> jwtVerify </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> util</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">promisify</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">jwt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">verify</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">JWT_SECRET</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> config</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">auth</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">jwtSecret</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">sign</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">id</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> options</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">jwtSign</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> id </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">JWT_SECRET</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> options</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">verify</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">token</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">jwtVerify</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">token</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">JWT_SECRET</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> auth </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">handleRejection</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">req</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> res</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> next</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> authHeader </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> req</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Authorization'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">authHeader</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">next</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">authHeader</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">startsWith</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'Bearer '</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> token </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> authHeader</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">substring</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">7</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> authHeader</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">let</span><span class="token plain"> userIdFromToken</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      userIdFromToken </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">verify</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">token</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token string" style="color:rgb(195, 232, 141)">'TokenExpiredError'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'JsonWebTokenError'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'NotBeforeError'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">includes</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">name</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">status</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">401</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">send</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">throw</span><span class="token plain"> error</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> user </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> prisma</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">findUnique</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">where</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> userIdFromToken </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">status</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">401</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">send</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> password</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain">userView </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> user</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    req</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">user</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> userView</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">else</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> res</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">status</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">401</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">send</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token function" style="color:rgb(130, 170, 255)">next</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">SP</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">SecurePassword</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">hashPassword</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">password</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> hashedPwdBuffer </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">SP</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">hash</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token maybe-class-name">Buffer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token keyword module" style="font-style:italic">from</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">password</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> hashedPwdBuffer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">toString</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"base64"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">verifyPassword</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">hashedPassword</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> password</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">SP</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">verify</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token maybe-class-name">Buffer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token keyword module" style="font-style:italic">from</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">password</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token maybe-class-name">Buffer</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token keyword module" style="font-style:italic">from</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">hashedPassword</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"base64"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token console class-name" style="color:rgb(255, 203, 107)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And this is just a portion of the backend code (and for the username &amp; password method only)! As you can see, we have quite a lot of flexibility here and get to do/specify things like:</p><ul><li>choose the implementation method for auth (e.g. session or JWT-based)</li><li>choose the exact npm packages we want to use for the token (if going with JWT) and password management</li><li>parse the auth header and specify for each value (<code>Authorization</code>, <code>Bearer</code>, …) how to respond</li><li>choose the return code (e.g. 401, 403) for each possible outcome</li><li>choose how the password is decoded/encoded (base64)</li></ul><p>On one hand, it’s really cool to have that level of control and flexibility in our code, but on the other hand, it’s quite a lot of decisions (== mistakes) to be made, especially for something as common as authentication!</p><p>If somebody later asks “<em>so why exactly did you choose secure-password npm package, or why exactly base64 encoding?</em>” it’s something we should probably answer with something else rather than “<em>well, there was that SO post from 2012 that seemed pretty legit, it had almost 50 upvotes. Hmm, can’t find it now though. Plus, it has ‘secure’ in the name, that sounds good, right?</em>”</p><p>Another thing to keep in mind is that we should also track how things change over time, and make sure that after a couple of years we’re still using the best practices and that the packages are regularly updated.</p><p>If we try to apply the principles from above (less code, less detailed instructions, stating <strong>what</strong> we want instead of <strong>how</strong> it needs to be done), the code for auth might look something like this: </p><div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">auth:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token selector" style="color:rgb(199, 146, 234)">userEntity: User</span><span class="token selector punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token selector" style="color:rgb(199, 146, 234)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">    externalAuthEntity: SocialLogin</span><span class="token selector punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token selector" style="color:rgb(199, 146, 234)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">    methods:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token selector" style="color:rgb(199, 146, 234)">usernameAndPassword:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token selector punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token selector" style="color:rgb(199, 146, 234)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">      google:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">onAuthFailedRedirectTo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/login"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">onAuthSucceededRedirectTo</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/dashboard"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Based on this, the computer/compiler could take care of all the stuff mentioned above, and then depending on the level of abstraction, provide some sort of interface (e.g. form components, or functions) to “hook” in with our own e.g. React/Node.js code (btw this is how it actually <a href="/docs/language/features#authentication--authorization">works in Wasp</a>).</p><p>We don’t need to care what exact packages or encryption methods are used beneath the hood - it is the responsibility we trust with the authors and maintainers of the abstraction layer, just like we trust that Python knows the best how to sum two numbers on the assembly level and that it is kept in sync with the latest advancements in the field. The same happens when we rely on the built-in data structures or count on the garbage collector to manage our program’s memory well.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="but-my-beautiful-generated-codez--what-happens-with-it-then">But my beautiful generated codez 😿💻! What happens with it then?<a class="hash-link" href="#but-my-beautiful-generated-codez--what-happens-with-it-then" title="Direct link to heading">​</a></h2><p>Don’t worry, it’s all still here and you can generate all the code you wish! The main point to understand here is that ML code generation and framework/language development complement rather than replace each other and are here to stay, which is ultimately a huge win for the developer community - they will keep making our lives easier and allow us to do more fun stuff (instead of implementing auth or CRUD API for the n-th time)!</p><p>I see the evolution here as a cycle (or an upward spiral in fact, but that’s beyond my drawing capabilities):</p><ol><li><strong>language/framework exists</strong>, is mainstream, and a lot of people use it</li><li><strong>patterns start emerging</strong> (e.g. implementing auth, or making an API call) → ML captures them, offers via autocomplete</li><li><strong>some of those patterns mature</strong> and become stable → candidates for abstraction</li><li><strong>new, more abstract, language/framework</strong> emerges</li><li><strong>back to step 1</strong>.</li></ol><div><p align="center"></p><figure><img alt="Language evolution lifecycle" src="/img/language-lifecycle-copilot.png"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">It’s the circle of (language) life, and it moves us all - Ingonyama nengw' enamabala, …</figcaption></figure><p></p></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="conclusion">Conclusion<a class="hash-link" href="#conclusion" title="Direct link to heading">​</a></h2><p>This means we are winning on both sides - when the language is mainstream we can benefit from ML code generation, helping us write the code faster. On the other hand, when the patterns of code we don’t want to repeat/deal with emerge and become stable we get a whole new language or framework that allows us to write even less code and care about fewer implementation details!</p><div><p align="center"></p><figure><img alt="Fizz Buzz with Copilot - stop" src="/img/fizz-buzz-copilot-stop.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">The future is now, old man.</figcaption></figure><p></p></div><p>*<em>Not to be biased, there are also other solutions offering similar functionality - e.g. <a href="https://www.tabnine.com/" target="_blank" rel="noopener noreferrer">TabNine</a>, <a href="https://www.jetbrains.com/help/webstorm/auto-completing-code.html#ml_completion" target="_blank" rel="noopener noreferrer">Webstorm has its own</a>, <a href="https://www.kite.com/" target="_blank" rel="noopener noreferrer">Kite</a>, <a href="https://github.com/CodedotAl/gpt-code-clippy" target="_blank" rel="noopener noreferrer">GPT Code Clippy (OSS attempt)</a> et al., but Github Copilot recently made the biggest splash.</em></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="writing-that-informed-this-post">Writing that informed this post<a class="hash-link" href="#writing-that-informed-this-post" title="Direct link to heading">​</a></h3><ul><li><a href="https://www.fast.ai/2021/07/19/copilot/" target="_blank" rel="noopener noreferrer">Is GitHub Copilot a blessing, or a curse? (fast.ai)</a> - an objective and extremely well-written overview of GitHub Copilot with real-world examples</li><li><a href="https://betterprogramming.pub/6-reasons-why-you-should-avoid-github-copilot-and-fly-solo-instead-8a948665433f" target="_blank" rel="noopener noreferrer">6 Reasons Why You Should Avoid GitHub Copilot and “Fly Solo” Instead</a> - brings up and questions the potential downsides of ML code generation and Github Copilot</li><li><a href="https://dagshub.com/blog/github-copilot-not-code/" target="_blank" rel="noopener noreferrer">Github Copilot Wants to Play Chess Instead of Code</a> - a fresh approach to GitHub Copilot where it is used as a conversation partner instead of writing code!</li><li><a href="https://jessmart.in/articles/copilot" target="_blank" rel="noopener noreferrer">Conversational Programming</a> - a forward looking post that proposes a future where AI will serve as a "sparring partner" and help us reach the optimal solution through iterations </li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="thanks-to-the-reviewers">Thanks to the reviewers<a class="hash-link" href="#thanks-to-the-reviewers" title="Direct link to heading">​</a></h3><p><a href="https://twitter.com/jeremyphoward" target="_blank" rel="noopener noreferrer">Jeremy Howard</a>, <a href="https://twitter.com/mcsee1" target="_blank" rel="noopener noreferrer">Maxi Contieri</a>, <a href="https://twitter.com/mariokostelac" target="_blank" rel="noopener noreferrer">Mario Kostelac</a>, <a href="https://twitter.com/vladblagoje" target="_blank" rel="noopener noreferrer">Vladimir Blagojevic</a>, <a href="https://twitter.com/idonov8" target="_blank" rel="noopener noreferrer">Ido Nov</a>, <a href="https://github.com/izikeros" target="_blank" rel="noopener noreferrer">Krystian Safjan</a>, <a href="https://twitter.com/fakela6" target="_blank" rel="noopener noreferrer">Favour Kelvin</a>, <a href="https://twitter.com/filipsodic" target="_blank" rel="noopener noreferrer">Filip Sodic</a>, <a href="https://twitter.com/shayneczyzewski" target="_blank" rel="noopener noreferrer">Shayne Czyzewski</a> and <a href="https://twitter.com/MartinSosic" target="_blank" rel="noopener noreferrer">Martin Sosic</a> - thank you for your generous comments, ideas and suggestions! You made this post better and made sure I don't go overboard with memes :).</p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="ML" term="ML"/>
        <category label="language" term="language"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Feature Announcement - Wasp Jobs]]></title>
        <id>/2022/06/15/jobs-feature-announcement</id>
        <link href="https://wasp-lang.dev/blog/2022/06/15/jobs-feature-announcement"/>
        <updated>2022-06-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<img alt="You get a job!"]]></summary>
        <content type="html"><![CDATA[<p align="center"><img loading="lazy" alt="You get a job!" src="/img/jobs-oprah.gif" width="300px" class="img_ev3q"></p><p><em>Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="storytime"><strong>Storytime</strong><a class="hash-link" href="#storytime" title="Direct link to heading">​</a></h2><p align="center"><img loading="lazy" alt="Storytime" src="/img/jobs-storytime.gif" width="300px" class="img_ev3q"></p><p>Imagine you are working on the next unicorn SaaS web app and need to send a user an email, manipulate an uploaded image via an external API call, or recalculate some internal metrics every night. (Or, maybe you’re doing some fancy blockchain thing for that frothy investment multiple; :D whatever it is, just envision an operation that may take a significant amount of time and/or fail.) How would you implement this?</p><p align="center"><img loading="lazy" alt="Spinning!" src="/img/jobs-spinner.gif" width="30px" class="img_ev3q"></p><p>You wouldn’t want the server to delay sending its HTTP response until those are done (unless you are one of those people who love seeing the Mac spinning icon), so you'll need something out-of-band from the normal request-response flow. Even in an event-loop-based system like Node.js, just calling an async function isn't ideal since you will need to handle failures, retries, and throttling, amongst other concerns. And sometimes we need to schedule tasks to run in the future, or repeatedly, so we need a completely different toolset.</p><p>The typical solution here is to use a job queue of some kind. They are not impossible to set up, of course, but there is a fair amount of boilerplate involved, some operational expertise/overhead required, and moving from one system to another when you outgrow it is usually a challenge. These are the exact areas where we feel Wasp can provide real value, so we are happy to introduce Wasp Jobs to help out with this!</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/server/workers/github.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">axios</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'axios'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> upsertMetric </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'./utils.js'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">workerFunction</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> response </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> axios</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'https://api.github.com/repos/wasp-lang/wasp'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> metrics </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Wasp GitHub Stars'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">value</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">stargazers_count</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Wasp GitHub Language'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">value</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">language</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Wasp GitHub Forks'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">value</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">forks</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Wasp GitHub Open Issues'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">value</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">open_issues</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Promise</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">all</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">metrics</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">map</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">upsertMetric</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> metrics</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Wasp allows you to write a regular async JavaScript function (like the one above that gathers GitHub metrics and stores them in the DB) and have it run within the context of a job queue system, which we call an executor. You can manually submit work to be done on the server, or specify a cron schedule to have your job automatically invoked. And, best of all, as we add more job executors in the future, you can change where it runs on a single line in your .wasp file.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="most-jobs-have-a-boss-our-first-job-executor-is-a-pg-boss-">Most jobs have a boss. Our first job executor is a... pg-boss. 😅<a class="hash-link" href="#most-jobs-have-a-boss-our-first-job-executor-is-a-pg-boss-" title="Direct link to heading">​</a></h2><p align="center"></p><figure><img loading="lazy" alt="Eeek" src="/img/jobs-eyes.gif" class="img_ev3q"><figcaption>Me trying to lay off the job-related puns. Ok, ok, I’ll quit. Ahhh!</figcaption></figure><p></p><p>In my prior life as a Ruby on Rails developer, the decision of how to implement jobs was pretty simple. You had Active Job at your disposal, and for backends, you would use something like Sidekiq or Delayed Job. In a similarly paved path, Python developers would have likely looked first to Celery.</p><p>In the JavaScript world, <a href="https://github.com/OptimalBits/bull" target="_blank" rel="noopener noreferrer">Bull</a> is quite popular these days. However, we decided to use <a href="https://github.com/timgit/pg-boss" target="_blank" rel="noopener noreferrer">pg-boss</a>, as it too provides persistence, delayed jobs, and schedules (plus many other features). But critically, pg-boss uses PostgreSQL instead of Redis (like Bull) for storage and coordination, and this was important since we did not want to introduce any new infrastructure dependencies to our existing production stack.</p><p>But isn’t a database as a queue an anti-pattern, you may ask? Well, historically I’d probably say yes. However, PostgreSQL 9.5 added SKIP LOCKED, which it specifically mentions can aid in avoiding lock contention with multiple consumer queue-like workloads [<a href="https://www.postgresql.org/docs/9.5/sql-select.html#SQL-FOR-UPDATE-SHARE" target="_blank" rel="noopener noreferrer">https://www.postgresql.org/docs/9.5/sql-select.html#SQL-FOR-UPDATE-SHARE</a>]. So for the low-volume background job workloads that many apps have, we feel using a database as a queue is a great compromise and starting point for many users from a benefit vs. complexity perspective.</p><p>However, we will also continue to expand the number of job execution runtimes we support. Let us know in <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">Discord</a> what you’d like to see next!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="real-example---updating-waspleau">Real Example - Updating Waspleau<a class="hash-link" href="#real-example---updating-waspleau" title="Direct link to heading">​</a></h2><p>If you are a regular reader of this blog (thank you, you deserve a raise! 😊), you may recall we created an example app of a metrics dashboard called <a href="https://wasp-lang.dev/blog/2022/01/27/waspleau" target="_blank" rel="noopener noreferrer">Waspleau</a> that used workers in the background to make periodic HTTP calls for data. In that example, we didn’t yet have access to recurring jobs in Wasp, so we used Bull for scheduled jobs instead. To set up our queue-related logic we had to have this huge <code>setupFn</code> wiring it all up; but now, we can remove all that code and simply use jobs instead! Here is what the new DSL looks like:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">main.wasp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// A cron job for fetching GitHub stats</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">job getGithubStats </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">executor</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">PgBoss</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">perform</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">fn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> workerFunction </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@server/workers/github.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">schedule</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">cron</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"*/10 * * * *"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// A cron job to measure how long a webpage takes to load</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">job calcPageLoadTime </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">executor</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">PgBoss</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">perform</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">fn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> workerFunction </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@server/workers/loadTime.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token literal-property property">schedule</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">cron</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"*/5 * * * *"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">args</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">json </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string-property property">"url"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://wasp-lang.dev"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token string-property property">"name"</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"wasp-lang.dev Load Time"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> json</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And here is an example of how you can reference and invoke jobs on the server. <em>Note: We did not even need to do this step since jobs with a schedule are automatically configured to run at the desired time.</em></p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/server/serverSetup.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/**</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">* These Jobs are automatically scheduled by Wasp.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">* However, let's kick them off on server setup to ensure we have data right away.</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">*/</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> github </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/jobs/getGithubStats.js'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> loadTime </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/jobs/calcPageLoadTime.js'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> github</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">submit</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> loadTime</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">submit</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">url</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"https://wasp-lang.dev"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"wasp-lang.dev Load Time"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>And voila, it is really that simple. Wasp takes care of setting up pg-boss and hooking up all your job callbacks, leaving you to focus on what matters- your own code. Here is a visual of what is happening behind the scenes:</p><p><img loading="lazy" alt="Architecture" src="/assets/images/jobs-arch-3ebc08ebc717194dfac7e67fca5b8a7d.png" width="2626" height="1452" class="img_ev3q"></p><p>For those interested, check out the <a href="https://github.com/wasp-lang/wasp/commit/1721371fc73f4485ca0046aafea2ee3fc0be41cf#diff-e158328e137176b595ad01641ba68faf82dbb88ccc5be3597009bb576fcd6505" target="_blank" rel="noopener noreferrer">full diff here</a> and weep with joy for all those boilerplate lines of code we fired! We were also able to ax Redis from our infrastructure!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="looks-neat-whats-next">Looks neat! What’s next?<a class="hash-link" href="#looks-neat-whats-next" title="Direct link to heading">​</a></h2><p>First off, please check out our docs for Jobs: <a href="https://wasp-lang.dev/docs/language/features#jobs" target="_blank" rel="noopener noreferrer">https://wasp-lang.dev/docs/language/features#jobs</a> There, you will find all the info you need to start using them. Next, if you want to see the code for this example in full, you can find it here: <a href="https://github.com/wasp-lang/wasp/tree/release/examples/waspleau" target="_blank" rel="noopener noreferrer">https://github.com/wasp-lang/wasp/tree/release/examples/waspleau</a></p><p>In the future, we plan to add more job executors, including support for polyglot workers (imagine running your Python ML function from Wasp!). We are also open to any other ideas on how jobs can become more useful to you (like client-side access to server-side jobs, or client-side jobs using similar abstractions?). Let us know what you think!</p><hr><small>Special thanks to Tim Jones for his hard work building an amazing OSS library, <a href="https://github.com/timgit/pg-boss" target="_blank" rel="noopener noreferrer">pg-boss</a>, and for reviewing this post. Please consider supporting that project if it solves your needs!</small>]]></content>
        <author>
            <name>Shayne Czyzewski</name>
            <uri>https://github.com/shayneczyzewski</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
        <category label="feature" term="feature"/>
        <category label="jobs" term="jobs"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to win a hackathon. Brief manual.]]></title>
        <id>/2022/06/01/gitpod-hackathon-guide</id>
        <link href="https://wasp-lang.dev/blog/2022/06/01/gitpod-hackathon-guide"/>
        <updated>2022-06-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Wasp app deploye to Gitpod]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Wasp app deploye to Gitpod" src="/assets/images/gitpod-hackathon-preview-cff1d9f6eb48c32d5736ebd859b1c63f.png" width="806" height="594" class="img_ev3q"></p><blockquote><p><em>"All good thoughts and ideas mean nothing without the proper tools to achieve them."</em><br>
<em>Jason Statham</em></p></blockquote><p><strong>TL;DR:</strong> Wasp allows you to build and deploy a full-stack JS web app with a single config file. <a href="https://gitpod.io/" target="_blank" rel="noopener noreferrer">Gitpod</a> spins up fresh, automated developer environments in the cloud, in seconds. A perfect tandem to win a hackathon and enjoy free pizza even before other teams even started to set up their coding env and realized they need to update their node version. </p><p><em>Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="intro">Intro:<a class="hash-link" href="#intro" title="Direct link to heading">​</a></h2><p>Usually, every hackathon starts from similar activities:<br>
1) <strong>setting up a local dev environment</strong>, especially if all the team members use different operating systems. There are always issues with the SDK/packages/compiler, etc.<br>
2) <strong>building project backbone</strong> (folder structure, basic services, CRUD APIs, and so on).</p><p>Both of them are time-consuming, boring, and cause issues.</p><p><img loading="lazy" alt="Dealing with routine might be frustrating" src="/assets/images/I-quit-76ab96fc267251d26680dc4cc951bc92.gif" width="245" height="245" class="img_ev3q"></p><p>Thankfully, those issues can be avoided! Gitpod allows you to spin up a clean, already pre-set dev environment. And Wasp enables you to build a full-stack JS web app with a single config file (alongside your React and Node.js code). But first things first.</p><p><img loading="lazy" alt="Pennywise luring into his openspace" src="/assets/images/hackathon-pennywise-066278ed7fc85a89844a02906013d8f6.jpg" width="800" height="469" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="dev-environment-setup">Dev environment setup:<a class="hash-link" href="#dev-environment-setup" title="Direct link to heading">​</a></h2><p>Gitpod spins up a bespoke dev environment in the cloud for any git branch (once you configured it for your project), on-demand. So you can start coding right away. Build, debug, commit and push your code in seconds, without any local SDK issues. After you’ve finished – you can host your app after a couple of clicks and share the project with your teammate. You can even make changes to the same project simultaneously, leveraging a pair programming approach. </p><p>Since Gitpod is a cloud-based workspace – spinning up a new application takes a couple of clicks. </p><p>1) Fork <a href="https://github.com/gitpod-io/template-wasp" target="_blank" rel="noopener noreferrer">https://github.com/gitpod-io/template-wasp</a> and give it a meaningful name, e.g. “My Awesome Recipes App” -&gt; this is now a repo for your new web app.<br>
2) In your newly created repo, check the Readme and click the “Open in Gitpod” button<br>
3) Login via Github<br>
4) Allow pop-ups<br>
5) That’s it! Enjoy your fresh cloud-based dev environment!<br></p><p><img loading="lazy" alt="Pennywise luring to take part in hackathon" src="/assets/images/gitpod-roadmap-783e3cd78a719cb0ae646d6adf6be554.png" width="6850" height="11234" class="img_ev3q"></p><p>An optional thing might be enabling the “Share” option to make the app accessible from the external internet. </p><p><img loading="lazy" alt="How to share a workspace" src="/assets/images/gitpod-share-d74408863ed341712358ab6aea434a53.jpg" width="765" height="722" class="img_ev3q"></p><p>You can pick up one of the following IDE’s, switch between light/dark themes and you can even install all your favorite extensions. </p><p><img loading="lazy" alt="Gitpod IDE types" src="/assets/images/gitpod-ide-b80c25e069cbb361cdf86c10ffdbf6ff.jpg" width="879" height="594" class="img_ev3q"></p><p>So, eventually, the workflow can look like this: someone from the team forks the template repo and shares it with others. Teammates open this repo in Gitpod, creating their own dev branches. </p><p>Voila! 🥳</p><p>The whole team is ready to code in a matter of seconds. After the team is done with the development, someone can pull all the changes, share the project, and present it to the judges. </p><p>No need to fix local issues, ensure the Node version is aligned, or configure the deployment pipeline for DigitalOcean. Gitpod does all development preparations. The only thing the team has to do – is to implement the idea ASAP. And here Wasp comes into play!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="building-project-backbone">Building project backbone:<a class="hash-link" href="#building-project-backbone" title="Direct link to heading">​</a></h2><p>Ok, we’ve successfully set up a shared dev environment. It’s time to create a production-ready web app with just a few lines of code. Based on your needs – you can declare separate pages, routes, database models, etc. - it’s super easy and intuitive! </p><p>The ideal case would be to:<br>
1) Check out the language overview: <a href="https://wasp-lang.dev/docs/language/overview" target="_blank" rel="noopener noreferrer">https://wasp-lang.dev/docs/language/overview</a> <br>
2) Follow a 20-minutes tutorial on how to build a To-Do app with Wasp: <a href="https://wasp-lang.dev/docs/tutorials/todo-app" target="_blank" rel="noopener noreferrer">https://wasp-lang.dev/docs/tutorials/todo-app</a> <br></p><p>It may seem a bit inconvenient: why spend time on learning, when you already can start building something meaningful? The short answer is: time-saving. Wasp’s main point is to set you free from building time-consuming boilerplate. So even if you’ll spend half of an hour learning the basics –  you’ll still be able to outrun other hackathon participants. While they will be copy-pasting CRUD API methods – you’ll be building business logic.</p><p>And 20 minutes is time well spent to become more productive. Setting up each team member's environment locally likely takes more than 20 minutes if you don't use Gitpod.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="to-wrap-up">To wrap up:<a class="hash-link" href="#to-wrap-up" title="Direct link to heading">​</a></h2><p>We think that Wasp + Gitpod is a powerful toolset for speedrunning any hackathon. No matter how complex or ambitious your project is. If it’s built with Node and React – nothing can stop you from winning. Good luck, have fun, and enjoy that pizza 🍕!</p>]]></content>
        <author>
            <name>Maksym Khamrovskyi</name>
        </author>
        <category label="wasp" term="wasp"/>
        <category label="gitpod" term="gitpod"/>
        <category label="hackathon" term="hackathon"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Meet the team - Filip Sodić, Founding Engineer]]></title>
        <id>/2022/05/31/filip-intro</id>
        <link href="https://wasp-lang.dev/blog/2022/05/31/filip-intro"/>
        <updated>2022-05-31T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome Filip!]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Welcome Filip!" src="/assets/images/filip-intro-banner-22fe837fa4f00a9634f7e77b79ef7677.png" width="1124" height="592" class="img_ev3q"></p><p>Find Filip on <a href="https://github.com/sodic" target="_blank" rel="noopener noreferrer">GitHub</a>.</p><p><em>Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><p><strong>We are immensely excited to welcome Filip, our latest Founding Software
Engineer!</strong> Filip is an experienced engineer and a passionate computer
scientist - his two biggest passions are building compilers/designing
programming languages and web development (what a lucky coincidence, right?
;)). Before joining Wasp, Filip earned his stripes in various domains, ranging
from bioinformatics and the betting industry to route optimisation software.
Welcome to the team, Filip - we can't wait to see what you build!</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="lets-start-with-two-truths-and-a-lie-about-yourself">Let’s start with two truths and a lie about yourself.<a class="hash-link" href="#lets-start-with-two-truths-and-a-lie-about-yourself" title="Direct link to heading">​</a></h4><ul><li>I found out about Wasp through a friend/former colleague and still haven’t
bought him a drink to say thanks.</li><li>I’ve designed and implemented my own Turing-complete functional programming
language that compiles to JavaScript.</li><li>I wasted nearly 30 hours customizing my setup to maximize productivity and
probably ended up in a less productive state.</li></ul><h4 class="anchor anchorWithStickyNavbar_LWe7" id="which-statement-was-the-lie-above-any-interesting-stories-to-share">Which statement was the lie above? Any interesting stories to share?<a class="hash-link" href="#which-statement-was-the-lie-above-any-interesting-stories-to-share" title="Direct link to heading">​</a></h4><p>The last one was a lie. I wish it were only 30 hours :)</p><p>I did design <a href="https://sodic.github.io/func" target="_blank" rel="noopener noreferrer">a programming language</a>. It is
Turing-complete but still far from being practical. For one, it can’t print
stuff to the screen (or perform any other side effects).</p><p>I never did buy that drink. He’s not letting me forget about it, though.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="why-did-you-join-wasp-what-did-you-do-before">Why did you join Wasp? What did you do before?<a class="hash-link" href="#why-did-you-join-wasp-what-did-you-do-before" title="Direct link to heading">​</a></h4><p>I've wanted to work on a project where I'd get a chance to design a language
and build a compiler for quite some time now. While I did develop my own
language on the side (and even graduated with it), I thought getting paid for
doing something similar this early in my career was pretty far-fetched.</p><p>Almost all my paid work had something to do with the web, whether on the
client-side or the server-side. I enjoy nearly all parts of web development
(yes, even styling websites with CSS :), but one thing I've always found
annoying was dealing with all the boilerplate. Whenever I start building
something, I spend most of my time implementing the same repetitive stuff
(e.g., authentication, databases, SPA routing, API routes, etc.) and relearning
all the best practices that come with it.</p><p>And then, one day, a friend of mine mentioned Wasp - a DSL aiming to eliminate
boilerplate from web apps. The product was a perfect fit based on everything I
know and want to do! Also, I shared a college advisor with the founders (Martin
and Matija) and only heard great things about them.</p><p>The whole thing sounded almost too good to be true, so joining them to work on
Wasp was an easy decision.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-your-favorite-language">What is your favorite language?<a class="hash-link" href="#what-is-your-favorite-language" title="Direct link to heading">​</a></h4><p>I don’t have many favorite things, especially when it comes to technology.
After going through several cycles of falling in love with a
language/framework/tool before becoming annoyed by its shortcomings and
limitations, I made peace with the fact that everything’s a tradeoff. I’ll
generally choose a language depending on:</p><ul><li>the problem at hand</li><li>its current position in the aforementioned cycle :)</li></ul><p>With that said, I'm currently most excited about properly learning Haskell. It
always looked interesting and exotic. I've gotten a few opportunities to play
with the language through university courses and on my own but never really had
an excuse to use it in my day-to-day.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="what-are-you-most-excited-about-in-wasp">What are you most excited about in Wasp?<a class="hash-link" href="#what-are-you-most-excited-about-in-wasp" title="Direct link to heading">​</a></h4><p>From a developer’s perspective, I’m definitely most excited about designing the
DSL and working on the compiler.</p><p>From a product standpoint, I love the idea of never again having to implement
an authentication system.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="whats-a-feature-or-project-youre-most-proud-of-that-you-worked-on-in-the-past-three-months">What’s a feature or project you’re most proud of that you worked on in the past three months?<a class="hash-link" href="#whats-a-feature-or-project-youre-most-proud-of-that-you-worked-on-in-the-past-three-months" title="Direct link to heading">​</a></h4><p><a href="https://www.youtube.com/watch?v=dQw4w9WgXcQ" target="_blank" rel="noopener noreferrer">Definitely this thing</a>.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-did-you-start-coding">How did you start coding?<a class="hash-link" href="#how-did-you-start-coding" title="Direct link to heading">​</a></h4><p>No exciting story to tell here, I’m afraid.</p><p>I enrolled in computer science college and first started programming as a part
of my regular “Introduction to programming” course.</p><p>Before then, I didn’t really know what programming was. In fact, I  wanted to
study electrical engineering. Unluckily for most but luckily for me, our
college does not let you choose your major (i.e., electrical engineering or
computing) right away. Instead, they make you go through a shared year of
universal (and some not-so-universal) courses, only allowing you to specialize
at the start of your second year. Thanks to this quirk, I had a chance to
encounter programming, change my mind, and enroll in computer science.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="your-dev-setup">Your dev setup?<a class="hash-link" href="#your-dev-setup" title="Direct link to heading">​</a></h4><p>As far as hardware goes, it’s pretty basic. I use a regular laptop that’s
starting to show signs of age (ASUS N550JX), a cheap Lenovo mouse, and my
laptop’s integrated keyboard.</p><p>The software setup is a bit more interesting. I’m usually on Manjaro Linux with
the i3 tiling window manager. I jump between editors depending on what I’m
doing. It’s sometimes Vim, but mainly something more powerful that comes with
Vim emulation (e.g., VS Code or JetBrains IDEs). My preferred shell is zsh
(sorry Frane).</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="camelcase-or-snake_case"><code>camelCase</code> or <code>snake_case</code>?<a class="hash-link" href="#camelcase-or-snake_case" title="Direct link to heading">​</a></h4><p>NoPreference</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-your-current-favorite-gem-library-tool-or-anything-else-that-helps-you-with-your-work-why">What is your current favorite gem, library, tool, or anything else that helps you with your work? Why?<a class="hash-link" href="#what-is-your-current-favorite-gem-library-tool-or-anything-else-that-helps-you-with-your-work-why" title="Direct link to heading">​</a></h4><p>That would have to be <a href="https://github.com/ranger/ranger" target="_blank" rel="noopener noreferrer">ranger</a>!</p><p>Ranger is a terminal file manager I use daily, mainly because it makes my work
in the shell much faster. It also gives me a consistent interface for moving
around, previewing files, and interacting with the file system. In other words,
my workflow doesn't have to change much regardless of where I am (Mac, Linux
Desktop, or Linux server).</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="one-piece-of-advice-youd-give-to-budding-developers">One piece of advice you’d give to budding developers?<a class="hash-link" href="#one-piece-of-advice-youd-give-to-budding-developers" title="Direct link to heading">​</a></h4><p>It’s easy to get stuck in an endless loop of polishing and fine-tuning your
projects because you think they aren’t ready yet. Good enough sometimes truly
is good enough and things can often be considered done before <em>you</em> consider
them done.</p><p>I still occasionally need to give this advice to myself :).</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="lastly-where-can-people-find-or-connect-with-you-online">Lastly, where can people find or connect with you online?<a class="hash-link" href="#lastly-where-can-people-find-or-connect-with-you-online" title="Direct link to heading">​</a></h4><p>GitHub: <a href="https://github.com/sodic" target="_blank" rel="noopener noreferrer">https://github.com/sodic</a></p><p>LinkedIn: <a href="https://www.linkedin.com/in/filipsodic/" target="_blank" rel="noopener noreferrer">https://www.linkedin.com/in/filipsodic/</a></p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="wasp" term="wasp"/>
        <category label="new-hire" term="new-hire"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Build a metrics dashboard with background jobs in Wasp - Say hello to Waspleau!]]></title>
        <id>/2022/01/27/waspleau</id>
        <link href="https://wasp-lang.dev/blog/2022/01/27/waspleau"/>
        <updated>2022-01-27T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Hello, Waspleau]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Hello, Waspleau" src="/assets/images/waspleau-screenshot-4d9be945ab6d5e4f5d6692baa133dff0.png" width="3610" height="1064" class="img_ev3q"></p><p align="center"><a href="https://waspleau.netlify.app/" target="_blank" rel="noopener noreferrer">See Waspleau here!</a> | <a href="https://github.com/wasp-lang/wasp/blob/release/examples/waspleau" target="_blank" rel="noopener noreferrer">See the code</a></p><p>We've built a dashboard powered by a job queue using Wasp!</p><p><em>Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><p><img loading="lazy" alt="Measure all the metrics!" src="/assets/images/waspleau-metrics-30675d6a2ecac4e8eff66668bc5442e8.png" width="430" height="304" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="hello-waspleau">Hello, Waspleau!<a class="hash-link" href="#hello-waspleau" title="Direct link to heading">​</a></h2><p>Let’s face it - metrics are all around us. Wouldn’t it be great if there was a quick and easy way to build a nice-looking metrics dashboard from data pulled in by HTTP calls to many different sources, cache the data in-memory, and periodically update it via background jobs? Why yes, yes it would... so we made an example Wasp app called Waspleau that does just that!</p><p>Here is what it looks like live: <a href="https://waspleau.netlify.app/" target="_blank" rel="noopener noreferrer">https://waspleau.netlify.app/</a> There is also a screenshot at the top of this post for those who refrain from clicking on any unknown web links for fear of being <strong>Rickrolled</strong>. Respect.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="show-me-the-code">“Show me the code”<a class="hash-link" href="#show-me-the-code" title="Direct link to heading">​</a></h2><p>So, what do we need to get started? First, we need a way to schedule and run jobs; for this, we decided to use <a href="https://github.com/OptimalBits/bull" target="_blank" rel="noopener noreferrer">Bull</a>. Ok, let’s wire it up. This should be easy, right? We can add external NPM dependencies in our Wasp files like so:</p><div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">main.wasp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">app waspleau</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">title</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"Waspleau"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">dependencies</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> [</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"bull"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"4.1.1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">"axios"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"^0.21.1"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  ]</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>But where do we declare our queue and processing callback functions in Wasp? Uh oh...</p><p><img loading="lazy" alt="Sad" src="/assets/images/waspleau-sad-afbc180b95ee3e6ddaa050fa1d8e8ca0.png" width="430" height="297" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="serversetupfn-for-queue-setup"><code>server.setupFn</code> for queue setup<a class="hash-link" href="#serversetupfn-for-queue-setup" title="Direct link to heading">​</a></h3><p>Thankfully, Waspleau can leverage a powerful and flexible <a href="https://wasp-lang.dev/docs/language/basic-elements#setupfn" target="_blank" rel="noopener noreferrer">hook supplied by Wasp</a> called <code>server.setupFn</code>. This declares a JavaScript function that will be executed on server start. Yahoo! This means we can do things like the following:</p><div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">main.wasp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">app waspleau</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token selector" style="color:rgb(199, 146, 234)">...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="display:inline-block;color:rgb(199, 146, 234)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">  server:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token property">setupFn</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> import serverSetup from </span><span class="token string" style="color:rgb(195, 232, 141)">"@server/serverSetup.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/server/serverSetup.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">Queue</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'bull'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> queue </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Queue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'waspleau'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> process</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">REDIS_URL</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">||</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'redis://127.0.0.1:6379'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">defaultJobOptions</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">removeOnComplete</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">queue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">process</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'*'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">job</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">default</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// To initially populate the queue, we can do:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> queue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">add</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// first run, one-off job</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> queue</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">add</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">repeat</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">cron</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'*/10 * * * *'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// recurring job</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="abstracting-workers-and-job-processing">Abstracting workers and job processing<a class="hash-link" href="#abstracting-workers-and-job-processing" title="Direct link to heading">​</a></h3><p>Awesome, we can now enqueue and process background jobs, but how can we make it easy to create many different kinds of jobs and schedule them to run at different intervals? For Waspleau, we created our own type of worker object convention to help standardize and simplify adding more:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/server/workers/template.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">workerFunction</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">opts</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Metric 1 name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">value</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'foo'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">updatedAt</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Metric 2 name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">value</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'bar'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">updatedAt</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> workerTemplate </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Job Name'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">fn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> workerFunction</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">schedule</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'*/10 * * * *'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>With this <code>workerFunction</code> setup, we can return one or more metrics per worker type. Waspleau can easily use any module that exports this shape. Here is a real example from the demo that makes HTTP calls to GitHub’s API with Axios:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/server/workers/github.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">axios</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'axios'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">workerFunction</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">opts</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token console class-name" style="color:rgb(255, 203, 107)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">log</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'github.js workerFunction'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> now </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Date</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">now</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> response </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> axios</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'https://api.github.com/repos/wasp-lang/wasp'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Wasp GitHub Stars'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">value</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">stargazers_count</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">updatedAt</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> now </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Wasp GitHub Language'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">value</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">language</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">updatedAt</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> now </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Wasp GitHub Forks'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">value</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">forks</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">updatedAt</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> now </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'Wasp GitHub Open Issues'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">value</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> response</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">data</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">open_issues</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">updatedAt</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> now </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token console class-name" style="color:rgb(255, 203, 107)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> githubWorker </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">name</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'GitHub API'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">fn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> workerFunction</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">schedule</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'*/10 * * * *'</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><em>Note: Please see the <a href="https://github.com/wasp-lang/wasp/blob/release/examples/waspleau/src/server/serverSetup.js" target="_blank" rel="noopener noreferrer">actual serverSetup.js file</a> for how we use this abstraction in practice.</em></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="server--client">Server → client<a class="hash-link" href="#server--client" title="Direct link to heading">​</a></h3><p>We now have jobs running and data updating at regular intervals, nice, but we still need a way to send that data down the wire. Here, we expose the in-memory data from our <code>server.setupFn</code> module so our queries can also use it:</p><div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">main.wasp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">...</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="display:inline-block;color:rgb(199, 146, 234)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">query dashboard</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token selector" style="color:rgb(199, 146, 234)">fn: import</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> refreshDashboardData </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> from </span><span class="token string" style="color:rgb(195, 232, 141)">"@server/dashboard.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/server/dashboard.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> getDashboardData </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'./serverSetup.js'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">refreshDashboardData</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">_args</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> _context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">getDashboardData</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/server/serverSetup.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> dashboardData </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// This is updated in the queue process callback</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">getDashboardData</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">Object</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">values</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">dashboardData</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">flat</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>From there, we can request it on the frontend in React components as usual and also set a one-minute client-side refetch interval just for good measure:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/client/MainPage.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> dashboardData</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> isFetching</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> error </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useQuery</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">refreshDashboardData</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token keyword null nil" style="font-style:italic">null</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">refetchInterval</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">60</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">*</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">1000</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="congratulations-lets-dance">Congratulations, let’s dance!<a class="hash-link" href="#congratulations-lets-dance" title="Direct link to heading">​</a></h2><p>Whew, we did it! If you’d like to deploy your own customized version of this dashboard, please clone <a href="https://github.com/wasp-lang/wasp" target="_blank" rel="noopener noreferrer">our repo</a> and check out the Waspleau example <a href="https://github.com/wasp-lang/wasp/blob/release/examples/waspleau/README.md" target="_blank" rel="noopener noreferrer">README.md</a> for tips on getting started. You can also <a href="https://wasp-lang.dev/docs" target="_blank" rel="noopener noreferrer">check out our docs</a> to dive deeper into anything.</p><p><img loading="lazy" alt="Rickroll" src="/assets/images/waspleau-rickroll-646268d60261b4da70effe5f77737b24.gif" width="498" height="373" class="img_ev3q"></p><p><em>Still got ya! :D</em></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2022-is-going-to-be-exciting-">2022 is going to be exciting 🚀<a class="hash-link" href="#2022-is-going-to-be-exciting-" title="Direct link to heading">​</a></h2><p>While this functionality currently exists outside of Wasp, keep an eye on our roadmap as we head toward 1.0. We will be busy adding lots of great features to our Wasp DSL in the coming months that will supercharge your web development experience! Thanks for reading, and please feel free to connect with us in <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">Discord</a> about using Wasp on your next project.</p>]]></content>
        <author>
            <name>Shayne Czyzewski</name>
            <uri>https://github.com/shayneczyzewski</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Meet the team - Shayne Czyzewski, Founding Engineer]]></title>
        <id>/2021/12/21/shayne-intro</id>
        <link href="https://wasp-lang.dev/blog/2021/12/21/shayne-intro"/>
        <updated>2021-12-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Welcome Shayne!]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Welcome Shayne!" src="/assets/images/shayne-intro-banner-61f7a73fc61bf6aaaa936d4508954aa1.png" width="1130" height="592" class="img_ev3q"></p><p>Find Shayne on <a href="https://twitter.com/shayneczyzewski" target="_blank" rel="noopener noreferrer">Twitter</a> and <a href="https://github.com/shayneczyzewski" target="_blank" rel="noopener noreferrer">GitHub</a>.</p><p><em>Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><p><strong>We are super excited to introduce Shayne, the first person to join the Wasp team!</strong> Shayne is a battle-tested veteran engineer, with experiences ranging from leading teams at high-growth startups to working at enterprise giants such as Red Hat and NetApp. Along with that, he is super nice and incredibly pleasant to work with - we are beyond thrilled that he chose Wasp for his next adventure with him and can't wait for you to <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">meet him in our Discord community</a>!</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="why-did-you-join-wasp">Why did you join Wasp?<a class="hash-link" href="#why-did-you-join-wasp" title="Direct link to heading">​</a></h4><p>I have always been excited about high-quality dev tooling and web frameworks, and I am also interested in Haskell/compilers. The technology, problem space, and team were just too compelling to pass up. I was also excited to be on the ground floor of a YC startup, where I can have a significant impact and help build a broad, welcoming, open-source community of Wasp developers.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="what-did-you-do-before">What did you do before?<a class="hash-link" href="#what-did-you-do-before" title="Direct link to heading">​</a></h4><p>I have been a professional developer for over a decade, mostly in backend web development, with experience from Lockheed Martin, Morgan Stanley, NetApp, and Red Hat. Most recently, I was the head of engineering at an edtech company called LearnPlatform, where we were handling a quarter of a billion incoming events per day with the goal of understanding and improving student access to technology that works best for them.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-your-favorite-languageframework">What is your favorite language/framework?<a class="hash-link" href="#what-is-your-favorite-languageframework" title="Direct link to heading">​</a></h4><p>My favorite framework is probably Ruby on Rails, for the elegance of ideas and seamless implementation. I never had an actual favorite programming language, as I enjoy different aspects of Ruby, Elixir, JavaScript, C#, and others. My least favorite has always been Java. My current favorite language is fast becoming Haskell. :)</p><p>The most interesting niche programming language I have used professionally was Ada at Lockheed Martin. We used it to build distributed, real-time, full-motion flight simulators for the military (think multi-million dollar, hyperrealistic multiplayer video games).</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="what-are-you-most-excited-about-in-wasp">What are you most excited about in Wasp?<a class="hash-link" href="#what-are-you-most-excited-about-in-wasp" title="Direct link to heading">​</a></h4><p>As web developers, I think we have gotten accustomed to a certain level of complexity that is not associated with the problem we are solving but the boilerplate of the process. This lack of nuance between accidental and essential complexity has recently led to less than ideal low-code approaches. Wasp, in my view, takes the better approach of a higher-level DSL to abstract some of the typical details using best practices, leaving you to focus on your problem by writing actual code that produces a real web app without any vendor lock-in. That is pretty amazing to me!</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="how-did-you-start-coding">How did you start coding?<a class="hash-link" href="#how-did-you-start-coding" title="Direct link to heading">​</a></h4><p>Probably by creating some basic LAMP apps in the late 90s while in high school. Growing up, our parents wanted us to have summer jobs to earn money we could spend during the rest of the year. I quickly found that freelance web development on Elance, and similar sites, was more enjoyable and profitable than the alternatives available to 15-year-olds. From then on, I was hooked.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-your-dev-setup">What is your dev setup?<a class="hash-link" href="#what-is-your-dev-setup" title="Direct link to heading">​</a></h4><p>MacBook Air M1 with an external Dell display, Magic Trackpad, and a split mechanical keyboard from UHK (Ultimate Hacking Keyboard).</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="camelcase-or-snake_case"><code>camelCase</code> or <code>snake_case</code>?<a class="hash-link" href="#camelcase-or-snake_case" title="Direct link to heading">​</a></h4><p>I default to whatever the language or codebase conventions are. Visually, I prefer snake case, though (and definitely spaces over tabs). ;)</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="whats-one-piece-of-advice-youd-give-to-an-aspiring-developer">What's one piece of advice you'd give to an aspiring developer?<a class="hash-link" href="#whats-one-piece-of-advice-youd-give-to-an-aspiring-developer" title="Direct link to heading">​</a></h4><p>One of the biggest differentiators I have found between good and great engineers is that the great ones possess a continuous desire to learn and grow. They view challenges as fun opportunities to expand their knowledge and skills, recognizing that they always have room for improvement. The corollary is that impostor syndrome is real and never goes away, so try not to be too hard on yourself along the way!</p><p><em>This post was the first of several new hire announcements in the months to come, so stay tuned and reach out if you want to work with Martin, Shayne, and myself!</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="wasp" term="wasp"/>
        <category label="new-hire" term="new-hire"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How we built a Trello clone with Wasp - Waspello!]]></title>
        <id>/2021/12/02/waspello</id>
        <link href="https://wasp-lang.dev/blog/2021/12/02/waspello"/>
        <updated>2021-12-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Enter Waspello]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Enter Waspello" src="/assets/images/waspello-screenshot-cfb8c8229fb035e7bbac6ca19cafd805.png" width="1702" height="774" class="img_ev3q"></p><p align="center"><a href="https://waspello.netlify.app/" target="_blank" rel="noopener noreferrer">Try Waspello here!</a> | <a href="https://github.com/wasp-lang/wasp/blob/release/examples/waspello/main.wasp" target="_blank" rel="noopener noreferrer">See the code</a></p><p>We've built a Trello clone using Wasp! Read on to learn how it went and how you can contribute. </p><p><em>Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-trello">Why Trello?<a class="hash-link" href="#why-trello" title="Direct link to heading">​</a></h2><p>While building Wasp, our goal is to use it as much as we can to build our projects and play with it, so we can learn what works and what we should do next. This is why Trello was a great choice of app to build with Wasp - it is one of the most well-known full-stack web apps, it's very simple and intuitive to use  but also covers a good portion of features used by today's modern web apps.</p><p>So let's dig in and see and how it went - what works, what doesn't and, what's missing/coming next!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-works">What works?<a class="hash-link" href="#what-works" title="Direct link to heading">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="its-alive--">It's alive ⚡🤖 !!<a class="hash-link" href="#its-alive--" title="Direct link to heading">​</a></h3><p>The good news is all the basic functionality is here - Waspello users can signup/log in which brings them to their project board where they can perform CRUD operations on lists and cards - create them, edit them, move them around, etc. Let's see it in action:</p><p><img loading="lazy" alt="Waspello in action" src="/assets/images/waspello-in-action-6ba87b72af0af99a4c4acb9adf0cf3bb.gif" width="1682" height="954" class="img_ev3q"></p><p align="center" class="image-caption">Waspello in action!</p><p>As you can see things work, but not everything is perfect (e.g. there is a delay when creating/moving a card) - we'll examine why is that so a bit later.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="under-the-hood--">Under the hood 🚘 🔧<a class="hash-link" href="#under-the-hood--" title="Direct link to heading">​</a></h3><p>Here is a simple visual overview of Waspello's code anatomy (which applies to every Wasp app):</p><p><img loading="lazy" alt="Waspello code anatomy" src="/assets/images/waspello-code-anatomy-9643f6079036dbb4e828275fe700f10f.png" width="731" height="545" class="img_ev3q"></p><p align="center" class="image-caption">Waspello code anatomy</p><p>Let's now dig in a bit deeper and shortly examine each of the concepts Wasp supports (page, query, entity, ...) and learn through code samples how to use it to implement Waspello.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="entities">Entities<a class="hash-link" href="#entities" title="Direct link to heading">​</a></h4><p>It all starts with a data model definition (called <code>entity</code> in Wasp), which is defined via Prisma Schema Language:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">main.wasp | Defining entities via Prisma Schema Language</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Entities</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">entity </span><span class="token maybe-class-name">User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">psl</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    id          </span><span class="token maybe-class-name">Int</span><span class="token plain">     @id @</span><span class="token keyword module" style="font-style:italic">default</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">autoincrement</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    username    </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">String</span><span class="token plain">  @unique</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    password    </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    lists       </span><span class="token maybe-class-name">List</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    cards       </span><span class="token maybe-class-name">Card</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">psl</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">entity </span><span class="token maybe-class-name">List</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">psl</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    id          </span><span class="token maybe-class-name">Int</span><span class="token plain">     @id @</span><span class="token keyword module" style="font-style:italic">default</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">autoincrement</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    name        </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    pos         </span><span class="token maybe-class-name">Float</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// List has a single author.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    user        </span><span class="token maybe-class-name">User</span><span class="token plain">    @</span><span class="token function" style="color:rgb(130, 170, 255)">relation</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">fields</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">userId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">references</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    userId      </span><span class="token maybe-class-name">Int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    cards       </span><span class="token maybe-class-name">Card</span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">psl</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">entity </span><span class="token maybe-class-name">Card</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain">psl</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    id          </span><span class="token maybe-class-name">Int</span><span class="token plain">     @id @</span><span class="token keyword module" style="font-style:italic">default</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">autoincrement</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    title       </span><span class="token known-class-name class-name" style="color:rgb(255, 203, 107)">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    pos         </span><span class="token maybe-class-name">Float</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Card belongs to a single list.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    list        </span><span class="token maybe-class-name">List</span><span class="token plain">    @</span><span class="token function" style="color:rgb(130, 170, 255)">relation</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">fields</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">listId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">references</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    listId      </span><span class="token maybe-class-name">Int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Card has a single author.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    author      </span><span class="token maybe-class-name">User</span><span class="token plain">    @</span><span class="token function" style="color:rgb(130, 170, 255)">relation</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">fields</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">authorId</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">references</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token plain">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    authorId    </span><span class="token maybe-class-name">Int</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">psl</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Those three entities are all we need! Wasp uses Prisma to create a database schema underneath and allows the developer to query it through its generated SDK.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="queries-and-actions-operations">Queries and Actions (Operations)<a class="hash-link" href="#queries-and-actions-operations" title="Direct link to heading">​</a></h4><p>After we've defined our data models, the next step is to do something with them! We can read/create/update/delete an entity and that is what <code>query</code> and <code>action</code> mechanisms are for. Below follows an example from the Waspello code that demonstrates how it works.</p><p>The first step is to declare to Wasp there will be a query, point to the actual function containing the query logic, and state from which entities it will be reading information:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">main.wasp | Declaration of a query in Wasp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">query getListsAndCards </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Points to the function which contains query logic.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">fn</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> getListsAndCards </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@server/queries.js"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// This query depends on List and Card entities.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// If any of them changes this query will get re-fetched (cache invalidation).</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">entities</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token maybe-class-name">List</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token maybe-class-name">Card</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The main point of this declaration is for Wasp to be aware of the query and thus be able to <strong>do a lot of heavy lifting for us - e.g. it will make the query available to the client without any extra code</strong>, all that developer needs to do is import it in their React component. <strong>Another big thing is cache invalidation / automatic re-fetching of the query once the data changes</strong> (this is why it is important to declare which entities it depends on).</p><p>The remaining step is to write the function with the query logic:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/server/queries.js | Query logic, using Prisma SDK via Node.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword module" style="font-style:italic">export</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function" style="color:rgb(130, 170, 255)">getListsAndCards</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">args</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token parameter"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Only authenticated users can execute this query.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">!</span><span class="token plain">context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">throw</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">HttpError</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">403</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">entities</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access maybe-class-name">List</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">findMany</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// We want to make sure user can access only their own cards.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">where</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">user</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">id</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> context</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">user</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">include</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">cards</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is just a regular Node.js function, there are no limits on what you can return! All the stuff provided by Wasp (user data, Prisma SDK for a specific entity) comes in a <code>context</code> variable.</p><p>The code for actions is very similar (we just need to use <code>action</code> keyword instead of <code>query</code>) so I won't repeat it here. You can check out the code for <code>updateCard</code> action <a href="https://github.com/wasp-lang/wasp/blob/release/examples/waspello/main.wasp#L103" target="_blank" rel="noopener noreferrer">here</a>.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="pages-routing--components">Pages, routing &amp; components<a class="hash-link" href="#pages-routing--components" title="Direct link to heading">​</a></h4><p>To display all the nice data we have, we'll use React components. There are no limits to how you can use React components within Wasp, the only one is that each <code>page</code> has its root component:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">main.wasp | Declaration of a page &amp; route in Wasp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">route </span><span class="token maybe-class-name">MainRoute</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">path</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"/"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token literal-property property">to</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token maybe-class-name">Main</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">page </span><span class="token maybe-class-name">Main</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">authRequired</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token boolean" style="color:rgb(255, 88, 116)">true</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token literal-property property">component</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports maybe-class-name">Main</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"@client/MainPage.js"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>All pretty straightforward so far! As you can see here, Wasp also provides <a href="/docs/language/features#authentication--authorization">authentication out-of-the-box</a>.</p><p>Currently, the majority of the client logic of Waspello is contained in <code>src/client/MainPage.js</code> (we should break it down a little 😅 - <a href="https://github.com/wasp-lang/wasp/issues/334" target="_blank" rel="noopener noreferrer">you can help us!</a>). Just to give you an idea, here's a quick glimpse into it:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">src/client/MainPage.js | Using React component in Wasp</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// "Special" imports provided by Wasp.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token imports"> useQuery </span><span class="token imports punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/queries'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">getListsAndCards</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/queries/getListsAndCards'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword module" style="font-style:italic">import</span><span class="token plain"> </span><span class="token imports">createList</span><span class="token plain"> </span><span class="token keyword module" style="font-style:italic">from</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">'@wasp/actions/createList'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token function-variable function maybe-class-name" style="color:rgb(130, 170, 255)">MainPage</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token parameter"> user </span><span class="token parameter punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Fetching data via useQuery.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token literal-property property">data</span><span class="token operator" style="color:rgb(137, 221, 255)">:</span><span class="token plain"> listsAndCards</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> isFetchingListsAndCards</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> errorListsAndCards </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">useQuery</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">getListsAndCards</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// A lot of data transformations and sub components.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">// Display lists and cards.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Once you've defined a query or action as described above, you can immediately import it into your client code as shown in the code sample, by using the <code>@wasp</code> prefix in the import path. <code>useQuery</code> ensures reactivity so once the data changes the query will get re-fetched. You can find more details about it <a href="/docs/language/features#usequery">here</a>.</p><p>This is pretty much it from the stuff that works 😄 ! I kinda rushed a bit through things here - for more details on all Wasp features and to build your first app with Wasp, check out our <a href="/docs">docs</a>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-doesnt-work-yet">What doesn't work (yet)<a class="hash-link" href="#what-doesnt-work-yet" title="Direct link to heading">​</a></h2><p>The main problem of the current implementation of Waspello is the <strong>lack of support for optimistic UI updates in Wasp</strong>. What this means is that currently, when an entity-related change is made (e.g. a card is moved from one list to another), we have to wait until that change is fully executed on the server until it is visible in the UI, which causes a noticeable delay.<br>
<!-- -->In many cases that is not an issue, but when UI elements are all visible at once and it is expected from them to be updated immediately, then it is noticeable. This is also one of the main reasons why we chose to work on Waspello - to have a benchmark/sandbox for this feature! Due to this issue, here's how things currently look like:</p><div><p align="center"></p><figure><img alt="Waspello - no optimistic UI update" src="/img/waspello-no-opt-UI-updates.gif"><figcaption class="image-caption" style="font-style:italic;opacity:0.6;font-size:0.9rem">Without an optimistic UI update, there is a delay</figcaption></figure><p></p></div><p>You can notice the delay between the moment the card is dropped on the "Done" list and the moment it becomes a part of that list. The reason is that at the moment of dropping the card on "Done" list, the API request with the change is sent to the server, and only when that change is fully processed on the server and saved to the database, the query <code>getListsAndCards</code> returns the correct info and consequently, UI is updated to the correct state.<br>
<!-- -->That is why upon dropping on "Done", the card first goes back to the original list (because the change is not saved in db yet, so <code>useQuery(getListsAndCards)</code> still returns the "old" state), it waits a bit until the API request is processed successfully, and just then the change gets reflected in the UI.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="the-solution">The solution<a class="hash-link" href="#the-solution" title="Direct link to heading">​</a></h4><p>A typical approach for solving this issue is to <strong>make the client a bit more self-confident, in a way that it doesn't wait for the confirmation from the server but rather immediately updates the UI, at the same time or even before the API request is fired</strong>. If it then turns out something went wrong on the server (which typically shouldn't happen), it reverses the change and shows an error message. Thus the name optimistic UI update, since the client assumes in advance that everything will go well to provide a nicer UX.</p><p align="center"></p><figure><img loading="lazy" alt="Waspello - the client being brave" src="/img/waspello-client-being-brave.gif" class="img_ev3q"><figcaption class="image-caption">The client when performing an optimistic UI update</figcaption></figure><p></p><p>This is one of the most complex and error-prone features when developing web apps today and that is why we are super excited to tackle it in Wasp and make the experience as smooth as possible! We are currently in the "figuring out the solution" stage and you can <a href="https://github.com/wasp-lang/wasp/issues/63" target="_blank" rel="noopener noreferrer">track/join the discussion on GitHub</a>!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-missing-next-features">What's missing (next features)<a class="hash-link" href="#whats-missing-next-features" title="Direct link to heading">​</a></h2><p>Although it looks super simple at the first glance, Trello is in fact a huge app with lots and lots of cool features hidden under the surface! Here are some of the more obvious ones that are currently not supported in Waspello:</p><ul><li><strong>Users can have multiple boards</strong>, for different projects (currently we have no notion of a "Board" entity in Waspello at all, so there is implicitly only one)</li><li><strong>Detailed card view</strong> - when clicked on a card, a "full" view with extra options opens</li><li><strong>Search</strong> - user can search for a specific list/card</li><li><strong>Collaboration</strong> - multiple users can participate on the same board</li></ul><p>And many more - e.g. support for workspaces (next level of the hierarchy, a collection of boards), card labels, filters, ... . It is very helpful to have such a variety of features since we can use it as a testing ground for Wasp and use it as a guiding star towards Beta/1.0!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="become-a-waspeller">Become a Waspeller!<a class="hash-link" href="#become-a-waspeller" title="Direct link to heading">​</a></h2><p align="center"></p><figure style="width:55%"><img loading="lazy" alt="Waspello propaganda" src="/img/waspello-propaganda.png" class="img_ev3q"><figcaption class="image-caption">Lightweight Waspello propaganda</figcaption></figure><p></p><p> If you want to get involved with OSS and at the same time familiarize yourself with Wasp, this is a great way to get started - feel free to <a href="https://github.com/wasp-lang/wasp/issues/337" target="_blank" rel="noopener noreferrer">choose one of the features listed here or add your own</a> and help us make Waspello the best demo productivity app out there!</p><p>Also, make sure to <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">join our community on Discord</a>. We’re always there and are looking forward to seeing what you build!</p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="webdev" term="webdev"/>
        <category label="wasp" term="wasp"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Our fundraising learnings - 250+ meetings in 98 days to the oversubscribed round]]></title>
        <id>/2021/11/22/fundraising-learnings</id>
        <link href="https://wasp-lang.dev/blog/2021/11/22/fundraising-learnings"/>
        <updated>2021-11-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Wasp fundraise chart]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" alt="Wasp fundraise chart" src="/assets/images/wasp-fundraise-chart-a33933a8d730d069466d786cdd899558.png" width="1200" height="742" class="img_ev3q"></p><p>Wasp was part of <a href="https://www.ycombinator.com/" target="_blank" rel="noopener noreferrer">Y Combinator</a>’s W21 batch, which took place from January of 2021 until the end of March.</p><p>We want to share what we learned during the process!</p><p><em>Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><p>At Demo Day, our product had a solid traction (200+ projects created, 1k Github stars, good <a href="https://www.producthunt.com/posts/wasp-lang-alpha" target="_blank" rel="noopener noreferrer">ProductHunt</a> and <a href="https://news.ycombinator.com/item?id=26091956" target="_blank" rel="noopener noreferrer">HackerNews</a> feedback) but no monetisation yet, which is typical for open-source projects at this stage. Being based in the EU, we also didn't have a huge network in the Bay Area prior to the fundraise.</p><div class="theme-admonition theme-admonition-caution alert alert--warning admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 16 16"><path fill-rule="evenodd" d="M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"></path></svg></span>caution</div><div class="admonitionContent_S0QG"><p>I will try to refrain from giving "general" advice (as our fundraise is a single data point), and focus on the stats and specific things that worked for us. Keep in mind the same might not work for you - I recommend always taking advice with a pinch of salt to see what makes the most sense in your case.</p></div></div><p>As we approached our fundraise, we didn't really know what to expect. We had friends from the previous batch that raised a big round very quickly (even before Demo Day) and heard a couple of stories from a few other YC founders who were also quite successful, so we imagined it might go quickly for us too.</p><p>As you can see from the title, we had quite a journey with plenty of meetings that provided us a lot of input on how to improve our pitch, and maybe even more importantly, how to reach the right investors.</p><p>Here are our stats:</p><ul><li>we spoke to <strong>212 investors</strong> → that led to <strong>250+ meetings</strong></li><li><strong>98 days</strong> passed between the first and the last signed SAFE</li><li><strong>171</strong> investor passed, <strong>24</strong> never responded, <strong>17</strong> invested</li></ul><p>And here is how it all looked when laid out on a timeline:
<img loading="lazy" alt="Wasp fundraise chart" src="/assets/images/wasp-fundraise-chart-a33933a8d730d069466d786cdd899558.png" width="1200" height="742" class="img_ev3q"></p><p>Here are some of the things that worked for us:</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="we-treated-fundraising-as-a-sales-process-and-stuck-to-it">We treated fundraising as a sales process (and stuck to it)<a class="hash-link" href="#we-treated-fundraising-as-a-sales-process-and-stuck-to-it" title="Direct link to heading">​</a></h2><p><img loading="lazy" alt="Wasp fundraise funnel" src="/assets/images/wasp-fundraise-funnel-bbf1b2a80cd7af81c9e3c6790b4a0541.png" width="838" height="74" class="img_ev3q"></p><p>This means we had a typical sales funnel - lead generation, selling (pitching) and following up:</p><ul><li><strong>Lead generation</strong>: it started with Demo Day of course, from which we got 100+ leads but none of them ended up investing (more on that below). After that we mainly relied on our YC batchmates to identify relevant investors and get the intros.</li><li><strong>Pitching</strong>: we did a conversational pitch without the deck, but we had a Notion one-pager from which I would drop links during the conversation (to e.g. our traction chart, user testimonials etc.). It also worked well as investors would typically find it interesting and keep scrolling through as we talked, asking follow-up questions.</li><li><strong>Following-up</strong>: we followed up once per week. I would usually "batch process" it each Wednesday. We used Streak to identify all the leads that I haven't heard from in over 7 days (there is a filter for that) and then manually emailed them.</li></ul><p>We started with tracking everything in Google Sheets, but with the volume of leads it soon became hard to navigate them through the funnel. Then we switched to Streak (used their fundraising template, and modified it a bit) and that worked great. The most helpful thing for me was having a CRM that is integrated with gmail, that made the process much more seamless and gave us better overview of the funnel. As soon as I would receive an email I could see in which stage the investor is, and it was also super easy to add new investors straight from gmail - it saved us from the dreaded context switching and kept us focused.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="our-pitch-became-much-better-after-50-meetings">Our pitch became much better after ~50 meetings<a class="hash-link" href="#our-pitch-became-much-better-after-50-meetings" title="Direct link to heading">​</a></h2><p>We kept being critical of our pitch and kept a list of questions that we felt needed more work. We called it "creating narratives", e.g. why the right time for our product is now, presenting the team, or how we plan to monetise. We talked to other companies in the same space (devtools, OSS), investigated comparatives (big companies we compared ourselves too), talked to our angels who were domain experts and used all that to build a more convincing story.</p><p>I never intended to learn our pitch by heart, but after delivering it for 100s of times just that happened - both me and Martin (my brother and cofounder, who wasn't pitching but was always sitting behind me and provided feedback, especially in the beginning) knew it word by word and I realised how much more polished it sounds and how much more confident I felt compared to when we just started.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="our-goal-was-to-get-to-100-nos">Our goal was to get to 100 no's<a class="hash-link" href="#our-goal-was-to-get-to-100-nos" title="Direct link to heading">​</a></h2><p>After about 50 meetings (and about 20 VCs having passed on us) we started feeling a bit disheartened, as things didn't seem to go so easy as we initially expected. Then I chatted to a friend who also recently finished their fundraise and he gave me a tour of Streak - I saw their numbers and that over 150 investors passed on them! With that I realised our 20 passes were just the beginning and that instead of chasing yeses we should actually chase no's :) - they are more predictable, you'll get plenty of them and they will clearly show your progress.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="we-had-100-leads-from-demo-day---none-of-them-invested">We had 100+ leads from Demo Day - none of them invested<a class="hash-link" href="#we-had-100-leads-from-demo-day---none-of-them-invested" title="Direct link to heading">​</a></h2><p>This is probably pretty specific for our case, but it's how it went. Connecting with a startup on Demo Day is a very low-cost action for investors. Also, as many investors as there are on Demo Day, there are even more of them who aren't.</p><p>When we sorted through the connections we got, about 20% were a really good fit for us, meaning they invest in deep tech / OSS companies, have invested recently, invest in our stage etc.</p><p>We still met with pretty much all the interested leads, but we quickly realised that due to our product being deeply technical and the company being pre-revenue, only investors with engineering backgrounds were really interested because they could understand and get excited about what we do. That informed us to generate our leads with much narrower focus.</p><p>We looked at other OSS &amp; dev tools companies in our batch, looked at who invested in them and asked for intros. Our batchmates were also in the fundraising mode, they knew how hard it can be and they wanted to help, so everything moved very quickly.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="we-learned-not-to-spend-time-on-non-believers">We learned not to spend time on non-believers<a class="hash-link" href="#we-learned-not-to-spend-time-on-non-believers" title="Direct link to heading">​</a></h2><p>As we learned to focus on the highly qualified leads, we also learned that it is very hard (impossible) to change somebody's mind. Plenty of investors liked u and what we do, but they were skeptical about e.g. market size or monetisation potential and made that clear from the start. Many of them were keen to keep chatting, wanted to meet our angel investors etc., but none of that helped change their mind and it was very distracting for us. I believe it is very hard to change somebody's worldview, especially in the seed stage when there is often no strong factual evidence to do so.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="passing-through-the-valley-of-death">Passing through the "valley of death"<a class="hash-link" href="#passing-through-the-valley-of-death" title="Direct link to heading">​</a></h2><p>As you can see on the chart, about two months in we barely passed $300k, and we had a whole month with no progress. At the same time, we felt that our pitch got significantly better and we were reaching investors much better suited for us.
It was one of the most difficult times, seeing others close their rounds, but we decided to trust in the process and keep going until we have used all the resources we had. It was also the time our lead investor took time to do their own pretty extensive due diligence on Wasp, so although it looks like no progress was made from the outside, a lot of stuff was actually happening behind the scenes.</p><p>Suddenly, a few things clicked together from multiple sides and our round was quickly closed, even oversubscribed! It was truly a magical feeling to start closing investors in a single day, even during the first call, when previously it took us weeks to close our first $50k check. The big factor was also that our round was getting filled up and that of course motivated investors to move faster.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="we-compared-ourselves-to-big-successful-companies">We compared ourselves to big, successful companies<a class="hash-link" href="#we-compared-ourselves-to-big-successful-companies" title="Direct link to heading">​</a></h2><p>This is one of the best pieces of advice we got from YC partners about fundraising. In the beginning we didn't understand how important this was, but once the meetings started we realised this was one of the best ways to explain the potential of our company to investors. With the innovation in technology that isn't easy to grasp, they needed something to hold on to understand how the business model and distribution could work, and it sounds much more doable if there is a playbook we can follow rather than us reinventing that as well. We kept working on finding a good comparable (we had a few) and explaining in which ways we are similar and why.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="good-luck---you-can-do-it">Good luck - you can do it!<a class="hash-link" href="#good-luck---you-can-do-it" title="Direct link to heading">​</a></h2><p>I hope you found this helpful and that our story will motivate you to keep going once things get hard! We wish you the best of luck and also feel free to reach out if you'll have any questions.</p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="startup" term="startup"/>
        <category label="wasp" term="wasp"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Following YC, Wasp raised $1.5M Seed Round led by Lunar Ventures and HV Capital]]></title>
        <id>/2021/11/21/seed-round</id>
        <link href="https://wasp-lang.dev/blog/2021/11/21/seed-round"/>
        <updated>2021-11-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[After graduating from Y Combinator's Winter 2021 Batch, we are super excited to announce that Wasp raised $1.5m in our first funding round! The round is led by Lunar Ventures and joined by HV Capital. Also see it in TechCrunch.]]></summary>
        <content type="html"><![CDATA[<p>After graduating from Y Combinator's Winter 2021 Batch, we are super excited to announce that Wasp raised $1.5m in our first funding round! The round is led by Lunar Ventures and joined by HV Capital. Also <a href="https://techcrunch.com/2021/10/04/yc-grads-wasp-land-1-5m-seed-to-help-developers-build-web-apps-faster/" target="_blank" rel="noopener noreferrer">see it in TechCrunch</a>.</p><p>The best thing about it is that the majority of our investors are either experienced engineers themselves (e.g. ex-Facebook, Twitter and Airbnb) or have a strong focus on investing in deep technology and developer companies. They share the vision we have with Wasp, understand and care about the problem we are solving.</p><p><em>Wasp is a configuration language (DSL) for building full-stack web apps with less code and best practices that works alongside React and Node.js. We are on a mission to streamline web app development while empowering developers to continue using the power of code and their favorite tools. We are backed by Y Combinator and engineers from Airbnb, Facebook, and Lyft.</em></p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p><p>Besides Lunar and HV Capital, we are thrilled to welcome on board:</p><ul><li>468 Capital (led by Florian Leibert, founder of Mesosphere and ex-Twitter and Airbnb eng.)</li><li>Charlie Songhurst</li><li>Tokyo Black</li><li>Acequia Capital</li><li>Abstraction Capital</li><li>Ben Tossell, founder of Makerpad (acq. by Zapier)</li><li>Muthukrishnan Ramabadran, Senior Software Engineer at Lyft</li><li>Yun-Fang, ex-Facebook engineer</li><li>Marcel P. Lima from Heller House</li><li>Chris Schagen, former CMO on Contentful</li><li>Rahul Thathoo, Sr. Eng. Manager at Square</li><li>Preetha Parthasarathy</li><li>John Kobs</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-did-we-raise-funding">Why did we raise funding?<a class="hash-link" href="#why-did-we-raise-funding" title="Direct link to heading">​</a></h2><p>At its core, Wasp is an open-source project and we have full intention for it to stay that way. Open-source is one of the most powerful ways to write software and we want to make sure Wasp is freely accessible to every developer.</p><p>Wasp is a technically innovative and challenging project. Even though we are not building a new general programming language from scratch, there still exists an essential complexity of building a language and all the tooling around it. Wasp offers a lot of abstractions that are being introduced for the first time and there is no clear blueprint to follow, and this is why such an undertaking requires full-time attention and dedication. Hence, we plan on expanding the team with some amazing engineers to accelerate us on our journey.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="where-are-we-today">Where are we today?<a class="hash-link" href="#where-are-we-today" title="Direct link to heading">​</a></h2><p>Today, Wasp is in Alpha. That means there are many features we still have to add and many that are probably going to change. But it also means you can <a href="/docs">try it out, build a full-stack web app</a> and see what it is all about. You can also join <a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer">our community</a> and share your feedback and experience with us - we'd be happy to hear from you!</p><p>Since we launched our Alpha several months ago, we got some amazing feedback on <a href="https://www.producthunt.com/posts/wasp-lang-alpha" target="_blank" rel="noopener noreferrer">Product Hunt</a> and <a href="https://news.ycombinator.com/item?id=26091956" target="_blank" rel="noopener noreferrer">Hacker News</a>.</p><p>We've also grown a lot and recently passed 1,000 stars on <a href="https://github.com/wasp-lang/wasp" target="_blank" rel="noopener noreferrer">our Github repo</a> - thank you!</p><p><img loading="lazy" alt="Wasp GitHub Stars" src="/assets/images/wasp-gh-stars-raise-ad8427810a2af7e670977401a4838b39.png" width="932" height="618" class="img_ev3q"></p><p>To date, over 250 projects have been created with Wasp in the last couple of months and some were even deployed to production - like <a href="https://farnance.netlify.app/" target="_blank" rel="noopener noreferrer">Farnance</a> that ended up being a hackathon winner! Check out their source code <a href="https://github.com/jlaneve/Farnance" target="_blank" rel="noopener noreferrer">here</a>.</p><p><img loading="lazy" alt="Farnance screenshot" src="/assets/images/farnance-screenshot-e918f7ce85f4beab9a19fa369c44a826.png" width="1950" height="1354" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-team">The team<a class="hash-link" href="#the-team" title="Direct link to heading">​</a></h2><p>Martin and I have been working on Wasp for the last two years and together with our amazing contributors, who made us believe our vision is possible and made it what it is today. Having led development of several complex web apps in the past and continuously switching to the latest stack, we felt the pain and could also clearly see the patterns that we felt were mature and common enough to be worth extracting into a simpler, higher-level language.</p><p align="center"></p><figure><img loading="lazy" alt="The team" src="/img/us-at-ycombinator.jpg" class="img_ev3q"><figcaption>Martin and I during our first YC interview. Read <a href="/blog/2021/02/23/journey-to-ycombinator">here</a> for more details on our journey to YC!</figcaption></figure><p></p><p>In case you couldn't tell from the photo and our identical glasses, we are twins (but not fraternal ones, and I'm a couple of minutes older, which makes me CEO :D)!</p><p>We are coming from the background of C++, algorithm competitions and applied algorithms in bioinformatics (Martin built <a href="https://github.com/martinsos/edlib" target="_blank" rel="noopener noreferrer">edlib</a>, his first OSS project - a popular sequence alignment library used by top bioinfo companies like PacBio) and did our internships in Google and Palantir. There we first encountered the modern web stack and went on to lead development of web platforms in fintech and bioinformatics space. We also had a startup previously (<a href="https://talkbook.co/home" target="_blank" rel="noopener noreferrer">TalkBook</a>), where we learned a lot about talking to users and building something that solves a problem they have.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-comes-next">What comes next?<a class="hash-link" href="#what-comes-next" title="Direct link to heading">​</a></h2><p>With the funding secured, we can now fully focus on developing Wasp and the ecosystem around it. We can start planning for more <a href="https://github.com/wasp-lang/wasp/issues/109" target="_blank" rel="noopener noreferrer">long-term features</a> that we couldn't fully commit to until now, and we can expand our team to move faster and bring more great people on board with new perspectives and enable them to fully employ their knowledge and creativity without any distractions.</p><p>Our immediate focus is to bring Wasp to Beta and then 1.0 (see our high-level roadmap <a href="https://wasp-lang.dev/#what-can-do" target="_blank" rel="noopener noreferrer">here</a>), while also building a strong foundation for our open source community. We believe community is the key to the success for Wasp and we will do everything in our power to make sure everybody feels welcome and has a fun and rewarding experience both building apps and contributing to the project. If you want to shape how millions of engineers develop the web apps of tomorrow, join our community and work with us!</p><p>Thank you for reading - we can't wait to see what you will build!</p><p class="in-blog-cta-link-container"><a href="https://e44cy1h4s0q.typeform.com/to/ycUzQa5A" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">We are in Beta (try it out)!</a><span class="in-blog-cta--divider"> → </span><a href="https://discord.gg/rzdnErX" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Join our community</a><span class="in-blog-cta--divider"> → </span><a href="https://wasp-lang.notion.site/Founding-Engineer-at-Wasp-402274568afa4d7eb7f428f8fa2c0816" target="_blank" rel="noopener noreferrer" class="in-blog-cta--link">Work with us</a></p>]]></content>
        <author>
            <name>Matija Sosic</name>
            <uri>https://github.com/matijasos</uri>
        </author>
        <category label="startup" term="startup"/>
        <category label="wasp" term="wasp"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Tutorial: `forall` in Haskell]]></title>
        <id>/2021/09/01/haskell-forall-tutorial</id>
        <link href="https://wasp-lang.dev/blog/2021/09/01/haskell-forall-tutorial"/>
        <updated>2021-09-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[--------]]></summary>
        <content type="html"><![CDATA[<hr><p>Find out what Haskell's <code>forall</code> is all about.</p><p>You might have seen <code>forall</code> being used in Haskell like this:</p><div class="language-haskell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-haskell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">f</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token hvariable">forall</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token hvariable">xs</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">ys</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">++</span><span class="token plain"> </span><span class="token hvariable">ys</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">where</span><span class="token plain"> </span><span class="token hvariable">ys</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token hvariable">ys</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">reverse</span><span class="token plain"> </span><span class="token hvariable">xs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>or</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">liftPair</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">forall</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token hvariable">b</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token hvariable">b</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>or</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">data</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">forall</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">Show</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token plain"> </span><span class="token hvariable">s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>forall</code> is something called "type quantifier", and it gives extra meaning to polymorphic type signatures (e.g. <code>:: a</code>, <code>:: a -&gt; b</code>, <code>:: a -&gt; Int</code>, ...).</p><p>While normaly <code>forall</code> plays a role of the "universal quantifier", it can also play a role of the "existential quantifier" (depends on the situation).</p><p>What does all this mean and how can <code>forall</code> be used in Haskell? Read on to find out!</p><p>NOTE: we assume you are comfortable with basic polymorphism in Haskell.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="quick-mathlogic-reminder">Quick math/logic reminder<a class="hash-link" href="#quick-mathlogic-reminder" title="Direct link to heading">​</a></h2><p>In mathematical logic, we have</p><ul><li><strong><a href="https://en.wikipedia.org/wiki/Universal_quantification" target="_blank" rel="noopener noreferrer">universal quantifier</a></strong><ul><li>symbol: ∀x</li><li>interpretation: "for all", "given any"</li><li>example: <code>∀x P(x)</code> means "for all x predicate P(x) is true".</li></ul></li><li><strong><a href="https://en.wikipedia.org/wiki/Existential_quantification" target="_blank" rel="noopener noreferrer">existential quantifier</a></strong><ul><li>symbol: ∃x</li><li>interpretation: "there exists", "there is at least one", "for some"</li><li>example: <code>∃x P(x)</code> means "there is some x for which predicate P(x) is true".</li></ul></li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="vanilla-haskell-no-extensions">Vanilla Haskell (no extensions)<a class="hash-link" href="#vanilla-haskell-no-extensions" title="Direct link to heading">​</a></h2><p>In Haskell, all polymorphic type signatures are considered to be implicitly prefixed with <code>forall</code>.</p><p>Therefore, if you have</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">f</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">g</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">b</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>it is really the same as</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">f</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token hvariable">forall</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">g</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token hvariable">forall</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token hvariable">b</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">b</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">b</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>What <code>forall</code> here does is play the role of universal quantifier.
For function <code>f</code>, it means it is saying "for all types, this function takes that type and returns the same type.".
Other way to put it would be "this funtion can be called with value of any type as its first argument, and it will return the value of that same type".</p><p>Since <code>forall</code> is already implicit, writing it explicitly doesn't really do anything!</p><p>Not only that, but without any extensions, you can't even write <code>forall</code> explicitly, you will get a syntax error, since <code>forall</code> is not a keyword in Haskell.</p><p>So what is the purpose of <code>forall</code> then? Well, obviously to be used with extensions :)!</p><p>The simplest extension is <code>ExplicitForAll</code>, which allows you to explicitly write <code>forall</code> (as we did above).
This is not useful on its own though, since as we said above, explicitly writing <code>forall</code> doesn't change anything, it was already implicitly there.</p><p>However, there are other extensions that make use of <code>forall</code> keyword, like: <code>ScopedTypeVariables</code>, <code>RankNTypes</code>, <code>ExistentialQuantification</code>.
All these extensions automatically enable <code>ExplicitForAll</code> extension, which means you don't need to enable it yourself when using any of these.
There is also <code>TypeApplications</code> extension which interacts with <code>forall</code> and in that case you might want to use <code>ExplicitForAll</code> with it.</p><p>Since <code>forall</code> is useful only when used with extensions, let's take a look at how it is used in each one of those!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="forall-and-extension-scopedtypevariables"><code>forall</code> and extension <a href="https://ghc.readthedocs.io/en/latest/glasgow_exts.html#lexically-scoped-type-variables" target="_blank" rel="noopener noreferrer">ScopedTypeVariables</a><a class="hash-link" href="#forall-and-extension-scopedtypevariables" title="Direct link to heading">​</a></h2><p><code>ScopedTypeVariables</code> enables lexical scoping of type variables by explicitly introducing them with <code>forall</code>.</p><p>Let's take a look at the following example:</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">f</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token hvariable">xs</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">ys</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">++</span><span class="token plain"> </span><span class="token hvariable">ys</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">where</span><span class="token plain"> </span><span class="token hvariable">ys</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token hvariable">ys</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">reverse</span><span class="token plain"> </span><span class="token hvariable">xs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This code does not compile, because compiler can't match type of <code>ys</code> with the return type of <code>f</code>.
Why though, when they are both <code>[a]</code>? Well, that is because that is not the same <code>a</code>!
Try changing <code>ys :: [a]</code> to <code>ys :: [b]</code> and you will get the exact same error,
because it is exactly the same code -&gt; <code>a</code> in <code>ys :: [a]</code> and <code>a</code> in <code>f :: [a] -&gt; [a]</code> are different <code>a</code>s and there is no connection between them.
<code>a</code> in <code>ys :: [a]</code> stands for "any type", not for "that type that is reffered to with <code>a</code> in the type signature above".</p><p>This is where <code>ScopedTypeVariables</code> comes in:</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">{-# LANGUAGE ScopedTypeVariables #-}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token hvariable">forall</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token hvariable">xs</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">ys</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">++</span><span class="token plain"> </span><span class="token hvariable">ys</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword" style="font-style:italic">where</span><span class="token plain"> </span><span class="token hvariable">ys</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token hvariable">ys</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">reverse</span><span class="token plain"> </span><span class="token hvariable">xs</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>forall</code> now gets special powers: the type variables bound by a forall (in our case <code>a</code>) scope over the entire definition
of the accompanying value declaration (in this case definition of <code>f</code>).</p><p>This means that any mention of type <code>a</code> in the definition of <code>f</code> now refers to that <code>a</code> from the type signature of <code>f</code>,
which is exactly what we needed, and the code example above now compiles.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="forall-and-extension-rankntypes"><code>forall</code> and extension <a href="https://ghc.readthedocs.io/en/latest/glasgow_exts.html#arbitrary-rank-polymorphism" target="_blank" rel="noopener noreferrer">RankNTypes</a><a class="hash-link" href="#forall-and-extension-rankntypes" title="Direct link to heading">​</a></h2><p>Basically, what <code>RankNTypes</code> does is enable you to use <code>forall</code> nested in type signatures, so that it does not apply to the whole type signature but just the part of it.</p><p>This enables some cool things that you were not able to do to before, for example you can specify that your function takes a polymorphic function as an argument.</p><p>Take a look at this example:</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">foo</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">forall</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">Char</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Bool</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain">    </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">-- We can do this only with RankNTypes.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">bar</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token hvariable">forall</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">a</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">Char</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Bool</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">-- This is usual stuff, we don't need RankNTypes for it. Actually we can even drop `forall` since it is implicit.</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In <code>foo</code>, <code>forall</code> is applied only to the first argument of <code>foo</code>, which is <code>a -&gt; a</code>, and not to the rest of the <code>f</code>'s type signature. This can be done only with <code>RankNTypes</code> extension.
<code>bar</code> on the other hand has <code>forall</code> applied to the whole signature, and we could have even ommited this <code>forall</code> since it would be there implicitly anyway.</p><p>Now, what does this mean? If we now have <code>specificFunc :: Int -&gt; Int</code> and <code>polymorphicFunc :: a -&gt; a</code>, <code>foo polymorphicFunc</code> will compile, while <code>foo specificFunc</code> will not! On the other hand both <code>bar specificFunc</code> and <code>bar polymorphicFunc</code> will compile.</p><p>This is because we specified, with <code>forall</code>, that <code>foo</code> needs a polymorphic function (function that takes value of <strong>any</strong> type and returns value of that same type) as the first argument, so we can't pass it a function like <code>specificFunc</code> that works only for <code>Int</code> -&gt; such function is too specific.
On the other hand, <code>bar</code> needs a function that takes value of <strong>some</strong> type and returns the value of that same type, so <code>specificFunc</code> is completely fine since it works only with <code>Int</code>, while <code>polymorphicFunc</code> is also ok although it is more general than what is needed, since compiler can easily specialize it. </p><p>Another example is <code>liftPair</code> function:</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">liftPair</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">forall</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token hvariable">x</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token hvariable">b</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token hvariable">a</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token hvariable">f</span><span class="token plain"> </span><span class="token hvariable">b</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">liftPair</span><span class="token plain"> </span><span class="token hvariable">func</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">y</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token hvariable">z</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token hvariable">func</span><span class="token plain"> </span><span class="token hvariable">y</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token hvariable">func</span><span class="token plain"> </span><span class="token hvariable">z</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">&gt;&gt; liftPair (:[]) (1, "a")</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">([1], ["a"])</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><code>liftPair</code> takes polymorphic function and applies it to both values in the pair.
There would be no way to write its type signature without using <code>RankNTypes</code>.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="forall-and-extension-existentialquantification"><code>forall</code> and extension <a href="https://ghc.readthedocs.io/en/latest/glasgow_exts.html#existentially-quantified-data-constructors" target="_blank" rel="noopener noreferrer">ExistentialQuantification</a><a class="hash-link" href="#forall-and-extension-existentialquantification" title="Direct link to heading">​</a></h2><p><code>ExistentialQuantification</code> enables us to use <code>forall</code> in the type signature of data constructors.</p><p>This is useful because it enables us to define heterogeneous data types, which then allows us to store different types in a single data collection (which normally you can't do in Haskell, e.g. you can't have different types in a list).</p><p>For example, if we have</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">data</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">forall</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">Show</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token plain"> </span><span class="token hvariable">s</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>now we can do</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token hvariable">someShowables</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">someShowables</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"Hi"</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">5</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token number" style="color:rgb(247, 140, 108)">1</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">2</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">printShowables</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">[</span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token punctuation" style="color:rgb(199, 146, 234)">]</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">IO</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">printShowables</span><span class="token plain"> </span><span class="token hvariable">ss</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">mapM_</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token operator" style="color:rgb(137, 221, 255)">\</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token builtin" style="color:rgb(130, 170, 255)">print</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token hvariable">ss</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">main</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">IO</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token hvariable">main</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token hvariable">printShowables</span><span class="token plain"> </span><span class="token hvariable">someShowables</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this example this allowed us to create a heterogeneous list, but only thing we can do with the contents of it is show them.</p><p>What is interesting is that in this case, <code>forall</code> plays the role of an existential quantifier (therefore the name of extension, <code>ExistentialQuantification</code>), unlike the role of universal quantifier it normally plays.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="gadts">GADTs<a class="hash-link" href="#gadts" title="Direct link to heading">​</a></h3><p>Alternative approach to <code>ExistentialQuantification</code> is to use the <code>GADTs</code> extension, like this:</p><div class="language-hs codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-hs codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">{-# LANGUAGE GADTs #-}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">data</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">where</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">::</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">Show</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token hvariable">s</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">-&gt;</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">Showable</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>In this case <code>forall</code> is not needed, as it is implicit.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="forall-and-extension-typeapplications"><code>forall</code> and extension <a href="https://ghc.readthedocs.io/en/latest/glasgow_exts.html#visible-type-application" target="_blank" rel="noopener noreferrer">TypeApplications</a><a class="hash-link" href="#forall-and-extension-typeapplications" title="Direct link to heading">​</a></h2><p><code>TypeApplications</code> does not change how <code>forall</code> works like the extensions above do, but it does have an interesting interaction with <code>forall</code>, so we will mention it here.</p><p><code>TypeApplications</code> allows you to specify values of types variables in a type.</p><p>For example, you can do <code>show (read @Int "5")</code> to specify that <code>"5"</code> should be interpreted as an <code>Int</code>.
<code>read</code> has type signature <code>:: Read a =&gt; String -&gt; a</code>, so what <code>@Int</code> does is say that that <code>a</code> in the type signature is <code>Int</code>.
Therefore, <code>read @Int :: String -&gt; Int</code>.</p><p>How does <code>forall</code> come into play here?</p><p>Well, if an identifier’s type signature does not include an explicit <code>forall</code>, the type variable arguments appear in the left-to-right order in which the variables appear in the type. So, <code>foo :: Monad m =&gt; a b -&gt; m (a c)</code> will have its type variables ordered as <code>m</code>, <code>a</code>, <code>b</code>, <code>c</code>, and type applications will happen in that order: if we have <code>foo @Maybe @Either</code>, <code>@Maybe</code> will apply to <code>m</code> while <code>@Either</code> will apply to <code>a</code>. However, if you want to force a different order, for example <code>a</code>, <code>b</code>, <code>c</code>, <code>m</code>, so that <code>@Maybe</code> in <code>foo @Maybe @Either</code> applies to <code>a</code>, you can refactor the signature as <code>foo :: forall a b c m. Monad m =&gt; a b -&gt; m (a c)</code>, and now order of type variables in <code>forall</code> will be used when doing type applications!</p><p>This will require you to enable <code>ExplicitForAll</code> extension, if it is not already enabled.</p><h1>Conclusion</h1><p>This document should give a fair idea of how <code>forall</code> is used and what can be done with it, but it doesn't go into much depth or cover all of the ways <code>forall</code> is used in Haskell.</p><p>For more in-detail explanations and further investigation, here is a couple of useful resources:</p><ul><li>Great SO question/answers: <a href="https://stackoverflow.com/questions/3071136/what-does-the-forall-keyword-in-haskell-ghc-do" target="_blank" rel="noopener noreferrer">https://stackoverflow.com/questions/3071136/what-does-the-forall-keyword-in-haskell-ghc-do</a> .</li><li>Docs on extensions, which in details describe how each of them works: <a href="https://ghc.readthedocs.io/en/latest/glasgow_exts.html" target="_blank" rel="noopener noreferrer">https://ghc.readthedocs.io/en/latest/glasgow_exts.html</a> .</li><li><a href="https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/explicit_forall.html" target="_blank" rel="noopener noreferrer">https://ghc.gitlab.haskell.org/ghc/doc/users_guide/exts/explicit_forall.html</a> .</li><li>Article about <code>ST</code> monad that also explains a lot about <code>forall</code>: <a href="https://dl.acm.org/doi/10.1145/178243.178246" target="_blank" rel="noopener noreferrer">https://dl.acm.org/doi/10.1145/178243.178246</a> . </li></ul><p>This blog post originated from the <a href="https://github.com/wasp-lang/haskell-handbook/blob/35f14951b17f2174cbc269628bea157b6698a9e4/forall.md" target="_blank" rel="noopener noreferrer">notes I wrote in wasp-lang/haskell-handbook</a>.</p>]]></content>
        <author>
            <name>Martin Sosic</name>
            <uri>https://github.com/martinsos</uri>
        </author>
        <category label="haskell" term="haskell"/>
        <category label="tutorial" term="tutorial"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[How to implement a Discord bot (in NodeJS) that requires new members to introduce themselves]]></title>
        <id>/2021/04/29/discord-bot-introduction</id>
        <link href="https://wasp-lang.dev/blog/2021/04/29/discord-bot-introduction"/>
        <updated>2021-04-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<img alt="Guest introducing themselves and getting full-access."]]></summary>
        <content type="html"><![CDATA[<p align="center"></p><figure><img loading="lazy" alt="Guest introducing themselves and getting full-access." src="/img/discord-introduction-example.png" class="img_ev3q"><figcaption>A Guest user getting access by introducing themselves in the "introductions" channel.</figcaption></figure><p></p><p>At <a href="https://wasp-lang.dev" target="_blank" rel="noopener noreferrer">Wasp</a>, we have a Discord server for our community, where we talk with people interested in and using Wasp - Waspeteers!</p><p>In the beginning, we knew everybody in the community by their name, but as it started growing, we had a lot of people joining that never wrote anything, and the community started feeling less homey, less intimate.</p><p>This was when we decided to make it required for the new members to introduce themselves to gain access to the community.
We knew that with this kind of barrier we would probably lose some potential new Waspeteers, but those that would go through it would be more engaged and better integrated.</p><p>We found no other way to accomplish this automatically but to implement our own Discord bot.
In this post I will describe in detail how we did it.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="high-level-approach">High-level approach<a class="hash-link" href="#high-level-approach" title="Direct link to heading">​</a></h2><p>We want the following: when a new user comes to our Discord server, they should be able to access only "public" channels, like <code>rules</code>, <code>contributing</code>, and most importantly, <code>introductions</code>, where they could introduce themselves.</p><p>Once they introduced themselves in the <code>introductions</code> channel, they would get access to the rest of the channels.</p><p align="center"></p><figure><img loading="lazy" alt="Channels user can see when Guest vs when full member." src="/img/wasp-guest-vs-waspeteer.png" height="400px" class="img_ev3q"><figcaption>Left: what Guest sees; Right: what Waspeteer sees.</figcaption></figure><p></p><p>In Discord, access control is performed via roles. There are two ways to accomplish what we need:</p><ol><li><strong>Adding a role that grants access</strong>. When they join, they have no roles. Once they introduce themselves, they are granted a role (e.g. <code>Member</code> or <code>Waspeteer</code>) that is required to access the rest of the server.</li><li><strong>Removing a role that forbids access</strong>. When they join, they are automatically assigned a role <code>Guest</code>, for which we configured the non-public channels to deny access. Once they introduce themselves, the role <code>Guest</code> gets removed and they gain access to the rest of the server.</li></ol><p>We decided to go with the second approach since it means we don't have to assign all the existing members with a new role. From now on, we will be talking about how to get this second approach working.</p><p>To get this going, we need to do the following:</p><ol><li>Create role <code>Guest</code>.</li><li>Ensure that the <code>Guest</code> role has permissions to access only "public" channels.
One convenient way to go about this is to disable "View Channels" permission for the role <code>Guest</code> at the level of Category, so it propagates to all the channels in it, instead of doing it for every single channel.
Once you are done, use the "See server as a role" feature of Discord to confirm that you set the permissions as you wanted.</li><li>Automatically inform new members that they must introduce themselves in the <code>introductions</code> channel with <code>!intro &lt;text_about_me&gt;</code> to gain access to the rest of the server.
This can be done via Discord's "Welcome Screen" feature or via one of the many existing Discord bots out there offering this functionality.</li><li>Automatically assign the <code>Guest</code> role to a new member when they join the server.</li><li>Automatically remove the <code>Guest</code> role when a member introduces themselves in the public <code>introductions</code> channel.</li></ol><p>#1, #2 and #3 are relatively straight-forward.</p><p>For the #4 (automatic assignment of the role when a new member joins the server), since Discord doesn't support this directly, you will need a bot to do it.
Luckily, many bots allow you to auto-assign roles when new members join, and I ended up using <a href="https://mee6.xyz/" target="_blank" rel="noopener noreferrer">MEE6</a> for this.
I set it up so that when a new member joins, they are immediately assigned a <code>Guest</code> role.</p><p>However, for the #5 (remove or assign the role on a message in a specific channel), the situation is more complicated - I couldn't find a single bot out there that supports this!
The closest I got was with <a href="https://carl.gg/" target="_blank" rel="noopener noreferrer">Carl Bot</a> and its "tags" feature, which allows you to write custom code, but in the end, it turned out to be too restrictive to accomplish this.
Therefore, I ended up implementing our own bot (Wasp Bot) that does this.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="implementing-a-discord-bot-nodejs">Implementing a Discord Bot (NodeJS)<a class="hash-link" href="#implementing-a-discord-bot-nodejs" title="Direct link to heading">​</a></h2><p>I decided to implement a bot in NodeJS since it is easy to get started quickly and there is a good Discord library.</p><p>I will describe how to create it step by step below, but <a href="https://github.com/wasp-lang/wasp-bot/tree/4b3858202622c7635aeb6f1d71d9ba9781eea6eb" target="_blank" rel="noopener noreferrer">here is the final code of the bot</a> if you want to skip ahead.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="defining-bot-on-discord-and-adding-it-to-your-server">Defining bot on Discord and adding it to your server.<a class="hash-link" href="#defining-bot-on-discord-and-adding-it-to-your-server" title="Direct link to heading">​</a></h3><p>Before we even start implementing the bot, we will tell Discord about it first, in order to obtain the neccessary credentials that we will use in our code, and we will add the bot to our server.
There are many tutorials already on how to do this, so I will keep it short.</p><ol><li>Go to Discord Developer Portal, create a new Application -&gt; I named it <code>Wasp</code>.</li><li>Go to the "Bot" part of Application "Settings" and add a new bot. I named it <code>WaspBot</code>.</li><li>On the "Bot" page of your freshly created bot, there is a "TOKEN" part -&gt; create a mental note about it, we will need this later when running our bot.</li><li>Go to the "OAuth2" part of Application "Settings". Here we will define which permissions our bot will have.
This is done by checking the permissions we want to give it and then following the URL that will be generated based on our choices.<ul><li>Check the <code>bot</code> under the "SCOPES" section.</li><li>Scroll down further to find the "BOT PERMISSIONS" section. There, check the <code>Manage Roles</code>, <code>View Channels</code>, <code>Read Message History</code>, and <code>Send Messages</code>.</li><li>Under the "SCOPES" section above, you will see a URL. Copy it into the browser and follow the steps to add the bot to your server.</li></ul></li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="creating-a-basic-bot-in-nodejs">Creating a basic bot in NodeJS<a class="hash-link" href="#creating-a-basic-bot-in-nodejs" title="Direct link to heading">​</a></h3><p>In a directory where your code will be, create a new npm project with <code>npm init</code> -&gt; set the entry point to <code>bot.js</code> instead of <code>index.js</code>. This will result in a <code>package.json</code> file being generated.</p><p>We will need one important dependency, <code>discord.js</code>, to make it easy to work with Discord's API.
Add it with <code>npm install -S discord.js</code>.</p><p>Now, create <code>bot.js</code> file next to <code>package.json</code> with following content:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">bot.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token maybe-class-name">Discord</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token function" style="color:rgb(130, 170, 255)">require</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'discord.js'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">BOT_TOKEN</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> process</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">env</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token constant" style="color:rgb(130, 170, 255)">BOT_TOKEN</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> bot </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">new</span><span class="token plain"> </span><span class="token class-name" style="color:rgb(255, 203, 107)">Discord</span><span class="token class-name punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token class-name" style="color:rgb(255, 203, 107)">Client</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">bot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">login</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">BOT_TOKEN</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">bot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">on</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'ready'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">function</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token parameter">evt</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token console class-name" style="color:rgb(255, 203, 107)">console</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">log</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">Logged in as: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">bot</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">user</span><span class="token template-string interpolation punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token template-string interpolation property-access">tag</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)">.</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This is it! Run</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token plain">DISCORD_BOT=&lt;TOKEN_OF_YOUR_DISCORD_BOT&gt; node bot.js</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>and you should see output about successful login, in my case it was <code>Logged in as: WaspBot#1234</code>.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="detecting-a-valid-introduction-from-a-member">Detecting a valid introduction from a member<a class="hash-link" href="#detecting-a-valid-introduction-from-a-member" title="Direct link to heading">​</a></h3><p><strong>NOTE</strong>: For the following part, I was using <a href="https://discord.js.org/#/" target="_blank" rel="noopener noreferrer">Discord.js</a> docs to figure out how to do it, so if you need more details on a specific step, check them out.</p><p>Now is the moment to define exactly how we want the introduction process to go.
So, let's say that the correct way for new members to introduce themselves is by sending a message to the <code>introductions</code> channel that starts with <code>!intro </code> and follows with at least 20 characters of text (to ensure the introduction is not too short).
<code>!intro</code> makes it easy for our bot to know when to act (in Discord, bot commands often start with <code>!&lt;something&gt;</code>).</p><p>Let's add the needed code to <code>bot.js</code>:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">bot.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">INTRODUCTIONS_CHANNEL_ID</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER&gt;"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">bot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">on</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'message'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token parameter">msg</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">content</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">startsWith</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'!intro '</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">channel</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">toString</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">!==</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">INTRODUCTIONS_CHANNEL_ID</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> introductionsChannelName </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">guild</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">channels</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">resolve</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">INTRODUCTIONS_CHANNEL_ID</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">reply</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">Please use !intro command in the </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">introductionsChannelName</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)"> channel!</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> introMsg </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">content</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">substring</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'!intro '</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">trim</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> minMsgLength </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">20</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">introMsg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain"> minMsgLength</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">reply</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">Please write introduction at least </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">minMsgLength</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)"> characters long!</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">reply</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">Yay successful introduction!</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>One thing to notice is that you will have to obtain the ID of the <code>introductions</code> channel and paste it in your code where I put the placeholder above.
You can find out this ID by going to your Discord server in the Discord app, right-clicking on the <code>introductions</code> channel, and clicking on <code>Copy ID</code>. For this to work, you will first have to enable the "Developer Mode" (under "User Settings" &gt; "Advanced").</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="removing-the-guest-role-upon-successful-introduction">Removing the "Guest" role upon successful introduction<a class="hash-link" href="#removing-the-guest-role-upon-successful-introduction" title="Direct link to heading">​</a></h3><p>What is missing is removing the <code>Guest</code> role upon successful introduction, so let's do that:</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">bot.js</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token spread operator" style="color:rgb(137, 221, 255)">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">INTRODUCTIONS_CHANNEL_ID</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER&gt;"</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">GUEST_ROLE_ID</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"&lt;YOU_WILL_HAVE_TO_FIND_THIS_ON_DISCORD_SERVER&gt;"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">bot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">on</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'message'</span><span class="token punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token plain"> </span><span class="token keyword" style="font-style:italic">async</span><span class="token plain"> </span><span class="token parameter">msg</span><span class="token plain"> </span><span class="token arrow operator" style="color:rgb(137, 221, 255)">=&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">content</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">startsWith</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'!intro '</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">channel</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">id</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">toString</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">!==</span><span class="token plain"> </span><span class="token constant" style="color:rgb(130, 170, 255)">INTRODUCTIONS_CHANNEL_ID</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> introductionsChannelName </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">guild</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">channels</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">resolve</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">INTRODUCTIONS_CHANNEL_ID</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">name</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">reply</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">Please use !intro command in the </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">introductionsChannelName</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)"> channel!</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> introMsg </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">content</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">substring</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token string" style="color:rgb(195, 232, 141)">'!intro '</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">length</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">trim</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> minMsgLength </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> </span><span class="token number" style="color:rgb(247, 140, 108)">20</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">introMsg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">length</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token plain"> minMsgLength</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">reply</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">Please write introduction at least </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">minMsgLength</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string string" style="color:rgb(195, 232, 141)"> characters long!</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword" style="font-style:italic">const</span><span class="token plain"> member </span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token plain"> msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">guild</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">member</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">author</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token keyword control-flow" style="font-style:italic">try</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">if</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">member</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">roles</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">cache</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">get</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">GUEST_ROLE_ID</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">await</span><span class="token plain"> member</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">roles</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">remove</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token constant" style="color:rgb(130, 170, 255)">GUEST_ROLE_ID</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">reply</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">'Nice getting to know you! You are no longer a guest'</span><span class="token plain"> </span><span class="token operator" style="color:rgb(137, 221, 255)">+</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">          </span><span class="token string" style="color:rgb(195, 232, 141)">' and have full access, welcome!'</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">        </span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"> </span><span class="token keyword control-flow" style="font-style:italic">catch</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token plain">error</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">      </span><span class="token keyword control-flow" style="font-style:italic">return</span><span class="token plain"> msg</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token method function property-access" style="color:rgb(130, 170, 255)">reply</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token template-string string" style="color:rgb(195, 232, 141)">Error: </span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">${</span><span class="token template-string interpolation">error</span><span class="token template-string interpolation interpolation-punctuation punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token template-string template-punctuation string" style="color:rgb(195, 232, 141)">`</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line theme-code-block-highlighted-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Same as with the ID of the <code>introductions</code> channel, now you will also need to find out the ID of the <code>Guest</code> role (which you should have created at some point).
You can do it by finding it in the server settings, under the list of roles, right-clicking on it, and then "Copy ID".</p><p>This is it! You can now run the bot with</p><div class="language-js codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-js codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token constant" style="color:rgb(130, 170, 255)">DISCORD_BOT</span><span class="token operator" style="color:rgb(137, 221, 255)">=</span><span class="token operator" style="color:rgb(137, 221, 255)">&lt;</span><span class="token constant" style="color:rgb(130, 170, 255)">TOKEN_OF_YOUR_DISCORD_BOT</span><span class="token operator" style="color:rgb(137, 221, 255)">&gt;</span><span class="token plain"> node bot</span><span class="token punctuation" style="color:rgb(199, 146, 234)">.</span><span class="token property-access">js</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>and if you assign yourself a <code>Guest</code> role on the Discord server and then type <code>!intro Hi this is my introduction, I am happy to be here.</code> in the <code>introductions</code> channel, you should see yourself getting full access together with an appropriate message from your bot.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="deploying-the-bot">Deploying the bot<a class="hash-link" href="#deploying-the-bot" title="Direct link to heading">​</a></h3><div class="theme-admonition theme-admonition-note alert alert--secondary admonition_LlT9"><div class="admonitionHeading_tbUL"><span class="admonitionIcon_kALy"><svg viewBox="0 0 14 16"><path fill-rule="evenodd" d="M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"></path></svg></span>note</div><div class="admonitionContent_S0QG"><p>Heroku used to offer free apps under certain limits. However, as of November 28, 2022, they ended support for their free tier. <a href="https://blog.heroku.com/next-chapter" target="_blank" rel="noopener noreferrer">https://blog.heroku.com/next-chapter</a></p><p>As such, we have updated our Deployment docs with new recommendations: <a href="https://wasp-lang.dev/docs/deploying" target="_blank" rel="noopener noreferrer">https://wasp-lang.dev/docs/deploying</a></p></div></div><p>While there are many ways to deploy the Discord bot, I will shortly describe how we did it via Heroku.</p><p>We created a Heroku app <code>wasp-discord-bot</code> and set up the "Automatic deploys" feature on Heroku to automatically deploy every push to the <code>production</code> branch (our bot is on Github).</p><p>On Heroku, we set the environment variable <code>DISCORD_BOT</code> to the token of our bot.</p><p>Finally, we added <code>Procfile</code> to our project:</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">Procfile</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token key atrule">worker</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> node bot.js</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>That is it! On every push to the <code>production</code> branch, our bot gets deployed.</p>]]></content>
        <author>
            <name>Martin Sosic</name>
            <uri>https://github.com/martinsos</uri>
        </author>
        <category label="discord" term="discord"/>
        <category label="nodejs" term="nodejs"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Wasp - language for developing full-stack Javascript web apps with no boilerplate]]></title>
        <id>/2021/03/02/wasp-alpha</id>
        <link href="https://wasp-lang.dev/blog/2021/03/02/wasp-alpha"/>
        <updated>2021-03-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<!---]]></summary>
        <content type="html"><![CDATA[<p align="center"><img loading="lazy" alt="Wasp logo" src="/img/wasp-logo-wide.png" height="150px" class="img_ev3q"></p><p>For the last year and a half, my twin brother and I have been working on <a href="https://wasp-lang.dev" target="_blank" rel="noopener noreferrer">Wasp</a>: a new programming language for developing full-stack web apps with less code.</p><p>Wasp is a <strong>simple declarative language</strong> that makes developing web apps easy while still allowing you to use the latest technologies like <strong>React, Node.js, and Prisma</strong>.</p><p>In this post, I will share with you why we believe Wasp could be a big thing for web development, how it works, where we are right now and what is the plan for the future!</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-wasp">Why Wasp?<a class="hash-link" href="#why-wasp" title="Direct link to heading">​</a></h2><p>You know how to use React, know your way around HTML/CSS/…, know how to write business logic on the backend (e.g. in Node), but when you want to build an actual web app and deploy it for others to use, you drown in all the details and extra work - responsive UI, proper error handling, security, building, deployment, authentication, managing server state on the client, managing database, different environments, ....</p><p align="center"><img loading="lazy" alt="Iceberg of web app development" src="/img/iceberg-of-web-app-dev.png" width="500px" class="img_ev3q"></p><p>Jose Aguinaga described in a fun way the unexpected complexity of web app development in his blog post <a href="https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f" target="_blank" rel="noopener noreferrer">"How it feels to learn JavaScript in 2016"</a>, which still feels relevant 4 years later. </p><p>We are building Wasp because even though we are both experienced developers and have worked on multiple complex web apps in various technologies (JQuery -&gt; Backbone -&gt; Angular -&gt; React, own scripts / makefile -&gt; Grunt -&gt; Gulp -&gt; Webpack, PHP -&gt; Java -&gt; Node.js, …), we still feel <strong>building web apps is harder than it should be</strong>, due to a lot of boilerplate and repetitive work involved in the process.  </p><p>The main insight for us was that while the tech stack keeps advancing rapidly, the core requirements of the apps are mostly remaining the same (auth, routing, data model CRUD, ACL, …).</p><p>That is why almost 2 years ago we started thinking about <strong>separating web app specification</strong> (what it should do) <strong>from its implementation</strong> (how it should do it).<br>
<!-- -->This led us to the idea of extracting common web app features and concepts into a special specification language (Wasp), while the implementation details are still described via a modern stack (right now React, Node.js, Prisma).</p><p>Our vision with Wasp is to create <strong>a powerful but simple language where you can describe your web app as humanly as possible</strong>.
We want to make the top of that iceberg on the image above as pleasant as possible while making the bottom part much smaller.<br>
<!-- -->In such language, with just a few words, you can specify pages and their routes, specify which type of authentication you want, define basic entities / data models, describe basic data flow, choose where you want to deploy, implement specific details in React/Node, and let Wasp take care of connecting it all, building it and deploying it.</p><div class="language-css codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#bfc7d5;--prism-background-color:#292d3e"><div class="codeBlockTitle_Ktv7">Example of wasp code describing part of a simple full-stack web app.</div><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-css codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">app todoApp</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">title</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> </span><span class="token string" style="color:rgb(195, 232, 141)">"ToDo App"</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/* visible in tab */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token selector" style="color:rgb(199, 146, 234)">route "/" -</span><span class="token selector combinator" style="color:rgb(199, 146, 234)">&gt;</span><span class="token selector" style="color:rgb(199, 146, 234)"> page Main</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">page Main</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token property">component</span><span class="token punctuation" style="color:rgb(199, 146, 234)">:</span><span class="token plain"> import Main from </span><span class="token string" style="color:rgb(195, 232, 141)">"@ext/Main.js"</span><span class="token plain">  </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/* Import your React code. */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token selector" style="color:rgb(199, 146, 234)">auth</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"> </span><span class="token comment" style="color:rgb(105, 112, 152);font-style:italic">/* full-stack auth out-of-the-box */</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token selector" style="color:rgb(199, 146, 234)">userEntity: User</span><span class="token selector punctuation" style="color:rgb(199, 146, 234)">,</span><span class="token selector" style="color:rgb(199, 146, 234)"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token selector" style="color:rgb(199, 146, 234)">  methods:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">    </span><span class="token selector" style="color:rgb(199, 146, 234)">usernameAndPassword:</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  </span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain"></span><span class="token selector" style="color:rgb(199, 146, 234)">entity User</span><span class="token plain"> </span><span class="token punctuation" style="color:rgb(199, 146, 234)">{</span><span class="token plain">=psl</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  id          Int     @id @</span><span class="token function" style="color:rgb(130, 170, 255)">default</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token function" style="color:rgb(130, 170, 255)">autoincrement</span><span class="token punctuation" style="color:rgb(199, 146, 234)">(</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token punctuation" style="color:rgb(199, 146, 234)">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  username    String  @unique</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">  password    String</span><br></span><span class="token-line" style="color:#bfc7d5"><span class="token plain">psl=</span><span class="token punctuation" style="color:rgb(199, 146, 234)">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg class="copyButtonIcon_y97N" viewBox="0 0 24 24"><path d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg class="copyButtonSuccessIcon_LjdS" viewBox="0 0 24 24"><path d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>Check <a href="https://github.com/wasp-lang/wasp/blob/release/examples/tutorials/TodoApp/main.wasp" target="_blank" rel="noopener noreferrer">here</a> for the complete example.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="why-a-language-dsl-arent-frameworks-solving-this-already">Why a language (DSL), aren’t frameworks solving this already?<a class="hash-link" href="#why-a-language-dsl-arent-frameworks-solving-this-already" title="Direct link to heading">​</a></h2><p>Frameworks (like e.g. Ruby on Rails or Meteor) are a big inspiration to us.
However, we want to take things one step further - by designing a language specialized for the domain of web apps (a <a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="noopener noreferrer">DSL</a>) we can get rid of a lot of boilerplate and provide a cleaner &amp; simpler developer experience.</p><p>On the other hand, we are not trying to replace everything with Wasp nor think that would make sense - just the opposite, Wasp acts as a “glue” between your React and Node.js code, saving you from the grunt work while allowing you to keep the flexibility of writing your own code.
<strong>The majority of the code is still being written in React and Node.js, with Wasp serving as the backbone of your whole application.</strong></p><p>Another benefit of a DSL is that it allows Wasp to <strong>understand the web app’s requirements during the build time and reason about it</strong> before generating the final code, and this is what we are especially excited about.</p><p>For example, when generating code to be deployed to production, it could pick the most appropriate architecture based on its understanding of the web app and deploy it to serverless or another type of architecture (or even a combination).
Another example would be reusing your data model logic through all the parts of the stack while defining it just once in Wasp.</p><p>DSL opens the potential for optimizations, static analysis, extensibility, and unparalleled ergonomics.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="how-does-it-work">How does it work?<a class="hash-link" href="#how-does-it-work" title="Direct link to heading">​</a></h2><p>Wasp compiler compiles the .wasp/React/Node.js source code into just React/Node.js target code.<br>
<!-- -->Currently, Wasp supports only Javascript, but we plan to add Typescript soon.<br>
<!-- -->Technical note: Wasp compiler is implemented in Haskell.</p><p><img loading="lazy" alt="Wasp compilation diagram" src="/assets/images/wasp-compilation-6585aca9de412cf27332aa8f21e7da4d.png" width="1525" height="696" class="img_ev3q"></p><p>While right now only React and Node.js are supported, we plan to support multiple other technologies in the future.</p><p>Generated code is human readable and can easily be inspected and even ejected if Wasp becomes too limiting.
If not ejecting, there is no need for you to ever look at the generated code - it is generated by Wasp in the background.</p><p>Wasp is used via <code>wasp</code> CLI - to run wasp project in development, all you need to do is run <code>wasp start</code>.</p><p align="center"><img loading="lazy" alt="Wasp CLI output" src="/img/wasp-cli-output.png" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="where-is-wasp-now-and-where-is-it-going">Where is Wasp now and where is it going?<a class="hash-link" href="#where-is-wasp-now-and-where-is-it-going" title="Direct link to heading">​</a></h2><p>Our big vision is to move as much of the web app domain knowledge as possible into the Wasp language itself, giving Wasp more power and flexibility.</p><p>Ultimately, since Wasp would have such a deep understanding of the web app's requirements, we could generate a visual editor on top of it - allowing non-developers to participate in development alongside developers.</p><p>Also, Wasp wouldn't be tied to the specific technology but rather support multiple technologies (React/Angular/..., Node/Go/...**.</p><p><strong>Wasp is currently in Alpha</strong> and some features are still rough or missing, there are things we haven’t solved yet and others that will probably change as we progress, but <strong>you can try it out and build and deploy web apps</strong>!</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-wasp-currently-supports">What Wasp currently supports:<a class="hash-link" href="#what-wasp-currently-supports" title="Direct link to heading">​</a></h3><ul><li>✅ full-stack auth (username &amp; password)</li><li>✅ pages &amp; routing</li><li>✅ blurs the line between client &amp; server - define your server actions and queries and call them directly in your client code (RPC)!</li><li>✅ smart caching of server actions and queries (automatic cache invalidation)</li><li>✅ entity (data model) definition with Prisma.io</li><li>✅ ACL on frontend</li><li>✅ importing NPM dependencies </li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="what-is-coming">What is coming:<a class="hash-link" href="#what-is-coming" title="Direct link to heading">​</a></h3><ul><li>⏳ ACL on backend</li><li>⏳ one-click deployment</li><li>⏳ more auth methods (Google, Linkedin, ...**</li><li>⏳ tighter integration of entities with other features</li><li>⏳ themes and layouts</li><li>⏳ support for explicitly defined server API</li><li>⏳ inline JS - the ability to mix JS code with Wasp code!</li><li>⏳ Typescript support</li><li>⏳ server-side rendering</li><li>⏳ Visual Editor</li><li>⏳ support for different languages on the backend</li><li>⏳ richer wasp language with better tooling </li></ul><p><strong>You can check out our repo</strong> at <a href="https://github.com/wasp-lang/wasp" target="_blank" rel="noopener noreferrer">https://github.com/wasp-lang/wasp</a> and <strong>give it a try</strong> at <a href="https://wasp-lang.dev/docs" target="_blank" rel="noopener noreferrer">https://wasp-lang.dev/docs</a> -&gt; we are always looking for feedback and suggestions on how to shape Wasp!</p><p>We also have a <strong>community</strong> on <a href="https://discord.com/invite/rzdnErX" target="_blank" rel="noopener noreferrer">Discord</a>, where we chat about Wasp-related stuff - join us to see what we are up to, share your opinions or get help with your Wasp project.</p>]]></content>
        <author>
            <name>Martin Sosic</name>
            <uri>https://github.com/martinsos</uri>
        </author>
        <category label="wasp" term="wasp"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Journey to YCombinator]]></title>
        <id>/2021/02/23/journey-to-ycombinator</id>
        <link href="https://wasp-lang.dev/blog/2021/02/23/journey-to-ycombinator"/>
        <updated>2021-02-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[<img alt="Martin & Matija at YCombinator HQ"]]></summary>
        <content type="html"><![CDATA[<p align="center"><img loading="lazy" alt="Martin &amp; Matija at YCombinator HQ" src="/img/us-at-ycombinator.jpg" height="400px" class="img_ev3q"></p><p>Wasp became part of Winter 2021 YCombinator batch!</p><p>Here we describe our journey and how we got in after applying for the third time.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-beginning">The beginning<a class="hash-link" href="#the-beginning" title="Direct link to heading">​</a></h2><p>About 2 years ago (start of 2019) brother and I first started thinking about the idea of a (domain specific) language that is specialized for full-stack web app development - language that removes boilerplate and makes web development simpler.
We named it Wasp (Web App SPecification).</p><p>After working on it for about a year as a side-project (researching the space, talking with potential users, building a prototype, learning), we realized it will take our full-time dedication to make something serious out of it, so we quit the current job and went all-in into Wasp, bootstrapping ourselves while working on it, to see how far we can get.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-journey-to-ycombinator">The journey to YCombinator<a class="hash-link" href="#the-journey-to-ycombinator" title="Direct link to heading">​</a></h2><p>Due to the nature of Wasp (open-source, web framework / language), we were aware that we will need to raise funds at some point if we want to survive.
We had a startup of our own previously, and we worked in multiple startups in the past, so we already knew quite a bit about how to go about it and what to expect.</p><p>Therefore, as soon as we went full-time into it (start of 2020), we immediately applied for YCombinator (top startup accelerator in the world). Soon, we got invited to the USA (we are from Europe) for the final on-site interview!</p><p>We spent weeks preparing for the interview, polishing our pitch, vision, business plan, our understanding of our users, doing mock interviews - all for those crucial 10 minutes (yes, interview lasts only 10 minutes!).
At the end we didn’t pass the final interview, however we got encouraging feedback that, although we are too early, we have potential and should try applying again when we make more progress.
This made a lot of sense to us, since we had only a very basic prototype and little traction.</p><p>We decided to continue working on Wasp for some longer time and continue applying to YC and talking with other interesting accelerators/investors, and see where that gets us - if nothing else, we will learn a lot on the way :)!</p><p>Half a year later, after making progress on multiple sides, we went for a second interview (this time online due to Covid) and while we felt it was really close, we still didn’t get in - they wanted to see more traction, more proof that people want it.</p><p>Finally, by the autumn of 2020, we were in a position where we had released an early-alpha version of Wasp, managed to build an initial community (&gt;50 people on Discord, 500 Github stars) and made it to “Product of the day” on the Product Hunt.
With all that we applied for the YC for the third time and made it in!</p><p>Interesting fact is that if you applied to YC previously and got rejected, that is actually a plus when you apply the next time (it show persistence, and they can see your progress).
Also, while we did spend significant time preparing for the YC interviews, all that preparation also helped us get a better understanding of our idea, what our users(developers) really need and how to properly present it, so it was worth it regardless of the result of the interviews.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="what-now">What now?<a class="hash-link" href="#what-now" title="Direct link to heading">​</a></h2><p>Right now (Feb 2020) we are in the middle of the YCombinator program, building community, talking with developers and developing Wasp toward beta.</p><p>It is still just the two of us and Wasp is in early stage, but with amazing community members on our side and with YC backing us up, we are not afraid to dream big!</p>]]></content>
        <author>
            <name>Martin Sosic</name>
            <uri>https://github.com/martinsos</uri>
        </author>
        <category label="startup" term="startup"/>
        <category label="wasp" term="wasp"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Wasp!]]></title>
        <id>/2019/09/01/hello-wasp</id>
        <link href="https://wasp-lang.dev/blog/2019/09/01/hello-wasp"/>
        <updated>2019-09-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[About a year or so ago, brother and I started discussing how awesome it would be to have a programming language that would understand what “web app” means. Such language would, on one hand, serve as an expressive specification of the web app, while on the other hand, it would take care of “boring” work for us, while we could focus on the business logic specific for our web app.]]></summary>
        <content type="html"><![CDATA[<p>About a year or so ago, brother and I started discussing how awesome it would be to have a programming language that would understand what “web app” means. Such language would, on one hand, serve as an expressive specification of the web app, while on the other hand, it would take care of “boring” work for us, while we could focus on the business logic specific for our web app.</p><p>Step by step, the idea has started to take a more concrete shape, and Wasp (Web Application SPecification language) came to life! While still very early, we are writing this blog post to explain why are we building Wasp, what is the current status and what the future may hold.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="more-specification-less-implementation">More specification, less implementation<a class="hash-link" href="#more-specification-less-implementation" title="Direct link to heading">​</a></h2><p>Imagine you want to create a simple Todo web app.</p><p>You would explain it like this to your best buddy web developer: “I want to create a web app with the title ‘Todo App’ that has a single page with a list of tasks. Each task has a description and can be either marked as done or not done. The list starts as empty and tasks can be added, deleted or marked as done. I will send you designs for this. Also, I want a user to be required to register/log in.”</p><p>Now, let’s take a look at what needs to be done to implement such an app. We need to choose technologies we are going to use (frontend, backend, database, …), figure out the project file structure, set up the build toolchain, configure linting/auto-formatting/style-guide, set up tests (unit/integration, e2e), set up deployment (production, staging), set up code sharing between frontend and backend, … . Then, once everything is set up, we need to implement basic CRUD functionality (components on frontend and API on the backend), user management, probably some kind of menu on the frontend, …</p><p>We can easily see that explanation to web developer (specification) is short and concise because many details are implicit or assumed to be handled in a reasonable default way. On the other hand, implementation is complicated since it has to take care of all the details, many of them not unique for the web app we are building but common for most of the web apps. Also, if we consider the specification through time, it would look the same now and 5 years ago. On the other hand, implementation would be different, due to the new technologies that have emerged in the meantime.</p><p>So if the specification is time-resilient, short and relatively simple to describe, while implementation is complex, volatile and requires a lot of expert knowledge, how great would it be to write more of specification and less of implementation when building a web app? For that, we need more powerful languages, that will be able to express more in less code. This is where Wasp comes in.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="wasp">Wasp!<a class="hash-link" href="#wasp" title="Direct link to heading">​</a></h2><p>The idea behind Wasp is to take everything repetitive and common in the development of a typical web app and have Wasp take care of those parts for us. Ideally, programming in Wasp would very much look like describing the specification to the web developer, therefore writing more specification and less implementation. Wasp is the one who will keep evolving and making sure your specification is implemented in the best possible technology using the industry best practices.</p><p>To achieve that, we made Wasp as a DSL (domain-specific language) that understands common concepts of a web app like pages, routes, frontend and backend and their relationship, entities, user and roles/permissions, etc. Other parts, those that are specific for our web app (business logic), we can still write in html/css/js/…, and then plug them into Wasp, combining the power of Wasp with the flexibility of existing technologies.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="whats-up">What’s up?<a class="hash-link" href="#whats-up" title="Direct link to heading">​</a></h2><p>We are currently working on the first version of Wasp compiler, and are planning to soon have very first, MVP version ready. It will be just the first step of our vision of what Wasp could be, but the sooner we get it out there, the sooner we can start collecting feedback and further shaping Wasp together with the community.</p><p>We believe it will take significant effort to bring Wasp to the level where a big portion of developers will be able to build the whole app with Wasp without feeling restrained by missing flexibility or options, while on the other hand, we don’t want to wait too long until people can start using Wasp. Therefore, we decided to build it from start in such a way that a developer can at any moment “eject” from Wasp and continue on their own, where “ejecting” would mean that Wasp would generate the source code of web app that you can continue working on. That is why compiler for Wasp that we are building is actually a transpiler whose output is web app written with best practices, that you can at any moment take and continue from there if you feel too limited by Wasp. It is like having a senior developer guide you through writing a web app!</p><p>This poses the following question: “In which technologies will web app that Wasp transpiler produces be implemented?”. Well, while our vision is to offer multiple flavors here, so that you can choose the combination of technologies that you want to use, for a start we are going with one fixed technology stack, based on most popular technologies: React, Redux, NodeJS, and Mongo.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="moar">Moar<a class="hash-link" href="#moar" title="Direct link to heading">​</a></h2><p>One thing that we are very excited about regarding Wasp is that Wasp understands the way web app is built. So, once you describe it in Wasp, there are many things we could be able to do with it. We could automatically generate tests since we understand the requirements. We could suggest solutions on how to improve the design of the web app. Also, since Wasp should make building web apps easier, we could build solutions on top of it, for example, a visual builder that generates Wasp code, that in turn generates a web app.</p><p>We are still very early in the Wasp journey but we are very excited about the opportunities that we imagine it could bring and about the possibilities it could unlock. We hope that this blog post will inspire others to discuss this concept and that together we will create something amazing and learn a lot on the way!</p>]]></content>
        <author>
            <name>Martin Sosic</name>
            <uri>https://github.com/martinsos</uri>
        </author>
        <category label="wasp" term="wasp"/>
    </entry>
</feed>